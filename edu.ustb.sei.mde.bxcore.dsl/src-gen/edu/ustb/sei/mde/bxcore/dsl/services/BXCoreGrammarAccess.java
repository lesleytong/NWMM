/*
 * generated by Xtext 2.18.0.M3
 */
package edu.ustb.sei.mde.bxcore.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class BXCoreGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BXProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.BXProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportSectionParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cJavaImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJavaImportsXImportSectionParserRuleCall_1_0 = (RuleCall)cJavaImportsAssignment_1.eContents().get(0);
		private final Assignment cSlotsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSlotsDataSlotParserRuleCall_2_0 = (RuleCall)cSlotsAssignment_2.eContents().get(0);
		private final Assignment cDefinitionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionsAssignment_3.eContents().get(0);
		
		//BXProgram:
		//	imports+=ImportSection*
		//	javaImports=XImportSection?
		//	slots+=DataSlot*
		//	definitions+=Definition*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=ImportSection* javaImports=XImportSection? slots+=DataSlot* definitions+=Definition*
		public Group getGroup() { return cGroup; }
		
		//imports+=ImportSection*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//ImportSection
		public RuleCall getImportsImportSectionParserRuleCall_0_0() { return cImportsImportSectionParserRuleCall_0_0; }
		
		//javaImports=XImportSection?
		public Assignment getJavaImportsAssignment_1() { return cJavaImportsAssignment_1; }
		
		//XImportSection
		public RuleCall getJavaImportsXImportSectionParserRuleCall_1_0() { return cJavaImportsXImportSectionParserRuleCall_1_0; }
		
		//slots+=DataSlot*
		public Assignment getSlotsAssignment_2() { return cSlotsAssignment_2; }
		
		//DataSlot
		public RuleCall getSlotsDataSlotParserRuleCall_2_0() { return cSlotsDataSlotParserRuleCall_2_0; }
		
		//definitions+=Definition*
		public Assignment getDefinitionsAssignment_3() { return cDefinitionsAssignment_3; }
		
		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_3_0() { return cDefinitionsDefinitionParserRuleCall_3_0; }
	}
	public class ContextAwareActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ContextAwareAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContextAwareDerivationActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContextAwareUnidirectionalActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ContextAwareAction:
		//	ContextAwareDerivationAction | ContextAwareUnidirectionalAction;
		@Override public ParserRule getRule() { return rule; }
		
		//ContextAwareDerivationAction | ContextAwareUnidirectionalAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ContextAwareDerivationAction
		public RuleCall getContextAwareDerivationActionParserRuleCall_0() { return cContextAwareDerivationActionParserRuleCall_0; }
		
		//ContextAwareUnidirectionalAction
		public RuleCall getContextAwareUnidirectionalActionParserRuleCall_1() { return cContextAwareUnidirectionalActionParserRuleCall_1; }
	}
	public class ImportSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ImportSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetamodelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMetamodelEPackageCrossReference_1_0 = (CrossReference)cMetamodelAssignment_1.eContents().get(0);
		private final RuleCall cMetamodelEPackageSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cMetamodelEPackageCrossReference_1_0.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cShortNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cShortNameValidIDParserRuleCall_3_0 = (RuleCall)cShortNameAssignment_3.eContents().get(0);
		
		//ImportSection:
		//	'import' metamodel=[ecore::EPackage|STRING] 'as' shortName=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' metamodel=[ecore::EPackage|STRING] 'as' shortName=ValidID
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//metamodel=[ecore::EPackage|STRING]
		public Assignment getMetamodelAssignment_1() { return cMetamodelAssignment_1; }
		
		//[ecore::EPackage|STRING]
		public CrossReference getMetamodelEPackageCrossReference_1_0() { return cMetamodelEPackageCrossReference_1_0; }
		
		//STRING
		public RuleCall getMetamodelEPackageSTRINGTerminalRuleCall_1_0_1() { return cMetamodelEPackageSTRINGTerminalRuleCall_1_0_1; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//shortName=ValidID
		public Assignment getShortNameAssignment_3() { return cShortNameAssignment_3; }
		
		//ValidID
		public RuleCall getShortNameValidIDParserRuleCall_3_0() { return cShortNameValidIDParserRuleCall_3_0; }
	}
	public class DataSlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.DataSlot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSlotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarFullJvmFormalParameterParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitializerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitializerXExpressionParserRuleCall_2_1_0 = (RuleCall)cInitializerAssignment_2_1.eContents().get(0);
		
		//DataSlot:
		//	'slot' var=FullJvmFormalParameter ('=' initializer=XExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'slot' var=FullJvmFormalParameter ('=' initializer=XExpression)?
		public Group getGroup() { return cGroup; }
		
		//'slot'
		public Keyword getSlotKeyword_0() { return cSlotKeyword_0; }
		
		//var=FullJvmFormalParameter
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//FullJvmFormalParameter
		public RuleCall getVarFullJvmFormalParameterParserRuleCall_1_0() { return cVarFullJvmFormalParameterParserRuleCall_1_0; }
		
		//('=' initializer=XExpression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//initializer=XExpression
		public Assignment getInitializerAssignment_2_1() { return cInitializerAssignment_2_1; }
		
		//XExpression
		public RuleCall getInitializerXExpressionParserRuleCall_2_1_0() { return cInitializerXExpressionParserRuleCall_2_1_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCustomizedBiGULDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBXFunctionDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIndexDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cHelperDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Definition:
		//	CustomizedBiGULDefinition | TypeDefinition | BXFunctionDefinition | IndexDefinition | HelperDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//CustomizedBiGULDefinition | TypeDefinition | BXFunctionDefinition | IndexDefinition | HelperDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CustomizedBiGULDefinition
		public RuleCall getCustomizedBiGULDefinitionParserRuleCall_0() { return cCustomizedBiGULDefinitionParserRuleCall_0; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_1() { return cTypeDefinitionParserRuleCall_1; }
		
		//BXFunctionDefinition
		public RuleCall getBXFunctionDefinitionParserRuleCall_2() { return cBXFunctionDefinitionParserRuleCall_2; }
		
		//IndexDefinition
		public RuleCall getIndexDefinitionParserRuleCall_3() { return cIndexDefinitionParserRuleCall_3; }
		
		//HelperDefinition
		public RuleCall getHelperDefinitionParserRuleCall_4() { return cHelperDefinitionParserRuleCall_4; }
	}
	public class HelperDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.HelperDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHelperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersJvmFormalParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersJvmFormalParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//HelperDefinition:
		//	'helper' type=JvmTypeReference name=ValidID '(' (parameters+=JvmFormalParameter (','
		//	parameters+=JvmFormalParameter)*)? ')' body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'helper' type=JvmTypeReference name=ValidID '(' (parameters+=JvmFormalParameter (',' parameters+=JvmFormalParameter)*)?
		//')' body=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//'helper'
		public Keyword getHelperKeyword_0() { return cHelperKeyword_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parameters+=JvmFormalParameter (',' parameters+=JvmFormalParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parameters+=JvmFormalParameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }
		
		//JvmFormalParameter
		public RuleCall getParametersJvmFormalParameterParserRuleCall_4_0_0() { return cParametersJvmFormalParameterParserRuleCall_4_0_0; }
		
		//(',' parameters+=JvmFormalParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parameters+=JvmFormalParameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }
		
		//JvmFormalParameter
		public RuleCall getParametersJvmFormalParameterParserRuleCall_4_1_1_0() { return cParametersJvmFormalParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_6_0() { return cBodyXBlockExpressionParserRuleCall_6_0; }
	}
	public class CustomizedBiGULDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.CustomizedBiGULDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBigulKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceParamsJvmFormalParameterParserRuleCall_3_0 = (RuleCall)cSourceParamsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSourceParamsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSourceParamsJvmFormalParameterParserRuleCall_4_1_0 = (RuleCall)cSourceParamsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cViewParamsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cViewParamsJvmFormalParameterParserRuleCall_7_0 = (RuleCall)cViewParamsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cViewParamsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cViewParamsJvmFormalParameterParserRuleCall_8_1_0 = (RuleCall)cViewParamsAssignment_8_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final UnorderedGroup cUnorderedGroup_10 = (UnorderedGroup)cGroup.eContents().get(10);
		private final Group cGroup_10_0 = (Group)cUnorderedGroup_10.eContents().get(0);
		private final Keyword cGetKeyword_10_0_0 = (Keyword)cGroup_10_0.eContents().get(0);
		private final Assignment cGetAssignment_10_0_1 = (Assignment)cGroup_10_0.eContents().get(1);
		private final RuleCall cGetXExpressionParserRuleCall_10_0_1_0 = (RuleCall)cGetAssignment_10_0_1.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cUnorderedGroup_10.eContents().get(1);
		private final Keyword cPutKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Assignment cPutAssignment_10_1_1 = (Assignment)cGroup_10_1.eContents().get(1);
		private final RuleCall cPutXExpressionParserRuleCall_10_1_1_0 = (RuleCall)cPutAssignment_10_1_1.eContents().get(0);
		
		//CustomizedBiGULDefinition:
		//	'bigul' name=ValidID
		//	'(' sourceParams+=JvmFormalParameter (',' sourceParams+=JvmFormalParameter)* ')'
		//	'(' viewParams+=JvmFormalParameter (',' viewParams+=JvmFormalParameter)* ')' ('get' get=XExpression & 'put'
		//	put=XExpression);
		@Override public ParserRule getRule() { return rule; }
		
		//'bigul' name=ValidID '(' sourceParams+=JvmFormalParameter (',' sourceParams+=JvmFormalParameter)* ')' '('
		//viewParams+=JvmFormalParameter (',' viewParams+=JvmFormalParameter)* ')' ('get' get=XExpression & 'put'
		//put=XExpression)
		public Group getGroup() { return cGroup; }
		
		//'bigul'
		public Keyword getBigulKeyword_0() { return cBigulKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//sourceParams+=JvmFormalParameter
		public Assignment getSourceParamsAssignment_3() { return cSourceParamsAssignment_3; }
		
		//JvmFormalParameter
		public RuleCall getSourceParamsJvmFormalParameterParserRuleCall_3_0() { return cSourceParamsJvmFormalParameterParserRuleCall_3_0; }
		
		//(',' sourceParams+=JvmFormalParameter)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//sourceParams+=JvmFormalParameter
		public Assignment getSourceParamsAssignment_4_1() { return cSourceParamsAssignment_4_1; }
		
		//JvmFormalParameter
		public RuleCall getSourceParamsJvmFormalParameterParserRuleCall_4_1_0() { return cSourceParamsJvmFormalParameterParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//viewParams+=JvmFormalParameter
		public Assignment getViewParamsAssignment_7() { return cViewParamsAssignment_7; }
		
		//JvmFormalParameter
		public RuleCall getViewParamsJvmFormalParameterParserRuleCall_7_0() { return cViewParamsJvmFormalParameterParserRuleCall_7_0; }
		
		//(',' viewParams+=JvmFormalParameter)*
		public Group getGroup_8() { return cGroup_8; }
		
		//','
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//viewParams+=JvmFormalParameter
		public Assignment getViewParamsAssignment_8_1() { return cViewParamsAssignment_8_1; }
		
		//JvmFormalParameter
		public RuleCall getViewParamsJvmFormalParameterParserRuleCall_8_1_0() { return cViewParamsJvmFormalParameterParserRuleCall_8_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
		
		//'get' get=XExpression & 'put' put=XExpression
		public UnorderedGroup getUnorderedGroup_10() { return cUnorderedGroup_10; }
		
		//'get' get=XExpression
		public Group getGroup_10_0() { return cGroup_10_0; }
		
		//'get'
		public Keyword getGetKeyword_10_0_0() { return cGetKeyword_10_0_0; }
		
		//get=XExpression
		public Assignment getGetAssignment_10_0_1() { return cGetAssignment_10_0_1; }
		
		//XExpression
		public RuleCall getGetXExpressionParserRuleCall_10_0_1_0() { return cGetXExpressionParserRuleCall_10_0_1_0; }
		
		//'put' put=XExpression
		public Group getGroup_10_1() { return cGroup_10_1; }
		
		//'put'
		public Keyword getPutKeyword_10_1_0() { return cPutKeyword_10_1_0; }
		
		//put=XExpression
		public Assignment getPutAssignment_10_1_1() { return cPutAssignment_10_1_1; }
		
		//XExpression
		public RuleCall getPutXExpressionParserRuleCall_10_1_1_0() { return cPutXExpressionParserRuleCall_10_1_1_0; }
	}
	public class TypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.TypeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTupleTypeLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPatternTypeLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeLiteral:
		//	TupleTypeLiteral | PatternTypeLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//TupleTypeLiteral | PatternTypeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TupleTypeLiteral
		public RuleCall getTupleTypeLiteralParserRuleCall_0() { return cTupleTypeLiteralParserRuleCall_0; }
		
		//PatternTypeLiteral
		public RuleCall getPatternTypeLiteralParserRuleCall_1() { return cPatternTypeLiteralParserRuleCall_1; }
	}
	public class TupleTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.TupleTypeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnorderedTupleTypeLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrderedTupleTypeLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPredefinedTypeLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TupleTypeLiteral:
		//	UnorderedTupleTypeLiteral | OrderedTupleTypeLiteral | PredefinedTypeLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//UnorderedTupleTypeLiteral | OrderedTupleTypeLiteral | PredefinedTypeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnorderedTupleTypeLiteral
		public RuleCall getUnorderedTupleTypeLiteralParserRuleCall_0() { return cUnorderedTupleTypeLiteralParserRuleCall_0; }
		
		//OrderedTupleTypeLiteral
		public RuleCall getOrderedTupleTypeLiteralParserRuleCall_1() { return cOrderedTupleTypeLiteralParserRuleCall_1; }
		
		//PredefinedTypeLiteral
		public RuleCall getPredefinedTypeLiteralParserRuleCall_2() { return cPredefinedTypeLiteralParserRuleCall_2; }
	}
	public class UnorderedTupleTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.UnorderedTupleTypeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceImportSectionCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceImportSectionValidIDParserRuleCall_0_0_1 = (RuleCall)cSourceImportSectionCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsTypeVarWithoutInitializerParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cElementsTypeVarWithoutInitializerParserRuleCall_2_2_1_0 = (RuleCall)cElementsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//UnorderedTupleTypeLiteral:
		//	source=[ImportSection|ValidID] '!' ('(' elements+=TypeVarWithoutInitializer (',' elements+=TypeVarWithoutInitializer)*
		//	')');
		@Override public ParserRule getRule() { return rule; }
		
		//source=[ImportSection|ValidID] '!' ('(' elements+=TypeVarWithoutInitializer (',' elements+=TypeVarWithoutInitializer)*
		//')')
		public Group getGroup() { return cGroup; }
		
		//source=[ImportSection|ValidID]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[ImportSection|ValidID]
		public CrossReference getSourceImportSectionCrossReference_0_0() { return cSourceImportSectionCrossReference_0_0; }
		
		//ValidID
		public RuleCall getSourceImportSectionValidIDParserRuleCall_0_0_1() { return cSourceImportSectionValidIDParserRuleCall_0_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
		
		//'(' elements+=TypeVarWithoutInitializer (',' elements+=TypeVarWithoutInitializer)* ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//elements+=TypeVarWithoutInitializer
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//TypeVarWithoutInitializer
		public RuleCall getElementsTypeVarWithoutInitializerParserRuleCall_2_1_0() { return cElementsTypeVarWithoutInitializerParserRuleCall_2_1_0; }
		
		//(',' elements+=TypeVarWithoutInitializer)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//elements+=TypeVarWithoutInitializer
		public Assignment getElementsAssignment_2_2_1() { return cElementsAssignment_2_2_1; }
		
		//TypeVarWithoutInitializer
		public RuleCall getElementsTypeVarWithoutInitializerParserRuleCall_2_2_1_0() { return cElementsTypeVarWithoutInitializerParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class UnorderedTupleTypeLiteralWithInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.UnorderedTupleTypeLiteralWithInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceImportSectionCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceImportSectionValidIDParserRuleCall_0_0_1 = (RuleCall)cSourceImportSectionCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsTypeVarWithInitializerParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cElementsTypeVarWithInitializerParserRuleCall_2_2_1_0 = (RuleCall)cElementsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//UnorderedTupleTypeLiteralWithInitializer UnorderedTupleTypeLiteral:
		//	source=[ImportSection|ValidID] '!' ('(' elements+=TypeVarWithInitializer (',' elements+=TypeVarWithInitializer)* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//source=[ImportSection|ValidID] '!' ('(' elements+=TypeVarWithInitializer (',' elements+=TypeVarWithInitializer)* ')')
		public Group getGroup() { return cGroup; }
		
		//source=[ImportSection|ValidID]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[ImportSection|ValidID]
		public CrossReference getSourceImportSectionCrossReference_0_0() { return cSourceImportSectionCrossReference_0_0; }
		
		//ValidID
		public RuleCall getSourceImportSectionValidIDParserRuleCall_0_0_1() { return cSourceImportSectionValidIDParserRuleCall_0_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
		
		//'(' elements+=TypeVarWithInitializer (',' elements+=TypeVarWithInitializer)* ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//elements+=TypeVarWithInitializer
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//TypeVarWithInitializer
		public RuleCall getElementsTypeVarWithInitializerParserRuleCall_2_1_0() { return cElementsTypeVarWithInitializerParserRuleCall_2_1_0; }
		
		//(',' elements+=TypeVarWithInitializer)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//elements+=TypeVarWithInitializer
		public Assignment getElementsAssignment_2_2_1() { return cElementsAssignment_2_2_1; }
		
		//TypeVarWithInitializer
		public RuleCall getElementsTypeVarWithInitializerParserRuleCall_2_2_1_0() { return cElementsTypeVarWithInitializerParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class OrderedTupleTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.OrderedTupleTypeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceImportSectionCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceImportSectionValidIDParserRuleCall_0_0_1 = (RuleCall)cSourceImportSectionCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsTypeVarWithoutInitializerParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cElementsTypeVarWithoutInitializerParserRuleCall_2_2_1_0 = (RuleCall)cElementsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//OrderedTupleTypeLiteral:
		//	source=[ImportSection|ValidID] '!' ('[' elements+=TypeVarWithoutInitializer (',' elements+=TypeVarWithoutInitializer)*
		//	']');
		@Override public ParserRule getRule() { return rule; }
		
		//source=[ImportSection|ValidID] '!' ('[' elements+=TypeVarWithoutInitializer (',' elements+=TypeVarWithoutInitializer)*
		//']')
		public Group getGroup() { return cGroup; }
		
		//source=[ImportSection|ValidID]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[ImportSection|ValidID]
		public CrossReference getSourceImportSectionCrossReference_0_0() { return cSourceImportSectionCrossReference_0_0; }
		
		//ValidID
		public RuleCall getSourceImportSectionValidIDParserRuleCall_0_0_1() { return cSourceImportSectionValidIDParserRuleCall_0_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
		
		//'[' elements+=TypeVarWithoutInitializer (',' elements+=TypeVarWithoutInitializer)* ']'
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//elements+=TypeVarWithoutInitializer
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//TypeVarWithoutInitializer
		public RuleCall getElementsTypeVarWithoutInitializerParserRuleCall_2_1_0() { return cElementsTypeVarWithoutInitializerParserRuleCall_2_1_0; }
		
		//(',' elements+=TypeVarWithoutInitializer)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//elements+=TypeVarWithoutInitializer
		public Assignment getElementsAssignment_2_2_1() { return cElementsAssignment_2_2_1; }
		
		//TypeVarWithoutInitializer
		public RuleCall getElementsTypeVarWithoutInitializerParserRuleCall_2_2_1_0() { return cElementsTypeVarWithoutInitializerParserRuleCall_2_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
	}
	public class TypeVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.TypeVar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeVarWithoutInitializerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeVarWithInitializerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeVar:
		//	TypeVarWithoutInitializer | TypeVarWithInitializer;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeVarWithoutInitializer | TypeVarWithInitializer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeVarWithoutInitializer
		public RuleCall getTypeVarWithoutInitializerParserRuleCall_0() { return cTypeVarWithoutInitializerParserRuleCall_0; }
		
		//TypeVarWithInitializer
		public RuleCall getTypeVarWithInitializerParserRuleCall_1() { return cTypeVarWithInitializerParserRuleCall_1; }
	}
	public class TypeVarWithoutInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.TypeVarWithoutInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeRefParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cManyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cManyLeftSquareBracketRightSquareBracketKeyword_3_0 = (Keyword)cManyAssignment_3.eContents().get(0);
		
		//TypeVarWithoutInitializer TypeVar:
		//	name=ValidID ':' type=TypeRef many?='[]'?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ':' type=TypeRef many?='[]'?
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_2_0() { return cTypeTypeRefParserRuleCall_2_0; }
		
		//many?='[]'?
		public Assignment getManyAssignment_3() { return cManyAssignment_3; }
		
		//'[]'
		public Keyword getManyLeftSquareBracketRightSquareBracketKeyword_3_0() { return cManyLeftSquareBracketRightSquareBracketKeyword_3_0; }
	}
	public class TypeVarWithInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.TypeVarWithInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeRefParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cManyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cManyLeftSquareBracketRightSquareBracketKeyword_3_0 = (Keyword)cManyAssignment_3.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInitializerAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInitializerContextAwareDerivationActionParserRuleCall_5_0 = (RuleCall)cInitializerAssignment_5.eContents().get(0);
		
		//TypeVarWithInitializer TypeVar:
		//	name=ValidID ':' type=TypeRef many?='[]'? => '<-' initializer=ContextAwareDerivationAction;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ':' type=TypeRef many?='[]'? => '<-' initializer=ContextAwareDerivationAction
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_2_0() { return cTypeTypeRefParserRuleCall_2_0; }
		
		//many?='[]'?
		public Assignment getManyAssignment_3() { return cManyAssignment_3; }
		
		//'[]'
		public Keyword getManyLeftSquareBracketRightSquareBracketKeyword_3_0() { return cManyLeftSquareBracketRightSquareBracketKeyword_3_0; }
		
		//=> '<-'
		public Keyword getLessThanSignHyphenMinusKeyword_4() { return cLessThanSignHyphenMinusKeyword_4; }
		
		//initializer=ContextAwareDerivationAction
		public Assignment getInitializerAssignment_5() { return cInitializerAssignment_5; }
		
		//ContextAwareDerivationAction
		public RuleCall getInitializerContextAwareDerivationActionParserRuleCall_5_0() { return cInitializerContextAwareDerivationActionParserRuleCall_5_0; }
	}
	public class PredefinedTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.PredefinedTypeLiteral");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTypeEmptyKeyword_0 = (Keyword)cTypeAssignment.eContents().get(0);
		
		//PredefinedTypeLiteral:
		//	type='empty';
		@Override public ParserRule getRule() { return rule; }
		
		//type='empty'
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//'empty'
		public Keyword getTypeEmptyKeyword_0() { return cTypeEmptyKeyword_0; }
	}
	public class PatternTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.PatternTypeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceImportSectionCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceImportSectionValidIDParserRuleCall_0_0_1 = (RuleCall)cSourceImportSectionCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRootAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRootPatternNodeParserRuleCall_2_0 = (RuleCall)cRootAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAdditionalAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAdditionalTypeVarParserRuleCall_3_1_0 = (RuleCall)cAdditionalAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cAdditionalAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cAdditionalTypeVarParserRuleCall_3_2_1_0 = (RuleCall)cAdditionalAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFilterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFilterContextAwareConditionParserRuleCall_4_1_0 = (RuleCall)cFilterAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOrderKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOrderByAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cOrderByAbstractPatternEdgeCrossReference_5_1_0 = (CrossReference)cOrderByAssignment_5_1.eContents().get(0);
		private final RuleCall cOrderByAbstractPatternEdgeValidIDParserRuleCall_5_1_0_1 = (RuleCall)cOrderByAbstractPatternEdgeCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Assignment cDirectionAssignment_5_2_0 = (Assignment)cGroup_5_2.eContents().get(0);
		private final Alternatives cDirectionAlternatives_5_2_0_0 = (Alternatives)cDirectionAssignment_5_2_0.eContents().get(0);
		private final Keyword cDirectionAfterKeyword_5_2_0_0_0 = (Keyword)cDirectionAlternatives_5_2_0_0.eContents().get(0);
		private final Keyword cDirectionBeforeKeyword_5_2_0_0_1 = (Keyword)cDirectionAlternatives_5_2_0_0.eContents().get(1);
		private final Assignment cPivotAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cPivotTypeVarCrossReference_5_2_1_0 = (CrossReference)cPivotAssignment_5_2_1.eContents().get(0);
		private final RuleCall cPivotTypeVarValidIDParserRuleCall_5_2_1_0_1 = (RuleCall)cPivotTypeVarCrossReference_5_2_1_0.eContents().get(1);
		
		//PatternTypeLiteral:
		//	source=[ImportSection|ValidID] '!' root=PatternNode ('(' additional+=TypeVar (',' additional+=TypeVar)* ')')? ('['
		//	filter=ContextAwareCondition ']')? ('order' orderBy=[AbstractPatternEdge|ValidID] (direction=('after' | 'before')
		//	pivot=[TypeVar|ValidID])?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[ImportSection|ValidID] '!' root=PatternNode ('(' additional+=TypeVar (',' additional+=TypeVar)* ')')? ('['
		//filter=ContextAwareCondition ']')? ('order' orderBy=[AbstractPatternEdge|ValidID] (direction=('after' | 'before')
		//pivot=[TypeVar|ValidID])?)?
		public Group getGroup() { return cGroup; }
		
		//source=[ImportSection|ValidID]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[ImportSection|ValidID]
		public CrossReference getSourceImportSectionCrossReference_0_0() { return cSourceImportSectionCrossReference_0_0; }
		
		//ValidID
		public RuleCall getSourceImportSectionValidIDParserRuleCall_0_0_1() { return cSourceImportSectionValidIDParserRuleCall_0_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
		
		//root=PatternNode
		public Assignment getRootAssignment_2() { return cRootAssignment_2; }
		
		//PatternNode
		public RuleCall getRootPatternNodeParserRuleCall_2_0() { return cRootPatternNodeParserRuleCall_2_0; }
		
		//('(' additional+=TypeVar (',' additional+=TypeVar)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//additional+=TypeVar
		public Assignment getAdditionalAssignment_3_1() { return cAdditionalAssignment_3_1; }
		
		//TypeVar
		public RuleCall getAdditionalTypeVarParserRuleCall_3_1_0() { return cAdditionalTypeVarParserRuleCall_3_1_0; }
		
		//(',' additional+=TypeVar)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//additional+=TypeVar
		public Assignment getAdditionalAssignment_3_2_1() { return cAdditionalAssignment_3_2_1; }
		
		//TypeVar
		public RuleCall getAdditionalTypeVarParserRuleCall_3_2_1_0() { return cAdditionalTypeVarParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//('[' filter=ContextAwareCondition ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//filter=ContextAwareCondition
		public Assignment getFilterAssignment_4_1() { return cFilterAssignment_4_1; }
		
		//ContextAwareCondition
		public RuleCall getFilterContextAwareConditionParserRuleCall_4_1_0() { return cFilterContextAwareConditionParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
		
		//('order' orderBy=[AbstractPatternEdge|ValidID] (direction=('after' | 'before') pivot=[TypeVar|ValidID])?)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'order'
		public Keyword getOrderKeyword_5_0() { return cOrderKeyword_5_0; }
		
		//orderBy=[AbstractPatternEdge|ValidID]
		public Assignment getOrderByAssignment_5_1() { return cOrderByAssignment_5_1; }
		
		//[AbstractPatternEdge|ValidID]
		public CrossReference getOrderByAbstractPatternEdgeCrossReference_5_1_0() { return cOrderByAbstractPatternEdgeCrossReference_5_1_0; }
		
		//ValidID
		public RuleCall getOrderByAbstractPatternEdgeValidIDParserRuleCall_5_1_0_1() { return cOrderByAbstractPatternEdgeValidIDParserRuleCall_5_1_0_1; }
		
		//(direction=('after' | 'before') pivot=[TypeVar|ValidID])?
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//direction=('after' | 'before')
		public Assignment getDirectionAssignment_5_2_0() { return cDirectionAssignment_5_2_0; }
		
		//('after' | 'before')
		public Alternatives getDirectionAlternatives_5_2_0_0() { return cDirectionAlternatives_5_2_0_0; }
		
		//'after'
		public Keyword getDirectionAfterKeyword_5_2_0_0_0() { return cDirectionAfterKeyword_5_2_0_0_0; }
		
		//'before'
		public Keyword getDirectionBeforeKeyword_5_2_0_0_1() { return cDirectionBeforeKeyword_5_2_0_0_1; }
		
		//pivot=[TypeVar|ValidID]
		public Assignment getPivotAssignment_5_2_1() { return cPivotAssignment_5_2_1; }
		
		//[TypeVar|ValidID]
		public CrossReference getPivotTypeVarCrossReference_5_2_1_0() { return cPivotTypeVarCrossReference_5_2_1_0; }
		
		//ValidID
		public RuleCall getPivotTypeVarValidIDParserRuleCall_5_2_1_0_1() { return cPivotTypeVarValidIDParserRuleCall_5_2_1_0_1; }
	}
	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.TypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTypeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cLiteralAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cLiteralTypeLiteralParserRuleCall_0_3_0 = (RuleCall)cLiteralAssignment_0_3.eContents().get(0);
		private final RuleCall cPatternDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeDefinition:
		//	'type' name=ValidID '=' literal=TypeLiteral | PatternDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=ValidID '=' literal=TypeLiteral | PatternDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'type' name=ValidID '=' literal=TypeLiteral
		public Group getGroup_0() { return cGroup_0; }
		
		//'type'
		public Keyword getTypeKeyword_0_0() { return cTypeKeyword_0_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_1_0() { return cNameValidIDParserRuleCall_0_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }
		
		//literal=TypeLiteral
		public Assignment getLiteralAssignment_0_3() { return cLiteralAssignment_0_3; }
		
		//TypeLiteral
		public RuleCall getLiteralTypeLiteralParserRuleCall_0_3_0() { return cLiteralTypeLiteralParserRuleCall_0_3_0; }
		
		//PatternDefinition
		public RuleCall getPatternDefinitionParserRuleCall_1() { return cPatternDefinitionParserRuleCall_1; }
	}
	public class PatternDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.PatternDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralPatternTypeLiteralParserRuleCall_3_0 = (RuleCall)cLiteralAssignment_3.eContents().get(0);
		
		//PatternDefinition:
		//	'pattern' name=ValidID '=' literal=PatternTypeLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//'pattern' name=ValidID '=' literal=PatternTypeLiteral
		public Group getGroup() { return cGroup; }
		
		//'pattern'
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//literal=PatternTypeLiteral
		public Assignment getLiteralAssignment_3() { return cLiteralAssignment_3; }
		
		//PatternTypeLiteral
		public RuleCall getLiteralPatternTypeLiteralParserRuleCall_3_0() { return cLiteralPatternTypeLiteralParserRuleCall_3_0; }
	}
	public class ContextTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ContextTypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDefinedContextTypeRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTypeTypeDefinitionCrossReference_0_1_0 = (CrossReference)cTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cTypeTypeDefinitionValidIDParserRuleCall_0_1_0_1 = (RuleCall)cTypeTypeDefinitionCrossReference_0_1_0.eContents().get(1);
		private final RuleCall cTupleTypeLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ContextTypeRef:
		//	{DefinedContextTypeRef} type=[TypeDefinition|ValidID] | TupleTypeLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//{DefinedContextTypeRef} type=[TypeDefinition|ValidID] | TupleTypeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{DefinedContextTypeRef} type=[TypeDefinition|ValidID]
		public Group getGroup_0() { return cGroup_0; }
		
		//{DefinedContextTypeRef}
		public Action getDefinedContextTypeRefAction_0_0() { return cDefinedContextTypeRefAction_0_0; }
		
		//type=[TypeDefinition|ValidID]
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//[TypeDefinition|ValidID]
		public CrossReference getTypeTypeDefinitionCrossReference_0_1_0() { return cTypeTypeDefinitionCrossReference_0_1_0; }
		
		//ValidID
		public RuleCall getTypeTypeDefinitionValidIDParserRuleCall_0_1_0_1() { return cTypeTypeDefinitionValidIDParserRuleCall_0_1_0_1; }
		
		//TupleTypeLiteral
		public RuleCall getTupleTypeLiteralParserRuleCall_1() { return cTupleTypeLiteralParserRuleCall_1; }
	}
	public class BXFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.BXFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeIndicatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_2_0 = (RuleCall)cTypeIndicatorAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementXmuCoreStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		
		//BXFunctionDefinition:
		//	'function' name=ValidID typeIndicator=TypeIndicator? '=' statement=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ValidID typeIndicator=TypeIndicator? '=' statement=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_2() { return cTypeIndicatorAssignment_2; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_2_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//statement=XmuCoreStatement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }
		
		//XmuCoreStatement
		public RuleCall getStatementXmuCoreStatementParserRuleCall_4_0() { return cStatementXmuCoreStatementParserRuleCall_4_0; }
	}
	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.TypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEcoreTypeRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTypeEClassifierCrossReference_0_1_0 = (CrossReference)cTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cTypeEClassifierValidIDParserRuleCall_0_1_0_1 = (RuleCall)cTypeEClassifierCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFeatureTypeRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTypeEClassifierCrossReference_1_1_0 = (CrossReference)cTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cTypeEClassifierValidIDParserRuleCall_1_1_0_1 = (RuleCall)cTypeEClassifierCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cColonColonKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cFeatureAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cFeatureEStructuralFeatureCrossReference_1_2_1_0 = (CrossReference)cFeatureAssignment_1_2_1.eContents().get(0);
		private final RuleCall cFeatureEStructuralFeatureValidIDParserRuleCall_1_2_1_0_1 = (RuleCall)cFeatureEStructuralFeatureCrossReference_1_2_1_0.eContents().get(1);
		
		//TypeRef:
		//	{EcoreTypeRef} type=[ecore::EClassifier|ValidID] | {FeatureTypeRef} type=[ecore::EClassifier|ValidID] (=> '::'
		//	feature=[ecore::EStructuralFeature|ValidID]);
		@Override public ParserRule getRule() { return rule; }
		
		//{EcoreTypeRef} type=[ecore::EClassifier|ValidID] | {FeatureTypeRef} type=[ecore::EClassifier|ValidID] (=> '::'
		//feature=[ecore::EStructuralFeature|ValidID])
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{EcoreTypeRef} type=[ecore::EClassifier|ValidID]
		public Group getGroup_0() { return cGroup_0; }
		
		//{EcoreTypeRef}
		public Action getEcoreTypeRefAction_0_0() { return cEcoreTypeRefAction_0_0; }
		
		//type=[ecore::EClassifier|ValidID]
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//[ecore::EClassifier|ValidID]
		public CrossReference getTypeEClassifierCrossReference_0_1_0() { return cTypeEClassifierCrossReference_0_1_0; }
		
		//ValidID
		public RuleCall getTypeEClassifierValidIDParserRuleCall_0_1_0_1() { return cTypeEClassifierValidIDParserRuleCall_0_1_0_1; }
		
		//{FeatureTypeRef} type=[ecore::EClassifier|ValidID] (=> '::' feature=[ecore::EStructuralFeature|ValidID])
		public Group getGroup_1() { return cGroup_1; }
		
		//{FeatureTypeRef}
		public Action getFeatureTypeRefAction_1_0() { return cFeatureTypeRefAction_1_0; }
		
		//type=[ecore::EClassifier|ValidID]
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//[ecore::EClassifier|ValidID]
		public CrossReference getTypeEClassifierCrossReference_1_1_0() { return cTypeEClassifierCrossReference_1_1_0; }
		
		//ValidID
		public RuleCall getTypeEClassifierValidIDParserRuleCall_1_1_0_1() { return cTypeEClassifierValidIDParserRuleCall_1_1_0_1; }
		
		//=> '::' feature=[ecore::EStructuralFeature|ValidID]
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//=> '::'
		public Keyword getColonColonKeyword_1_2_0() { return cColonColonKeyword_1_2_0; }
		
		//feature=[ecore::EStructuralFeature|ValidID]
		public Assignment getFeatureAssignment_1_2_1() { return cFeatureAssignment_1_2_1; }
		
		//[ecore::EStructuralFeature|ValidID]
		public CrossReference getFeatureEStructuralFeatureCrossReference_1_2_1_0() { return cFeatureEStructuralFeatureCrossReference_1_2_1_0; }
		
		//ValidID
		public RuleCall getFeatureEStructuralFeatureValidIDParserRuleCall_1_2_1_0_1() { return cFeatureEStructuralFeatureValidIDParserRuleCall_1_2_1_0_1; }
	}
	public class IndexDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.IndexDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceTypeContextTypeRefParserRuleCall_3_0 = (RuleCall)cSourceTypeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cViewTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cViewTypeContextTypeRefParserRuleCall_5_0 = (RuleCall)cViewTypeAssignment_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IndexDefinition:
		//	'index' name=ValidID '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'index' name=ValidID '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>'
		public Group getGroup() { return cGroup; }
		
		//'index'
		public Keyword getIndexKeyword_0() { return cIndexKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//sourceType=ContextTypeRef
		public Assignment getSourceTypeAssignment_3() { return cSourceTypeAssignment_3; }
		
		//ContextTypeRef
		public RuleCall getSourceTypeContextTypeRefParserRuleCall_3_0() { return cSourceTypeContextTypeRefParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//viewType=ContextTypeRef
		public Assignment getViewTypeAssignment_5() { return cViewTypeAssignment_5; }
		
		//ContextTypeRef
		public RuleCall getViewTypeContextTypeRefParserRuleCall_5_0() { return cViewTypeContextTypeRefParserRuleCall_5_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
	}
	public class PatternNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.PatternNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEClassifierCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEClassifierValidIDParserRuleCall_2_0_1 = (RuleCall)cTypeEClassifierCrossReference_2_0.eContents().get(1);
		private final Assignment cManyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cManyLeftSquareBracketRightSquareBracketKeyword_3_0 = (Keyword)cManyAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cEdgesAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cEdgesAbstractPatternEdgeParserRuleCall_4_1_0_0 = (RuleCall)cEdgesAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cEdgesAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cEdgesAbstractPatternEdgeParserRuleCall_4_1_1_1_0 = (RuleCall)cEdgesAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//PatternNode:
		//	name=ValidID ':' type=[ecore::EClassifier|ValidID] many?='[]'? ('{' (edges+=AbstractPatternEdge (','
		//	edges+=AbstractPatternEdge)*)? '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ':' type=[ecore::EClassifier|ValidID] many?='[]'? ('{' (edges+=AbstractPatternEdge (','
		//edges+=AbstractPatternEdge)*)? '}')?
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[ecore::EClassifier|ValidID]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[ecore::EClassifier|ValidID]
		public CrossReference getTypeEClassifierCrossReference_2_0() { return cTypeEClassifierCrossReference_2_0; }
		
		//ValidID
		public RuleCall getTypeEClassifierValidIDParserRuleCall_2_0_1() { return cTypeEClassifierValidIDParserRuleCall_2_0_1; }
		
		//many?='[]'?
		public Assignment getManyAssignment_3() { return cManyAssignment_3; }
		
		//'[]'
		public Keyword getManyLeftSquareBracketRightSquareBracketKeyword_3_0() { return cManyLeftSquareBracketRightSquareBracketKeyword_3_0; }
		
		//('{' (edges+=AbstractPatternEdge (',' edges+=AbstractPatternEdge)*)? '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//(edges+=AbstractPatternEdge (',' edges+=AbstractPatternEdge)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//edges+=AbstractPatternEdge
		public Assignment getEdgesAssignment_4_1_0() { return cEdgesAssignment_4_1_0; }
		
		//AbstractPatternEdge
		public RuleCall getEdgesAbstractPatternEdgeParserRuleCall_4_1_0_0() { return cEdgesAbstractPatternEdgeParserRuleCall_4_1_0_0; }
		
		//(',' edges+=AbstractPatternEdge)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }
		
		//edges+=AbstractPatternEdge
		public Assignment getEdgesAssignment_4_1_1_1() { return cEdgesAssignment_4_1_1_1; }
		
		//AbstractPatternEdge
		public RuleCall getEdgesAbstractPatternEdgeParserRuleCall_4_1_1_1_0() { return cEdgesAbstractPatternEdgeParserRuleCall_4_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class AbstractPatternEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.AbstractPatternEdge");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPatternEdgeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPatternPathEdgeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractPatternEdge:
		//	PatternEdge | PatternPathEdge;
		@Override public ParserRule getRule() { return rule; }
		
		//PatternEdge | PatternPathEdge
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PatternEdge
		public RuleCall getPatternEdgeParserRuleCall_0() { return cPatternEdgeParserRuleCall_0; }
		
		//PatternPathEdge
		public RuleCall getPatternPathEdgeParserRuleCall_1() { return cPatternPathEdgeParserRuleCall_1; }
	}
	public class PatternEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.PatternEdge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureEStructuralFeatureCrossReference_2_0 = (CrossReference)cFeatureAssignment_2.eContents().get(0);
		private final RuleCall cFeatureEStructuralFeatureValidIDParserRuleCall_2_0_1 = (RuleCall)cFeatureEStructuralFeatureCrossReference_2_0.eContents().get(1);
		private final Assignment cManyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cManyLeftSquareBracketRightSquareBracketKeyword_3_0 = (Keyword)cManyAssignment_3.eContents().get(0);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cOperatorEqualsSignKeyword_4_0 = (Keyword)cOperatorAssignment_4.eContents().get(0);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValuePatternValueConditionParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//PatternEdge:
		//	name=ValidID ':' feature=[ecore::EStructuralFeature|ValidID] many?='[]'? operator='=' value=PatternValueCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ':' feature=[ecore::EStructuralFeature|ValidID] many?='[]'? operator='=' value=PatternValueCondition
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//feature=[ecore::EStructuralFeature|ValidID]
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }
		
		//[ecore::EStructuralFeature|ValidID]
		public CrossReference getFeatureEStructuralFeatureCrossReference_2_0() { return cFeatureEStructuralFeatureCrossReference_2_0; }
		
		//ValidID
		public RuleCall getFeatureEStructuralFeatureValidIDParserRuleCall_2_0_1() { return cFeatureEStructuralFeatureValidIDParserRuleCall_2_0_1; }
		
		//many?='[]'?
		public Assignment getManyAssignment_3() { return cManyAssignment_3; }
		
		//'[]'
		public Keyword getManyLeftSquareBracketRightSquareBracketKeyword_3_0() { return cManyLeftSquareBracketRightSquareBracketKeyword_3_0; }
		
		//operator='='
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }
		
		//'='
		public Keyword getOperatorEqualsSignKeyword_4_0() { return cOperatorEqualsSignKeyword_4_0; }
		
		//value=PatternValueCondition
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//PatternValueCondition
		public RuleCall getValuePatternValueConditionParserRuleCall_5_0() { return cValuePatternValueConditionParserRuleCall_5_0; }
	}
	public class PatternPathEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.PatternPathEdge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathDashedPathTypeParserRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Assignment cManyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cManyLeftSquareBracketRightSquareBracketKeyword_3_0 = (Keyword)cManyAssignment_3.eContents().get(0);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cOperatorEqualsSignKeyword_4_0 = (Keyword)cOperatorAssignment_4.eContents().get(0);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValuePatternValueConditionParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//PatternPathEdge:
		//	name=ValidID ':' path=DashedPathType many?='[]'? operator='=' value=PatternValueCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ':' path=DashedPathType many?='[]'? operator='=' value=PatternValueCondition
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//path=DashedPathType
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }
		
		//DashedPathType
		public RuleCall getPathDashedPathTypeParserRuleCall_2_0() { return cPathDashedPathTypeParserRuleCall_2_0; }
		
		//many?='[]'?
		public Assignment getManyAssignment_3() { return cManyAssignment_3; }
		
		//'[]'
		public Keyword getManyLeftSquareBracketRightSquareBracketKeyword_3_0() { return cManyLeftSquareBracketRightSquareBracketKeyword_3_0; }
		
		//operator='='
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }
		
		//'='
		public Keyword getOperatorEqualsSignKeyword_4_0() { return cOperatorEqualsSignKeyword_4_0; }
		
		//value=PatternValueCondition
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//PatternValueCondition
		public RuleCall getValuePatternValueConditionParserRuleCall_5_0() { return cValuePatternValueConditionParserRuleCall_5_0; }
	}
	public class DashedPathTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.DashedPathType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSegmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSegmentDashedPathTypeSegmentParserRuleCall_0_0 = (RuleCall)cSegmentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextDashedPathTypeParserRuleCall_1_1_0 = (RuleCall)cNextAssignment_1_1.eContents().get(0);
		
		//DashedPathType:
		//	segment=DashedPathTypeSegment (=> '.' next=DashedPathType)?;
		@Override public ParserRule getRule() { return rule; }
		
		//segment=DashedPathTypeSegment (=> '.' next=DashedPathType)?
		public Group getGroup() { return cGroup; }
		
		//segment=DashedPathTypeSegment
		public Assignment getSegmentAssignment_0() { return cSegmentAssignment_0; }
		
		//DashedPathTypeSegment
		public RuleCall getSegmentDashedPathTypeSegmentParserRuleCall_0_0() { return cSegmentDashedPathTypeSegmentParserRuleCall_0_0; }
		
		//(=> '.' next=DashedPathType)?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> '.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//next=DashedPathType
		public Assignment getNextAssignment_1_1() { return cNextAssignment_1_1; }
		
		//DashedPathType
		public RuleCall getNextDashedPathTypeParserRuleCall_1_1_0() { return cNextDashedPathTypeParserRuleCall_1_1_0; }
	}
	public class DashedPathTypeSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.DashedPathTypeSegment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypesEStructuralFeatureCrossReference_1_0 = (CrossReference)cTypesAssignment_1.eContents().get(0);
		private final RuleCall cTypesEStructuralFeatureValidIDParserRuleCall_1_0_1 = (RuleCall)cTypesEStructuralFeatureCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTypesEStructuralFeatureCrossReference_2_1_0 = (CrossReference)cTypesAssignment_2_1.eContents().get(0);
		private final RuleCall cTypesEStructuralFeatureValidIDParserRuleCall_2_1_0_1 = (RuleCall)cTypesEStructuralFeatureCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRepeatAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cRepeatAlternatives_4_0 = (Alternatives)cRepeatAssignment_4.eContents().get(0);
		private final Keyword cRepeatQuestionMarkKeyword_4_0_0 = (Keyword)cRepeatAlternatives_4_0.eContents().get(0);
		private final Keyword cRepeatAsteriskKeyword_4_0_1 = (Keyword)cRepeatAlternatives_4_0.eContents().get(1);
		private final Keyword cRepeatPlusSignKeyword_4_0_2 = (Keyword)cRepeatAlternatives_4_0.eContents().get(2);
		
		//DashedPathTypeSegment:
		//	'(' types+=[ecore::EStructuralFeature|ValidID] (=> '|' types+=[ecore::EStructuralFeature|ValidID])* ')' repeat=('?' |
		//	'*' | '+')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' types+=[ecore::EStructuralFeature|ValidID] (=> '|' types+=[ecore::EStructuralFeature|ValidID])* ')' repeat=('?' |
		//'*' | '+')?
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//types+=[ecore::EStructuralFeature|ValidID]
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }
		
		//[ecore::EStructuralFeature|ValidID]
		public CrossReference getTypesEStructuralFeatureCrossReference_1_0() { return cTypesEStructuralFeatureCrossReference_1_0; }
		
		//ValidID
		public RuleCall getTypesEStructuralFeatureValidIDParserRuleCall_1_0_1() { return cTypesEStructuralFeatureValidIDParserRuleCall_1_0_1; }
		
		//(=> '|' types+=[ecore::EStructuralFeature|ValidID])*
		public Group getGroup_2() { return cGroup_2; }
		
		//=> '|'
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }
		
		//types+=[ecore::EStructuralFeature|ValidID]
		public Assignment getTypesAssignment_2_1() { return cTypesAssignment_2_1; }
		
		//[ecore::EStructuralFeature|ValidID]
		public CrossReference getTypesEStructuralFeatureCrossReference_2_1_0() { return cTypesEStructuralFeatureCrossReference_2_1_0; }
		
		//ValidID
		public RuleCall getTypesEStructuralFeatureValidIDParserRuleCall_2_1_0_1() { return cTypesEStructuralFeatureValidIDParserRuleCall_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//repeat=('?' | '*' | '+')?
		public Assignment getRepeatAssignment_4() { return cRepeatAssignment_4; }
		
		//('?' | '*' | '+')
		public Alternatives getRepeatAlternatives_4_0() { return cRepeatAlternatives_4_0; }
		
		//'?'
		public Keyword getRepeatQuestionMarkKeyword_4_0_0() { return cRepeatQuestionMarkKeyword_4_0_0; }
		
		//'*'
		public Keyword getRepeatAsteriskKeyword_4_0_1() { return cRepeatAsteriskKeyword_4_0_1; }
		
		//'+'
		public Keyword getRepeatPlusSignKeyword_4_0_2() { return cRepeatPlusSignKeyword_4_0_2; }
	}
	public class PatternValueConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.PatternValueCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPatternNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPatternNodeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PatternValueCondition:
		//	PatternNode | PatternNodeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//PatternNode | PatternNodeRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PatternNode
		public RuleCall getPatternNodeParserRuleCall_0() { return cPatternNodeParserRuleCall_0; }
		
		//PatternNodeRef
		public RuleCall getPatternNodeRefParserRuleCall_1() { return cPatternNodeRefParserRuleCall_1; }
	}
	public class PatternNodeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.PatternNodeRef");
		private final Assignment cNodeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNodePatternNodeCrossReference_0 = (CrossReference)cNodeAssignment.eContents().get(0);
		private final RuleCall cNodePatternNodeValidIDParserRuleCall_0_1 = (RuleCall)cNodePatternNodeCrossReference_0.eContents().get(1);
		
		//PatternNodeRef:
		//	node=[PatternNode|ValidID];
		@Override public ParserRule getRule() { return rule; }
		
		//node=[PatternNode|ValidID]
		public Assignment getNodeAssignment() { return cNodeAssignment; }
		
		//[PatternNode|ValidID]
		public CrossReference getNodePatternNodeCrossReference_0() { return cNodePatternNodeCrossReference_0; }
		
		//ValidID
		public RuleCall getNodePatternNodeValidIDParserRuleCall_0_1() { return cNodePatternNodeValidIDParserRuleCall_0_1; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.Pattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPatternTypeLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPatternDefinitionReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Pattern:
		//	PatternTypeLiteral | PatternDefinitionReference;
		@Override public ParserRule getRule() { return rule; }
		
		//PatternTypeLiteral | PatternDefinitionReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PatternTypeLiteral
		public RuleCall getPatternTypeLiteralParserRuleCall_0() { return cPatternTypeLiteralParserRuleCall_0; }
		
		//PatternDefinitionReference
		public RuleCall getPatternDefinitionReferenceParserRuleCall_1() { return cPatternDefinitionReferenceParserRuleCall_1; }
	}
	public class PatternDefinitionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.PatternDefinitionReference");
		private final Assignment cPatternAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cPatternPatternDefinitionCrossReference_0 = (CrossReference)cPatternAssignment.eContents().get(0);
		private final RuleCall cPatternPatternDefinitionValidIDParserRuleCall_0_1 = (RuleCall)cPatternPatternDefinitionCrossReference_0.eContents().get(1);
		
		//PatternDefinitionReference:
		//	pattern=[PatternDefinition|ValidID];
		@Override public ParserRule getRule() { return rule; }
		
		//pattern=[PatternDefinition|ValidID]
		public Assignment getPatternAssignment() { return cPatternAssignment; }
		
		//[PatternDefinition|ValidID]
		public CrossReference getPatternPatternDefinitionCrossReference_0() { return cPatternPatternDefinitionCrossReference_0; }
		
		//ValidID
		public RuleCall getPatternPatternDefinitionValidIDParserRuleCall_0_1() { return cPatternPatternDefinitionValidIDParserRuleCall_0_1; }
	}
	public class XmuCoreStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXmuCoreForkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXmuCoreParallelCompositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXmuCoreCompositionChildStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XmuCoreStatement:
		//	XmuCoreFork | XmuCoreParallelComposition | XmuCoreCompositionChildStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//XmuCoreFork | XmuCoreParallelComposition | XmuCoreCompositionChildStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XmuCoreFork
		public RuleCall getXmuCoreForkParserRuleCall_0() { return cXmuCoreForkParserRuleCall_0; }
		
		//XmuCoreParallelComposition
		public RuleCall getXmuCoreParallelCompositionParserRuleCall_1() { return cXmuCoreParallelCompositionParserRuleCall_1; }
		
		//XmuCoreCompositionChildStatement
		public RuleCall getXmuCoreCompositionChildStatementParserRuleCall_2() { return cXmuCoreCompositionChildStatementParserRuleCall_2; }
	}
	public class XmuCoreCompositionChildStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreCompositionChildStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXmuCoreMatchSourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXmuCoreMatchViewParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXmuCoreExpandSourceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXmuCoreExpandViewParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXmuCoreGraphReplaceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXmuCoreSwitchParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXmuCoreAlignParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXmuCoreFunctionCallParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXmuCoreIndexParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXmuCoreForEachMatchSourceParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXmuCoreContextSourceParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXmuCoreDeriveSourceParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXmuCoreDependencyViewParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//XmuCoreCompositionChildStatement:
		//	XmuCoreMatchSource | XmuCoreMatchView | XmuCoreExpandSource | XmuCoreExpandView | XmuCoreGraphReplace | XmuCoreSwitch
		//	| XmuCoreAlign | => XmuCoreFunctionCall | XmuCoreIndex | XmuCoreForEachMatchSource | XmuCoreContextSource |
		//	XmuCoreDeriveSource | XmuCoreDependencyView;
		@Override public ParserRule getRule() { return rule; }
		
		//XmuCoreMatchSource | XmuCoreMatchView | XmuCoreExpandSource | XmuCoreExpandView | XmuCoreGraphReplace | XmuCoreSwitch |
		//XmuCoreAlign | => XmuCoreFunctionCall | XmuCoreIndex | XmuCoreForEachMatchSource | XmuCoreContextSource |
		//XmuCoreDeriveSource | XmuCoreDependencyView
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XmuCoreMatchSource
		public RuleCall getXmuCoreMatchSourceParserRuleCall_0() { return cXmuCoreMatchSourceParserRuleCall_0; }
		
		//XmuCoreMatchView
		public RuleCall getXmuCoreMatchViewParserRuleCall_1() { return cXmuCoreMatchViewParserRuleCall_1; }
		
		//XmuCoreExpandSource
		public RuleCall getXmuCoreExpandSourceParserRuleCall_2() { return cXmuCoreExpandSourceParserRuleCall_2; }
		
		//XmuCoreExpandView
		public RuleCall getXmuCoreExpandViewParserRuleCall_3() { return cXmuCoreExpandViewParserRuleCall_3; }
		
		//XmuCoreGraphReplace
		public RuleCall getXmuCoreGraphReplaceParserRuleCall_4() { return cXmuCoreGraphReplaceParserRuleCall_4; }
		
		//XmuCoreSwitch
		public RuleCall getXmuCoreSwitchParserRuleCall_5() { return cXmuCoreSwitchParserRuleCall_5; }
		
		//XmuCoreAlign
		public RuleCall getXmuCoreAlignParserRuleCall_6() { return cXmuCoreAlignParserRuleCall_6; }
		
		//=> XmuCoreFunctionCall
		public RuleCall getXmuCoreFunctionCallParserRuleCall_7() { return cXmuCoreFunctionCallParserRuleCall_7; }
		
		//XmuCoreIndex
		public RuleCall getXmuCoreIndexParserRuleCall_8() { return cXmuCoreIndexParserRuleCall_8; }
		
		//XmuCoreForEachMatchSource
		public RuleCall getXmuCoreForEachMatchSourceParserRuleCall_9() { return cXmuCoreForEachMatchSourceParserRuleCall_9; }
		
		//XmuCoreContextSource
		public RuleCall getXmuCoreContextSourceParserRuleCall_10() { return cXmuCoreContextSourceParserRuleCall_10; }
		
		//XmuCoreDeriveSource
		public RuleCall getXmuCoreDeriveSourceParserRuleCall_11() { return cXmuCoreDeriveSourceParserRuleCall_11; }
		
		//XmuCoreDependencyView
		public RuleCall getXmuCoreDependencyViewParserRuleCall_12() { return cXmuCoreDependencyViewParserRuleCall_12; }
	}
	public class TypeIndicatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.TypeIndicator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceTypeContextTypeRefParserRuleCall_1_0 = (RuleCall)cSourceTypeAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cViewTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cViewTypeContextTypeRefParserRuleCall_3_0 = (RuleCall)cViewTypeAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TypeIndicator:
		//	'<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//sourceType=ContextTypeRef
		public Assignment getSourceTypeAssignment_1() { return cSourceTypeAssignment_1; }
		
		//ContextTypeRef
		public RuleCall getSourceTypeContextTypeRefParserRuleCall_1_0() { return cSourceTypeContextTypeRefParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//viewType=ContextTypeRef
		public Assignment getViewTypeAssignment_3() { return cViewTypeAssignment_3; }
		
		//ContextTypeRef
		public RuleCall getViewTypeContextTypeRefParserRuleCall_3_0() { return cViewTypeContextTypeRefParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}
	public class XmuCoreContextSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreContextSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeIndicatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_1_0 = (RuleCall)cTypeIndicatorAssignment_1.eContents().get(0);
		private final Assignment cMappingViewAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMappingViewUnorderedTupleTypeLiteralWithInitializerParserRuleCall_2_0 = (RuleCall)cMappingViewAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyXmuCoreStatementParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//XmuCoreContextSource:
		//	'context' typeIndicator=TypeIndicator?
		//	mappingView=UnorderedTupleTypeLiteralWithInitializer
		//	body=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'context' typeIndicator=TypeIndicator? mappingView=UnorderedTupleTypeLiteralWithInitializer body=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_1() { return cTypeIndicatorAssignment_1; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_1_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_1_0; }
		
		//mappingView=UnorderedTupleTypeLiteralWithInitializer
		public Assignment getMappingViewAssignment_2() { return cMappingViewAssignment_2; }
		
		//UnorderedTupleTypeLiteralWithInitializer
		public RuleCall getMappingViewUnorderedTupleTypeLiteralWithInitializerParserRuleCall_2_0() { return cMappingViewUnorderedTupleTypeLiteralWithInitializerParserRuleCall_2_0; }
		
		//body=XmuCoreStatement
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//XmuCoreStatement
		public RuleCall getBodyXmuCoreStatementParserRuleCall_3_0() { return cBodyXmuCoreStatementParserRuleCall_3_0; }
	}
	public class ContextAwareDerivationActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ContextAwareDerivationAction");
		private final Assignment cBodyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBodyXExpressionParserRuleCall_0 = (RuleCall)cBodyAssignment.eContents().get(0);
		
		//ContextAwareDerivationAction:
		//	body=XExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//body=XExpression
		public Assignment getBodyAssignment() { return cBodyAssignment; }
		
		//XExpression
		public RuleCall getBodyXExpressionParserRuleCall_0() { return cBodyXExpressionParserRuleCall_0; }
	}
	public class XmuCoreDeriveSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreDeriveSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeriveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeIndicatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_1_0 = (RuleCall)cTypeIndicatorAssignment_1.eContents().get(0);
		private final Assignment cDerivedTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDerivedTypeUnorderedTupleTypeLiteralWithInitializerParserRuleCall_2_0 = (RuleCall)cDerivedTypeAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyXmuCoreStatementParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//XmuCoreDeriveSource:
		//	'derive' typeIndicator=TypeIndicator?
		//	derivedType=UnorderedTupleTypeLiteralWithInitializer body=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'derive' typeIndicator=TypeIndicator? derivedType=UnorderedTupleTypeLiteralWithInitializer body=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'derive'
		public Keyword getDeriveKeyword_0() { return cDeriveKeyword_0; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_1() { return cTypeIndicatorAssignment_1; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_1_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_1_0; }
		
		//derivedType=UnorderedTupleTypeLiteralWithInitializer
		public Assignment getDerivedTypeAssignment_2() { return cDerivedTypeAssignment_2; }
		
		//UnorderedTupleTypeLiteralWithInitializer
		public RuleCall getDerivedTypeUnorderedTupleTypeLiteralWithInitializerParserRuleCall_2_0() { return cDerivedTypeUnorderedTupleTypeLiteralWithInitializerParserRuleCall_2_0; }
		
		//body=XmuCoreStatement
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//XmuCoreStatement
		public RuleCall getBodyXmuCoreStatementParserRuleCall_3_0() { return cBodyXmuCoreStatementParserRuleCall_3_0; }
	}
	public class XmuCoreDependencyViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreDependencyView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeIndicatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_1_0 = (RuleCall)cTypeIndicatorAssignment_1.eContents().get(0);
		private final Assignment cDependentTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDependentTypeUnorderedTupleTypeLiteralWithInitializerParserRuleCall_2_0 = (RuleCall)cDependentTypeAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyXmuCoreStatementParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//XmuCoreDependencyView:
		//	'dependency' typeIndicator=TypeIndicator? dependentType=UnorderedTupleTypeLiteralWithInitializer
		//	body=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'dependency' typeIndicator=TypeIndicator? dependentType=UnorderedTupleTypeLiteralWithInitializer body=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'dependency'
		public Keyword getDependencyKeyword_0() { return cDependencyKeyword_0; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_1() { return cTypeIndicatorAssignment_1; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_1_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_1_0; }
		
		//dependentType=UnorderedTupleTypeLiteralWithInitializer
		public Assignment getDependentTypeAssignment_2() { return cDependentTypeAssignment_2; }
		
		//UnorderedTupleTypeLiteralWithInitializer
		public RuleCall getDependentTypeUnorderedTupleTypeLiteralWithInitializerParserRuleCall_2_0() { return cDependentTypeUnorderedTupleTypeLiteralWithInitializerParserRuleCall_2_0; }
		
		//body=XmuCoreStatement
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//XmuCoreStatement
		public RuleCall getBodyXmuCoreStatementParserRuleCall_3_0() { return cBodyXmuCoreStatementParserRuleCall_3_0; }
	}
	public class XmuCoreMatchSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreMatchSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeIndicatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_1_0 = (RuleCall)cTypeIndicatorAssignment_1.eContents().get(0);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyXmuCoreStatementParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//XmuCoreMatchSource:
		//	'matchS' typeIndicator=TypeIndicator? pattern=Pattern body=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'matchS' typeIndicator=TypeIndicator? pattern=Pattern body=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'matchS'
		public Keyword getMatchSKeyword_0() { return cMatchSKeyword_0; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_1() { return cTypeIndicatorAssignment_1; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_1_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_1_0; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_0() { return cPatternPatternParserRuleCall_2_0; }
		
		//body=XmuCoreStatement
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//XmuCoreStatement
		public RuleCall getBodyXmuCoreStatementParserRuleCall_3_0() { return cBodyXmuCoreStatementParserRuleCall_3_0; }
	}
	public class XmuCoreMatchViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreMatchView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeIndicatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_1_0 = (RuleCall)cTypeIndicatorAssignment_1.eContents().get(0);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyXmuCoreStatementParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//XmuCoreMatchView:
		//	'matchV' typeIndicator=TypeIndicator? pattern=Pattern body=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'matchV' typeIndicator=TypeIndicator? pattern=Pattern body=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'matchV'
		public Keyword getMatchVKeyword_0() { return cMatchVKeyword_0; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_1() { return cTypeIndicatorAssignment_1; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_1_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_1_0; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_0() { return cPatternPatternParserRuleCall_2_0; }
		
		//body=XmuCoreStatement
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//XmuCoreStatement
		public RuleCall getBodyXmuCoreStatementParserRuleCall_3_0() { return cBodyXmuCoreStatementParserRuleCall_3_0; }
	}
	public class XmuCoreExpandSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreExpandSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpandSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeIndicatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_1_0 = (RuleCall)cTypeIndicatorAssignment_1.eContents().get(0);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMappingsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMappingsVarMappingParserRuleCall_4_0 = (RuleCall)cMappingsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMappingsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMappingsVarMappingParserRuleCall_5_1_0 = (RuleCall)cMappingsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyXmuCoreStatementParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		
		//XmuCoreExpandSource:
		//	'expandS' typeIndicator=TypeIndicator? pattern=Pattern '(' mappings+=VarMapping (',' mappings+=VarMapping)* ')' '->'
		//	body=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'expandS' typeIndicator=TypeIndicator? pattern=Pattern '(' mappings+=VarMapping (',' mappings+=VarMapping)* ')' '->'
		//body=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'expandS'
		public Keyword getExpandSKeyword_0() { return cExpandSKeyword_0; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_1() { return cTypeIndicatorAssignment_1; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_1_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_1_0; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_0() { return cPatternPatternParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//mappings+=VarMapping
		public Assignment getMappingsAssignment_4() { return cMappingsAssignment_4; }
		
		//VarMapping
		public RuleCall getMappingsVarMappingParserRuleCall_4_0() { return cMappingsVarMappingParserRuleCall_4_0; }
		
		//(',' mappings+=VarMapping)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//mappings+=VarMapping
		public Assignment getMappingsAssignment_5_1() { return cMappingsAssignment_5_1; }
		
		//VarMapping
		public RuleCall getMappingsVarMappingParserRuleCall_5_1_0() { return cMappingsVarMappingParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_7() { return cHyphenMinusGreaterThanSignKeyword_7; }
		
		//body=XmuCoreStatement
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//XmuCoreStatement
		public RuleCall getBodyXmuCoreStatementParserRuleCall_8_0() { return cBodyXmuCoreStatementParserRuleCall_8_0; }
	}
	public class XmuCoreExpandViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreExpandView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpandVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeIndicatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_1_0 = (RuleCall)cTypeIndicatorAssignment_1.eContents().get(0);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMappingsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMappingsVarMappingParserRuleCall_4_0 = (RuleCall)cMappingsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMappingsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMappingsVarMappingParserRuleCall_5_1_0 = (RuleCall)cMappingsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyXmuCoreStatementParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		
		//XmuCoreExpandView:
		//	'expandV' typeIndicator=TypeIndicator? pattern=Pattern '(' mappings+=VarMapping (',' mappings+=VarMapping)* ')' '->'
		//	body=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'expandV' typeIndicator=TypeIndicator? pattern=Pattern '(' mappings+=VarMapping (',' mappings+=VarMapping)* ')' '->'
		//body=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'expandV'
		public Keyword getExpandVKeyword_0() { return cExpandVKeyword_0; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_1() { return cTypeIndicatorAssignment_1; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_1_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_1_0; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_0() { return cPatternPatternParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//mappings+=VarMapping
		public Assignment getMappingsAssignment_4() { return cMappingsAssignment_4; }
		
		//VarMapping
		public RuleCall getMappingsVarMappingParserRuleCall_4_0() { return cMappingsVarMappingParserRuleCall_4_0; }
		
		//(',' mappings+=VarMapping)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//mappings+=VarMapping
		public Assignment getMappingsAssignment_5_1() { return cMappingsAssignment_5_1; }
		
		//VarMapping
		public RuleCall getMappingsVarMappingParserRuleCall_5_1_0() { return cMappingsVarMappingParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_7() { return cHyphenMinusGreaterThanSignKeyword_7; }
		
		//body=XmuCoreStatement
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//XmuCoreStatement
		public RuleCall getBodyXmuCoreStatementParserRuleCall_8_0() { return cBodyXmuCoreStatementParserRuleCall_8_0; }
	}
	public class VarMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.VarMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cToAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cToValidIDParserRuleCall_0_0 = (RuleCall)cToAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFromAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFromValidIDParserRuleCall_2_0 = (RuleCall)cFromAssignment_2.eContents().get(0);
		
		//VarMapping:
		//	to=ValidID '<-' from=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//to=ValidID '<-' from=ValidID
		public Group getGroup() { return cGroup; }
		
		//to=ValidID
		public Assignment getToAssignment_0() { return cToAssignment_0; }
		
		//ValidID
		public RuleCall getToValidIDParserRuleCall_0_0() { return cToValidIDParserRuleCall_0_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//from=ValidID
		public Assignment getFromAssignment_2() { return cFromAssignment_2; }
		
		//ValidID
		public RuleCall getFromValidIDParserRuleCall_2_0() { return cFromValidIDParserRuleCall_2_0; }
	}
	public class XmuCoreGraphReplaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreGraphReplace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeIndicatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_1_0 = (RuleCall)cTypeIndicatorAssignment_1.eContents().get(0);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourcePatternParserRuleCall_2_0 = (RuleCall)cSourceAssignment_2.eContents().get(0);
		private final Assignment cViewAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cViewPatternParserRuleCall_3_0 = (RuleCall)cViewAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConversionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConversionsConversionParserRuleCall_4_1_0 = (RuleCall)cConversionsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//XmuCoreGraphReplace:
		//	'replace' typeIndicator=TypeIndicator? source=Pattern view=Pattern ('{' conversions+=Conversion+ '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'replace' typeIndicator=TypeIndicator? source=Pattern view=Pattern ('{' conversions+=Conversion+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'replace'
		public Keyword getReplaceKeyword_0() { return cReplaceKeyword_0; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_1() { return cTypeIndicatorAssignment_1; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_1_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_1_0; }
		
		//source=Pattern
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//Pattern
		public RuleCall getSourcePatternParserRuleCall_2_0() { return cSourcePatternParserRuleCall_2_0; }
		
		//view=Pattern
		public Assignment getViewAssignment_3() { return cViewAssignment_3; }
		
		//Pattern
		public RuleCall getViewPatternParserRuleCall_3_0() { return cViewPatternParserRuleCall_3_0; }
		
		//('{' conversions+=Conversion+ '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//conversions+=Conversion+
		public Assignment getConversionsAssignment_4_1() { return cConversionsAssignment_4_1; }
		
		//Conversion
		public RuleCall getConversionsConversionParserRuleCall_4_1_0() { return cConversionsConversionParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class XmuCoreParallelCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreParallelComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeIndicatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_0_0 = (RuleCall)cTypeIndicatorAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodiesXmuCoreCompositionChildStatementParserRuleCall_2_0 = (RuleCall)cBodiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBodiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBodiesXmuCoreCompositionChildStatementParserRuleCall_3_1_0 = (RuleCall)cBodiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XmuCoreParallelComposition:
		//	typeIndicator=TypeIndicator? '{' bodies+=XmuCoreCompositionChildStatement (=> '|'
		//	bodies+=XmuCoreCompositionChildStatement)+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//typeIndicator=TypeIndicator? '{' bodies+=XmuCoreCompositionChildStatement (=> '|'
		//bodies+=XmuCoreCompositionChildStatement)+ '}'
		public Group getGroup() { return cGroup; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_0() { return cTypeIndicatorAssignment_0; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_0_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//bodies+=XmuCoreCompositionChildStatement
		public Assignment getBodiesAssignment_2() { return cBodiesAssignment_2; }
		
		//XmuCoreCompositionChildStatement
		public RuleCall getBodiesXmuCoreCompositionChildStatementParserRuleCall_2_0() { return cBodiesXmuCoreCompositionChildStatementParserRuleCall_2_0; }
		
		//(=> '|' bodies+=XmuCoreCompositionChildStatement)+
		public Group getGroup_3() { return cGroup_3; }
		
		//=> '|'
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }
		
		//bodies+=XmuCoreCompositionChildStatement
		public Assignment getBodiesAssignment_3_1() { return cBodiesAssignment_3_1; }
		
		//XmuCoreCompositionChildStatement
		public RuleCall getBodiesXmuCoreCompositionChildStatementParserRuleCall_3_1_0() { return cBodiesXmuCoreCompositionChildStatementParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class XmuCoreSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeIndicatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_1_0 = (RuleCall)cTypeIndicatorAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBranchesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBranchesXmuCoreSwitchBranchParserRuleCall_3_0 = (RuleCall)cBranchesAssignment_3.eContents().get(0);
		private final Assignment cAdaptionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAdaptionsXmuCoreSwitchAdaptionParserRuleCall_4_0 = (RuleCall)cAdaptionsAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XmuCoreSwitch:
		//	'switch' typeIndicator=TypeIndicator? '['
		//	branches+=XmuCoreSwitchBranch+
		//	adaptions+=XmuCoreSwitchAdaption*
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//'switch' typeIndicator=TypeIndicator? '[' branches+=XmuCoreSwitchBranch+ adaptions+=XmuCoreSwitchAdaption* ']'
		public Group getGroup() { return cGroup; }
		
		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_1() { return cTypeIndicatorAssignment_1; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_1_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//branches+=XmuCoreSwitchBranch+
		public Assignment getBranchesAssignment_3() { return cBranchesAssignment_3; }
		
		//XmuCoreSwitchBranch
		public RuleCall getBranchesXmuCoreSwitchBranchParserRuleCall_3_0() { return cBranchesXmuCoreSwitchBranchParserRuleCall_3_0; }
		
		//adaptions+=XmuCoreSwitchAdaption*
		public Assignment getAdaptionsAssignment_4() { return cAdaptionsAssignment_4; }
		
		//XmuCoreSwitchAdaption
		public RuleCall getAdaptionsXmuCoreSwitchAdaptionParserRuleCall_4_0() { return cAdaptionsXmuCoreSwitchAdaptionParserRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class XmuCoreSwitchBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreSwitchBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionContextAwareConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionXmuCoreStatementParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//XmuCoreSwitchBranch:
		//	'case' condition=ContextAwareCondition ':' action=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'case' condition=ContextAwareCondition ':' action=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//condition=ContextAwareCondition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//ContextAwareCondition
		public RuleCall getConditionContextAwareConditionParserRuleCall_1_0() { return cConditionContextAwareConditionParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//action=XmuCoreStatement
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//XmuCoreStatement
		public RuleCall getActionXmuCoreStatementParserRuleCall_3_0() { return cActionXmuCoreStatementParserRuleCall_3_0; }
	}
	public class XmuCoreSwitchAdaptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreSwitchAdaption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdaptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionContextAwareConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionContextAwareUnidirectionalActionParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//XmuCoreSwitchAdaption:
		//	'adaption' condition=ContextAwareCondition ':' action=ContextAwareUnidirectionalAction;
		@Override public ParserRule getRule() { return rule; }
		
		//'adaption' condition=ContextAwareCondition ':' action=ContextAwareUnidirectionalAction
		public Group getGroup() { return cGroup; }
		
		//'adaption'
		public Keyword getAdaptionKeyword_0() { return cAdaptionKeyword_0; }
		
		//condition=ContextAwareCondition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//ContextAwareCondition
		public RuleCall getConditionContextAwareConditionParserRuleCall_1_0() { return cConditionContextAwareConditionParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//action=ContextAwareUnidirectionalAction
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//ContextAwareUnidirectionalAction
		public RuleCall getActionContextAwareUnidirectionalActionParserRuleCall_3_0() { return cActionContextAwareUnidirectionalActionParserRuleCall_3_0; }
	}
	public class ConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.Conversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBigulAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBigulBiGULStatementParserRuleCall_0_0 = (RuleCall)cBigulAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceValidIDParserRuleCall_2_0 = (RuleCall)cSourceAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSourceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSourceValidIDParserRuleCall_3_1_0 = (RuleCall)cSourceAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cViewAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cViewValidIDParserRuleCall_6_0 = (RuleCall)cViewAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cViewAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cViewValidIDParserRuleCall_7_1_0 = (RuleCall)cViewAssignment_7_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Conversion:
		//	bigul=BiGULStatement '(' source+=ValidID (',' source+=ValidID)* ')' '(' view+=ValidID (',' view+=ValidID)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//bigul=BiGULStatement '(' source+=ValidID (',' source+=ValidID)* ')' '(' view+=ValidID (',' view+=ValidID)* ')'
		public Group getGroup() { return cGroup; }
		
		//bigul=BiGULStatement
		public Assignment getBigulAssignment_0() { return cBigulAssignment_0; }
		
		//BiGULStatement
		public RuleCall getBigulBiGULStatementParserRuleCall_0_0() { return cBigulBiGULStatementParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//source+=ValidID
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//ValidID
		public RuleCall getSourceValidIDParserRuleCall_2_0() { return cSourceValidIDParserRuleCall_2_0; }
		
		//(',' source+=ValidID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//source+=ValidID
		public Assignment getSourceAssignment_3_1() { return cSourceAssignment_3_1; }
		
		//ValidID
		public RuleCall getSourceValidIDParserRuleCall_3_1_0() { return cSourceValidIDParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//view+=ValidID
		public Assignment getViewAssignment_6() { return cViewAssignment_6; }
		
		//ValidID
		public RuleCall getViewValidIDParserRuleCall_6_0() { return cViewValidIDParserRuleCall_6_0; }
		
		//(',' view+=ValidID)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//view+=ValidID
		public Assignment getViewAssignment_7_1() { return cViewAssignment_7_1; }
		
		//ValidID
		public RuleCall getViewValidIDParserRuleCall_7_1_0() { return cViewValidIDParserRuleCall_7_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class XmuCoreForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeIndicatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_1_0 = (RuleCall)cTypeIndicatorAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cForksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cForksXmuCoreForkBranchParserRuleCall_3_0 = (RuleCall)cForksAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cForksAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cForksXmuCoreForkBranchParserRuleCall_4_1_0 = (RuleCall)cForksAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XmuCoreFork:
		//	'fork' typeIndicator=TypeIndicator? '{' forks+=XmuCoreForkBranch ('|' forks+=XmuCoreForkBranch)+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'fork' typeIndicator=TypeIndicator? '{' forks+=XmuCoreForkBranch ('|' forks+=XmuCoreForkBranch)+ '}'
		public Group getGroup() { return cGroup; }
		
		//'fork'
		public Keyword getForkKeyword_0() { return cForkKeyword_0; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_1() { return cTypeIndicatorAssignment_1; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_1_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//forks+=XmuCoreForkBranch
		public Assignment getForksAssignment_3() { return cForksAssignment_3; }
		
		//XmuCoreForkBranch
		public RuleCall getForksXmuCoreForkBranchParserRuleCall_3_0() { return cForksXmuCoreForkBranchParserRuleCall_3_0; }
		
		//('|' forks+=XmuCoreForkBranch)+
		public Group getGroup_4() { return cGroup_4; }
		
		//'|'
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }
		
		//forks+=XmuCoreForkBranch
		public Assignment getForksAssignment_4_1() { return cForksAssignment_4_1; }
		
		//XmuCoreForkBranch
		public RuleCall getForksXmuCoreForkBranchParserRuleCall_4_1_0() { return cForksXmuCoreForkBranchParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class XmuCoreForkBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreForkBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceMappingsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceMappingsVarMappingParserRuleCall_1_0 = (RuleCall)cSourceMappingsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSourceMappingsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSourceMappingsVarMappingParserRuleCall_2_1_0 = (RuleCall)cSourceMappingsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cViewMappingsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cViewMappingsVarMappingParserRuleCall_6_0 = (RuleCall)cViewMappingsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cViewMappingsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cViewMappingsVarMappingParserRuleCall_7_1_0 = (RuleCall)cViewMappingsAssignment_7_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cBodyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cBodyXmuCoreStatementParserRuleCall_10_0 = (RuleCall)cBodyAssignment_10.eContents().get(0);
		
		//XmuCoreForkBranch:
		//	'(' sourceMappings+=VarMapping (',' sourceMappings+=VarMapping)* ')' ','
		//	'(' viewMappings+=VarMapping (',' viewMappings+=VarMapping)* ')' '->'
		//	body=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' sourceMappings+=VarMapping (',' sourceMappings+=VarMapping)* ')' ',' '(' viewMappings+=VarMapping (','
		//viewMappings+=VarMapping)* ')' '->' body=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sourceMappings+=VarMapping
		public Assignment getSourceMappingsAssignment_1() { return cSourceMappingsAssignment_1; }
		
		//VarMapping
		public RuleCall getSourceMappingsVarMappingParserRuleCall_1_0() { return cSourceMappingsVarMappingParserRuleCall_1_0; }
		
		//(',' sourceMappings+=VarMapping)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//sourceMappings+=VarMapping
		public Assignment getSourceMappingsAssignment_2_1() { return cSourceMappingsAssignment_2_1; }
		
		//VarMapping
		public RuleCall getSourceMappingsVarMappingParserRuleCall_2_1_0() { return cSourceMappingsVarMappingParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//viewMappings+=VarMapping
		public Assignment getViewMappingsAssignment_6() { return cViewMappingsAssignment_6; }
		
		//VarMapping
		public RuleCall getViewMappingsVarMappingParserRuleCall_6_0() { return cViewMappingsVarMappingParserRuleCall_6_0; }
		
		//(',' viewMappings+=VarMapping)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//viewMappings+=VarMapping
		public Assignment getViewMappingsAssignment_7_1() { return cViewMappingsAssignment_7_1; }
		
		//VarMapping
		public RuleCall getViewMappingsVarMappingParserRuleCall_7_1_0() { return cViewMappingsVarMappingParserRuleCall_7_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_9() { return cHyphenMinusGreaterThanSignKeyword_9; }
		
		//body=XmuCoreStatement
		public Assignment getBodyAssignment_10() { return cBodyAssignment_10; }
		
		//XmuCoreStatement
		public RuleCall getBodyXmuCoreStatementParserRuleCall_10_0() { return cBodyXmuCoreStatementParserRuleCall_10_0; }
	}
	public class XmuCoreAlignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreAlign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeIndicatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_1_0 = (RuleCall)cTypeIndicatorAssignment_1.eContents().get(0);
		private final Assignment cSourcePatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourcePatternPatternParserRuleCall_2_0 = (RuleCall)cSourcePatternAssignment_2.eContents().get(0);
		private final Assignment cViewPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cViewPatternPatternParserRuleCall_3_0 = (RuleCall)cViewPatternAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAlignmentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAlignmentContextAwareConditionParserRuleCall_4_1_0 = (RuleCall)cAlignmentAssignment_4_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cMatchKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cMatchAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cMatchXmuCoreStatementParserRuleCall_5_0_2_0 = (RuleCall)cMatchAssignment_5_0_2.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cUnmatchSKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cUnmatchSAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cUnmatchSContextAwareUnidirectionalActionParserRuleCall_5_1_2_0 = (RuleCall)cUnmatchSAssignment_5_1_2.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cUnorderedGroup_5.eContents().get(2);
		private final Keyword cUnmatchVKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_2_1 = (Keyword)cGroup_5_2.eContents().get(1);
		private final Assignment cUnmatchVAssignment_5_2_2 = (Assignment)cGroup_5_2.eContents().get(2);
		private final RuleCall cUnmatchVContextAwareUnidirectionalActionParserRuleCall_5_2_2_0 = (RuleCall)cUnmatchVAssignment_5_2_2.eContents().get(0);
		
		//XmuCoreAlign:
		//	'align' typeIndicator=TypeIndicator? sourcePattern=Pattern viewPattern=Pattern ('with'
		//	alignment=ContextAwareCondition)? ('match' '->' match=XmuCoreStatement & 'unmatchS' '->'
		//	unmatchS=ContextAwareUnidirectionalAction & 'unmatchV' '->' unmatchV=ContextAwareUnidirectionalAction);
		@Override public ParserRule getRule() { return rule; }
		
		//'align' typeIndicator=TypeIndicator? sourcePattern=Pattern viewPattern=Pattern ('with' alignment=ContextAwareCondition)?
		//('match' '->' match=XmuCoreStatement & 'unmatchS' '->' unmatchS=ContextAwareUnidirectionalAction & 'unmatchV' '->'
		//unmatchV=ContextAwareUnidirectionalAction)
		public Group getGroup() { return cGroup; }
		
		//'align'
		public Keyword getAlignKeyword_0() { return cAlignKeyword_0; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_1() { return cTypeIndicatorAssignment_1; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_1_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_1_0; }
		
		//sourcePattern=Pattern
		public Assignment getSourcePatternAssignment_2() { return cSourcePatternAssignment_2; }
		
		//Pattern
		public RuleCall getSourcePatternPatternParserRuleCall_2_0() { return cSourcePatternPatternParserRuleCall_2_0; }
		
		//viewPattern=Pattern
		public Assignment getViewPatternAssignment_3() { return cViewPatternAssignment_3; }
		
		//Pattern
		public RuleCall getViewPatternPatternParserRuleCall_3_0() { return cViewPatternPatternParserRuleCall_3_0; }
		
		//('with' alignment=ContextAwareCondition)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'with'
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }
		
		//alignment=ContextAwareCondition
		public Assignment getAlignmentAssignment_4_1() { return cAlignmentAssignment_4_1; }
		
		//ContextAwareCondition
		public RuleCall getAlignmentContextAwareConditionParserRuleCall_4_1_0() { return cAlignmentContextAwareConditionParserRuleCall_4_1_0; }
		
		//'match' '->' match=XmuCoreStatement & 'unmatchS' '->' unmatchS=ContextAwareUnidirectionalAction & 'unmatchV' '->'
		//unmatchV=ContextAwareUnidirectionalAction
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }
		
		//'match' '->' match=XmuCoreStatement
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'match'
		public Keyword getMatchKeyword_5_0_0() { return cMatchKeyword_5_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0_1() { return cHyphenMinusGreaterThanSignKeyword_5_0_1; }
		
		//match=XmuCoreStatement
		public Assignment getMatchAssignment_5_0_2() { return cMatchAssignment_5_0_2; }
		
		//XmuCoreStatement
		public RuleCall getMatchXmuCoreStatementParserRuleCall_5_0_2_0() { return cMatchXmuCoreStatementParserRuleCall_5_0_2_0; }
		
		//'unmatchS' '->' unmatchS=ContextAwareUnidirectionalAction
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'unmatchS'
		public Keyword getUnmatchSKeyword_5_1_0() { return cUnmatchSKeyword_5_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_1_1() { return cHyphenMinusGreaterThanSignKeyword_5_1_1; }
		
		//unmatchS=ContextAwareUnidirectionalAction
		public Assignment getUnmatchSAssignment_5_1_2() { return cUnmatchSAssignment_5_1_2; }
		
		//ContextAwareUnidirectionalAction
		public RuleCall getUnmatchSContextAwareUnidirectionalActionParserRuleCall_5_1_2_0() { return cUnmatchSContextAwareUnidirectionalActionParserRuleCall_5_1_2_0; }
		
		//'unmatchV' '->' unmatchV=ContextAwareUnidirectionalAction
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//'unmatchV'
		public Keyword getUnmatchVKeyword_5_2_0() { return cUnmatchVKeyword_5_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_2_1() { return cHyphenMinusGreaterThanSignKeyword_5_2_1; }
		
		//unmatchV=ContextAwareUnidirectionalAction
		public Assignment getUnmatchVAssignment_5_2_2() { return cUnmatchVAssignment_5_2_2; }
		
		//ContextAwareUnidirectionalAction
		public RuleCall getUnmatchVContextAwareUnidirectionalActionParserRuleCall_5_2_2_0() { return cUnmatchVContextAwareUnidirectionalActionParserRuleCall_5_2_2_0; }
	}
	public class XmuCoreFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetBXFunctionDefinitionCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetBXFunctionDefinitionValidIDParserRuleCall_0_0_1 = (RuleCall)cTargetBXFunctionDefinitionCrossReference_0_0.eContents().get(1);
		private final Assignment cTypeIndicatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_1_0 = (RuleCall)cTypeIndicatorAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSourceMappingsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSourceMappingsVarMappingParserRuleCall_3_0_0 = (RuleCall)cSourceMappingsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cSourceMappingsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cSourceMappingsVarMappingParserRuleCall_3_1_1_0 = (RuleCall)cSourceMappingsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cViewMappingsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cViewMappingsVarMappingParserRuleCall_6_0_0 = (RuleCall)cViewMappingsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cViewMappingsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cViewMappingsVarMappingParserRuleCall_6_1_1_0 = (RuleCall)cViewMappingsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XmuCoreFunctionCall:
		//	target=[BXFunctionDefinition|ValidID] typeIndicator=TypeIndicator? => '(' (sourceMappings+=VarMapping (','
		//	sourceMappings+=VarMapping)*)? ')'
		//	'(' (viewMappings+=VarMapping (',' viewMappings+=VarMapping)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//target=[BXFunctionDefinition|ValidID] typeIndicator=TypeIndicator? => '(' (sourceMappings+=VarMapping (','
		//sourceMappings+=VarMapping)*)? ')' '(' (viewMappings+=VarMapping (',' viewMappings+=VarMapping)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//target=[BXFunctionDefinition|ValidID]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//[BXFunctionDefinition|ValidID]
		public CrossReference getTargetBXFunctionDefinitionCrossReference_0_0() { return cTargetBXFunctionDefinitionCrossReference_0_0; }
		
		//ValidID
		public RuleCall getTargetBXFunctionDefinitionValidIDParserRuleCall_0_0_1() { return cTargetBXFunctionDefinitionValidIDParserRuleCall_0_0_1; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_1() { return cTypeIndicatorAssignment_1; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_1_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_1_0; }
		
		//=> '('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(sourceMappings+=VarMapping (',' sourceMappings+=VarMapping)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//sourceMappings+=VarMapping
		public Assignment getSourceMappingsAssignment_3_0() { return cSourceMappingsAssignment_3_0; }
		
		//VarMapping
		public RuleCall getSourceMappingsVarMappingParserRuleCall_3_0_0() { return cSourceMappingsVarMappingParserRuleCall_3_0_0; }
		
		//(',' sourceMappings+=VarMapping)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//sourceMappings+=VarMapping
		public Assignment getSourceMappingsAssignment_3_1_1() { return cSourceMappingsAssignment_3_1_1; }
		
		//VarMapping
		public RuleCall getSourceMappingsVarMappingParserRuleCall_3_1_1_0() { return cSourceMappingsVarMappingParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//(viewMappings+=VarMapping (',' viewMappings+=VarMapping)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//viewMappings+=VarMapping
		public Assignment getViewMappingsAssignment_6_0() { return cViewMappingsAssignment_6_0; }
		
		//VarMapping
		public RuleCall getViewMappingsVarMappingParserRuleCall_6_0_0() { return cViewMappingsVarMappingParserRuleCall_6_0_0; }
		
		//(',' viewMappings+=VarMapping)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//viewMappings+=VarMapping
		public Assignment getViewMappingsAssignment_6_1_1() { return cViewMappingsAssignment_6_1_1; }
		
		//VarMapping
		public RuleCall getViewMappingsVarMappingParserRuleCall_6_1_1_0() { return cViewMappingsVarMappingParserRuleCall_6_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class XmuCoreIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeIndicatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_1_0 = (RuleCall)cTypeIndicatorAssignment_1.eContents().get(0);
		private final Assignment cPartsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartsIndexPartParserRuleCall_2_0 = (RuleCall)cPartsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPartsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPartsIndexPartParserRuleCall_3_1_0 = (RuleCall)cPartsAssignment_3_1.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyXmuCoreStatementParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//XmuCoreIndex:
		//	'index' typeIndicator=TypeIndicator? parts+=IndexPart (',' parts+=IndexPart)* 'in' body=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'index' typeIndicator=TypeIndicator? parts+=IndexPart (',' parts+=IndexPart)* 'in' body=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'index'
		public Keyword getIndexKeyword_0() { return cIndexKeyword_0; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_1() { return cTypeIndicatorAssignment_1; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_1_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_1_0; }
		
		//parts+=IndexPart
		public Assignment getPartsAssignment_2() { return cPartsAssignment_2; }
		
		//IndexPart
		public RuleCall getPartsIndexPartParserRuleCall_2_0() { return cPartsIndexPartParserRuleCall_2_0; }
		
		//(',' parts+=IndexPart)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//parts+=IndexPart
		public Assignment getPartsAssignment_3_1() { return cPartsAssignment_3_1; }
		
		//IndexPart
		public RuleCall getPartsIndexPartParserRuleCall_3_1_0() { return cPartsIndexPartParserRuleCall_3_1_0; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//body=XmuCoreStatement
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//XmuCoreStatement
		public RuleCall getBodyXmuCoreStatementParserRuleCall_5_0() { return cBodyXmuCoreStatementParserRuleCall_5_0; }
	}
	public class IndexPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.IndexPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSignatureIndexDefinitionCrossReference_0_0 = (CrossReference)cSignatureAssignment_0.eContents().get(0);
		private final RuleCall cSignatureIndexDefinitionValidIDParserRuleCall_0_0_1 = (RuleCall)cSignatureIndexDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceKeysAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceKeysValidIDParserRuleCall_2_0 = (RuleCall)cSourceKeysAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSourceKeysAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSourceKeysValidIDParserRuleCall_3_1_0 = (RuleCall)cSourceKeysAssignment_3_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cViewKeysAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cViewKeysValidIDParserRuleCall_5_0 = (RuleCall)cViewKeysAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cViewKeysAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cViewKeysValidIDParserRuleCall_6_1_0 = (RuleCall)cViewKeysAssignment_6_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IndexPart:
		//	signature=[IndexDefinition|ValidID] '<' sourceKeys+=ValidID (',' sourceKeys+=ValidID)* '|' viewKeys+=ValidID (','
		//	viewKeys+=ValidID)* '>';
		@Override public ParserRule getRule() { return rule; }
		
		//signature=[IndexDefinition|ValidID] '<' sourceKeys+=ValidID (',' sourceKeys+=ValidID)* '|' viewKeys+=ValidID (','
		//viewKeys+=ValidID)* '>'
		public Group getGroup() { return cGroup; }
		
		//signature=[IndexDefinition|ValidID]
		public Assignment getSignatureAssignment_0() { return cSignatureAssignment_0; }
		
		//[IndexDefinition|ValidID]
		public CrossReference getSignatureIndexDefinitionCrossReference_0_0() { return cSignatureIndexDefinitionCrossReference_0_0; }
		
		//ValidID
		public RuleCall getSignatureIndexDefinitionValidIDParserRuleCall_0_0_1() { return cSignatureIndexDefinitionValidIDParserRuleCall_0_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//sourceKeys+=ValidID
		public Assignment getSourceKeysAssignment_2() { return cSourceKeysAssignment_2; }
		
		//ValidID
		public RuleCall getSourceKeysValidIDParserRuleCall_2_0() { return cSourceKeysValidIDParserRuleCall_2_0; }
		
		//(',' sourceKeys+=ValidID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//sourceKeys+=ValidID
		public Assignment getSourceKeysAssignment_3_1() { return cSourceKeysAssignment_3_1; }
		
		//ValidID
		public RuleCall getSourceKeysValidIDParserRuleCall_3_1_0() { return cSourceKeysValidIDParserRuleCall_3_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_4() { return cVerticalLineKeyword_4; }
		
		//viewKeys+=ValidID
		public Assignment getViewKeysAssignment_5() { return cViewKeysAssignment_5; }
		
		//ValidID
		public RuleCall getViewKeysValidIDParserRuleCall_5_0() { return cViewKeysValidIDParserRuleCall_5_0; }
		
		//(',' viewKeys+=ValidID)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//viewKeys+=ValidID
		public Assignment getViewKeysAssignment_6_1() { return cViewKeysAssignment_6_1; }
		
		//ValidID
		public RuleCall getViewKeysValidIDParserRuleCall_6_1_0() { return cViewKeysValidIDParserRuleCall_6_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
	}
	public class XmuCoreForEachMatchSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XmuCoreForEachMatchSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeIndicatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIndicatorTypeIndicatorParserRuleCall_1_0 = (RuleCall)cTypeIndicatorAssignment_1.eContents().get(0);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyXmuCoreStatementParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//XmuCoreForEachMatchSource:
		//	'foreach' typeIndicator=TypeIndicator? pattern=Pattern 'do' body=XmuCoreStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' typeIndicator=TypeIndicator? pattern=Pattern 'do' body=XmuCoreStatement
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//typeIndicator=TypeIndicator?
		public Assignment getTypeIndicatorAssignment_1() { return cTypeIndicatorAssignment_1; }
		
		//TypeIndicator
		public RuleCall getTypeIndicatorTypeIndicatorParserRuleCall_1_0() { return cTypeIndicatorTypeIndicatorParserRuleCall_1_0; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_0() { return cPatternPatternParserRuleCall_2_0; }
		
		//'do'
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }
		
		//body=XmuCoreStatement
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//XmuCoreStatement
		public RuleCall getBodyXmuCoreStatementParserRuleCall_4_0() { return cBodyXmuCoreStatementParserRuleCall_4_0; }
	}
	public class ContextAwareConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ContextAwareCondition");
		private final Assignment cConditionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConditionXExpressionParserRuleCall_0 = (RuleCall)cConditionAssignment.eContents().get(0);
		
		//ContextAwareCondition:
		//	condition=XExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//condition=XExpression
		public Assignment getConditionAssignment() { return cConditionAssignment; }
		
		//XExpression
		public RuleCall getConditionXExpressionParserRuleCall_0() { return cConditionXExpressionParserRuleCall_0; }
	}
	public class ContextAwareUnidirectionalActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ContextAwareUnidirectionalAction");
		private final Assignment cActionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cActionXBlockExpressionParserRuleCall_0 = (RuleCall)cActionAssignment.eContents().get(0);
		
		//ContextAwareUnidirectionalAction:
		//	action=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//action=XBlockExpression
		public Assignment getActionAssignment() { return cActionAssignment; }
		
		//XBlockExpression
		public RuleCall getActionXBlockExpressionParserRuleCall_0() { return cActionXBlockExpressionParserRuleCall_0; }
	}
	public class BiGULStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.BiGULStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBiGULReplaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBiGULSkipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCustomizedBiGULReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BiGULStatement:
		//	BiGULReplace | BiGULSkip | CustomizedBiGULReference;
		@Override public ParserRule getRule() { return rule; }
		
		//BiGULReplace | BiGULSkip | CustomizedBiGULReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BiGULReplace
		public RuleCall getBiGULReplaceParserRuleCall_0() { return cBiGULReplaceParserRuleCall_0; }
		
		//BiGULSkip
		public RuleCall getBiGULSkipParserRuleCall_1() { return cBiGULSkipParserRuleCall_1; }
		
		//CustomizedBiGULReference
		public RuleCall getCustomizedBiGULReferenceParserRuleCall_2() { return cCustomizedBiGULReferenceParserRuleCall_2; }
	}
	public class BiGULReplaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.BiGULReplace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBiGULReplaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReplaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BiGULReplace:
		//	{BiGULReplace} => 'replace';
		@Override public ParserRule getRule() { return rule; }
		
		//{BiGULReplace} => 'replace'
		public Group getGroup() { return cGroup; }
		
		//{BiGULReplace}
		public Action getBiGULReplaceAction_0() { return cBiGULReplaceAction_0; }
		
		//=> 'replace'
		public Keyword getReplaceKeyword_1() { return cReplaceKeyword_1; }
	}
	public class BiGULSkipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.BiGULSkip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBiGULSkipAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSkipKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BiGULSkip:
		//	{BiGULSkip} => 'skip';
		@Override public ParserRule getRule() { return rule; }
		
		//{BiGULSkip} => 'skip'
		public Group getGroup() { return cGroup; }
		
		//{BiGULSkip}
		public Action getBiGULSkipAction_0() { return cBiGULSkipAction_0; }
		
		//=> 'skip'
		public Keyword getSkipKeyword_1() { return cSkipKeyword_1; }
	}
	public class CustomizedBiGULReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.CustomizedBiGULReference");
		private final Assignment cFunctionAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFunctionCustomizedBiGULDefinitionCrossReference_0 = (CrossReference)cFunctionAssignment.eContents().get(0);
		private final RuleCall cFunctionCustomizedBiGULDefinitionValidIDParserRuleCall_0_1 = (RuleCall)cFunctionCustomizedBiGULDefinitionCrossReference_0.eContents().get(1);
		
		//CustomizedBiGULReference:
		//	function=[CustomizedBiGULDefinition|ValidID];
		@Override public ParserRule getRule() { return rule; }
		
		//function=[CustomizedBiGULDefinition|ValidID]
		public Assignment getFunctionAssignment() { return cFunctionAssignment; }
		
		//[CustomizedBiGULDefinition|ValidID]
		public CrossReference getFunctionCustomizedBiGULDefinitionCrossReference_0() { return cFunctionCustomizedBiGULDefinitionCrossReference_0; }
		
		//ValidID
		public RuleCall getFunctionCustomizedBiGULDefinitionValidIDParserRuleCall_0_1() { return cFunctionCustomizedBiGULDefinitionValidIDParserRuleCall_0_1; }
	}
	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ValidID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cIndexKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAlignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMatchKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cStringKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cBooleanKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cTypeKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cSourceKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cViewKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cGetKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cPutKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cContextKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		
		//@Override
		//ValidID:
		//	ID | 'index' | 'align' | 'match' | 'int' | 'String' | 'boolean' | 'type' | 'source' | 'view' | 'get' | 'put' |
		//	'context';
		@Override public ParserRule getRule() { return rule; }
		
		//ID | 'index' | 'align' | 'match' | 'int' | 'String' | 'boolean' | 'type' | 'source' | 'view' | 'get' | 'put' | 'context'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'index'
		public Keyword getIndexKeyword_1() { return cIndexKeyword_1; }
		
		//'align'
		public Keyword getAlignKeyword_2() { return cAlignKeyword_2; }
		
		//'match'
		public Keyword getMatchKeyword_3() { return cMatchKeyword_3; }
		
		//'int'
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }
		
		//'String'
		public Keyword getStringKeyword_5() { return cStringKeyword_5; }
		
		//'boolean'
		public Keyword getBooleanKeyword_6() { return cBooleanKeyword_6; }
		
		//'type'
		public Keyword getTypeKeyword_7() { return cTypeKeyword_7; }
		
		//'source'
		public Keyword getSourceKeyword_8() { return cSourceKeyword_8; }
		
		//'view'
		public Keyword getViewKeyword_9() { return cViewKeyword_9; }
		
		//'get'
		public Keyword getGetKeyword_10() { return cGetKeyword_10; }
		
		//'put'
		public Keyword getPutKeyword_11() { return cPutKeyword_11; }
		
		//'context'
		public Keyword getContextKeyword_12() { return cContextKeyword_12; }
	}
	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModificationExpressionBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModificationExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cContextExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNewInstanceExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAllInstanceExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXPrimaryExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//@Override
		//XPrimaryExpression xbase::XExpression:
		//	ModificationExpressionBlock
		//	| ModificationExpression
		//	| ContextExpression
		//	| NewInstanceExpression
		//	| AllInstanceExpression
		//	//	| MatchExpression
		//	| super;
		@Override public ParserRule getRule() { return rule; }
		
		//ModificationExpressionBlock | ModificationExpression | ContextExpression | NewInstanceExpression | AllInstanceExpression //	| MatchExpression
		//| super
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ModificationExpressionBlock
		public RuleCall getModificationExpressionBlockParserRuleCall_0() { return cModificationExpressionBlockParserRuleCall_0; }
		
		//ModificationExpression
		public RuleCall getModificationExpressionParserRuleCall_1() { return cModificationExpressionParserRuleCall_1; }
		
		//ContextExpression
		public RuleCall getContextExpressionParserRuleCall_2() { return cContextExpressionParserRuleCall_2; }
		
		//NewInstanceExpression
		public RuleCall getNewInstanceExpressionParserRuleCall_3() { return cNewInstanceExpressionParserRuleCall_3; }
		
		//AllInstanceExpression
		public RuleCall getAllInstanceExpressionParserRuleCall_4() { return cAllInstanceExpressionParserRuleCall_4; }
		
		//super
		public RuleCall getXPrimaryExpressionParserRuleCall_5() { return cXPrimaryExpressionParserRuleCall_5; }
	}
	public class ContextExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ContextExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cContextPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNavigationExpressionHostAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNavOpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cNavOpAlternatives_1_2_0 = (Alternatives)cNavOpAssignment_1_2.eContents().get(0);
		private final Keyword cNavOpCommercialAtKeyword_1_2_0_0 = (Keyword)cNavOpAlternatives_1_2_0.eContents().get(0);
		private final Keyword cNavOpCommercialAtCommercialAtKeyword_1_2_0_1 = (Keyword)cNavOpAlternatives_1_2_0.eContents().get(1);
		private final Assignment cPathNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cPathNameValidIDParserRuleCall_1_3_0 = (RuleCall)cPathNameAssignment_1_3.eContents().get(0);
		
		//ContextExpression:
		//	ContextPrimaryExpression ({NavigationExpression.host=current} '.' navOp=('@' | '@@') pathName=ValidID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ContextPrimaryExpression ({NavigationExpression.host=current} '.' navOp=('@' | '@@') pathName=ValidID)*
		public Group getGroup() { return cGroup; }
		
		//ContextPrimaryExpression
		public RuleCall getContextPrimaryExpressionParserRuleCall_0() { return cContextPrimaryExpressionParserRuleCall_0; }
		
		//({NavigationExpression.host=current} '.' navOp=('@' | '@@') pathName=ValidID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{NavigationExpression.host=current}
		public Action getNavigationExpressionHostAction_1_0() { return cNavigationExpressionHostAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//navOp=('@' | '@@')
		public Assignment getNavOpAssignment_1_2() { return cNavOpAssignment_1_2; }
		
		//('@' | '@@')
		public Alternatives getNavOpAlternatives_1_2_0() { return cNavOpAlternatives_1_2_0; }
		
		//'@'
		public Keyword getNavOpCommercialAtKeyword_1_2_0_0() { return cNavOpCommercialAtKeyword_1_2_0_0; }
		
		//'@@'
		public Keyword getNavOpCommercialAtCommercialAtKeyword_1_2_0_1() { return cNavOpCommercialAtCommercialAtKeyword_1_2_0_1; }
		
		//pathName=ValidID
		public Assignment getPathNameAssignment_1_3() { return cPathNameAssignment_1_3; }
		
		//ValidID
		public RuleCall getPathNameValidIDParserRuleCall_1_3_0() { return cPathNameValidIDParserRuleCall_1_3_0; }
	}
	public class ContextPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ContextPrimaryExpression");
		private final RuleCall cContextVarExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ContextPrimaryExpression:
		//	ContextVarExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ContextVarExpression
		public RuleCall getContextVarExpressionParserRuleCall() { return cContextVarExpressionParserRuleCall; }
	}
	public class ContextVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ContextVarExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cContextVarExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cCommercialAtKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSideAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSideSideEnumEnumRuleCall_0_3_0 = (RuleCall)cSideAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExpressionConversionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSideAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSideSideEnumEnumRuleCall_1_2_0 = (RuleCall)cSideAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cMetamodelAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final CrossReference cMetamodelImportSectionCrossReference_1_4_0 = (CrossReference)cMetamodelAssignment_1_4.eContents().get(0);
		private final RuleCall cMetamodelImportSectionValidIDParserRuleCall_1_4_0_1 = (RuleCall)cMetamodelImportSectionCrossReference_1_4_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cTypeAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final CrossReference cTypeEClassCrossReference_1_6_0 = (CrossReference)cTypeAssignment_1_6.eContents().get(0);
		private final RuleCall cTypeEClassValidIDParserRuleCall_1_6_0_1 = (RuleCall)cTypeEClassCrossReference_1_6_0.eContents().get(1);
		private final Assignment cManyAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final Keyword cManyLeftSquareBracketRightSquareBracketKeyword_1_7_0 = (Keyword)cManyAssignment_1_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Assignment cExpressionAssignment_1_9 = (Assignment)cGroup_1.eContents().get(9);
		private final RuleCall cExpressionXExpressionParserRuleCall_1_9_0 = (RuleCall)cExpressionAssignment_1_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_10 = (Keyword)cGroup_1.eContents().get(10);
		
		//ContextVarExpression ContextPrimaryExpression:
		//	{ContextVarExpression} name=ValidID '@' side=SideEnum | {ExpressionConversion} '@' side=SideEnum ':'
		//	metamodel=[ImportSection|ValidID] '!' type=[ecore::EClass|ValidID] many?='[]'? '(' expression=XExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ContextVarExpression} name=ValidID '@' side=SideEnum | {ExpressionConversion} '@' side=SideEnum ':'
		//metamodel=[ImportSection|ValidID] '!' type=[ecore::EClass|ValidID] many?='[]'? '(' expression=XExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ContextVarExpression} name=ValidID '@' side=SideEnum
		public Group getGroup_0() { return cGroup_0; }
		
		//{ContextVarExpression}
		public Action getContextVarExpressionAction_0_0() { return cContextVarExpressionAction_0_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_1_0() { return cNameValidIDParserRuleCall_0_1_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0_2() { return cCommercialAtKeyword_0_2; }
		
		//side=SideEnum
		public Assignment getSideAssignment_0_3() { return cSideAssignment_0_3; }
		
		//SideEnum
		public RuleCall getSideSideEnumEnumRuleCall_0_3_0() { return cSideSideEnumEnumRuleCall_0_3_0; }
		
		//{ExpressionConversion} '@' side=SideEnum ':' metamodel=[ImportSection|ValidID] '!' type=[ecore::EClass|ValidID]
		//many?='[]'? '(' expression=XExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExpressionConversion}
		public Action getExpressionConversionAction_1_0() { return cExpressionConversionAction_1_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1_1() { return cCommercialAtKeyword_1_1; }
		
		//side=SideEnum
		public Assignment getSideAssignment_1_2() { return cSideAssignment_1_2; }
		
		//SideEnum
		public RuleCall getSideSideEnumEnumRuleCall_1_2_0() { return cSideSideEnumEnumRuleCall_1_2_0; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//metamodel=[ImportSection|ValidID]
		public Assignment getMetamodelAssignment_1_4() { return cMetamodelAssignment_1_4; }
		
		//[ImportSection|ValidID]
		public CrossReference getMetamodelImportSectionCrossReference_1_4_0() { return cMetamodelImportSectionCrossReference_1_4_0; }
		
		//ValidID
		public RuleCall getMetamodelImportSectionValidIDParserRuleCall_1_4_0_1() { return cMetamodelImportSectionValidIDParserRuleCall_1_4_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_5() { return cExclamationMarkKeyword_1_5; }
		
		//type=[ecore::EClass|ValidID]
		public Assignment getTypeAssignment_1_6() { return cTypeAssignment_1_6; }
		
		//[ecore::EClass|ValidID]
		public CrossReference getTypeEClassCrossReference_1_6_0() { return cTypeEClassCrossReference_1_6_0; }
		
		//ValidID
		public RuleCall getTypeEClassValidIDParserRuleCall_1_6_0_1() { return cTypeEClassValidIDParserRuleCall_1_6_0_1; }
		
		//many?='[]'?
		public Assignment getManyAssignment_1_7() { return cManyAssignment_1_7; }
		
		//'[]'
		public Keyword getManyLeftSquareBracketRightSquareBracketKeyword_1_7_0() { return cManyLeftSquareBracketRightSquareBracketKeyword_1_7_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_8() { return cLeftParenthesisKeyword_1_8; }
		
		//expression=XExpression
		public Assignment getExpressionAssignment_1_9() { return cExpressionAssignment_1_9; }
		
		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_1_9_0() { return cExpressionXExpressionParserRuleCall_1_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_10() { return cRightParenthesisKeyword_1_10; }
	}
	public class NewInstanceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.NewInstanceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAnnotatedTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cSizeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cSizeXExpressionParserRuleCall_2_0_1_0 = (RuleCall)cSizeAssignment_2_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cSourceValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSourceValueXExpressionParserRuleCall_2_1_1_0 = (RuleCall)cSourceValueAssignment_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cTargetValueAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cTargetValueXExpressionParserRuleCall_2_1_3_0 = (RuleCall)cTargetValueAssignment_2_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		
		//NewInstanceExpression:
		//	'new' type=AnnotatedType (=> '[' size=XExpression ']' | => '(' sourceValue=XExpression ',' targetValue=XExpression
		//	')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'new' type=AnnotatedType (=> '[' size=XExpression ']' | => '(' sourceValue=XExpression ',' targetValue=XExpression ')')?
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//type=AnnotatedType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//AnnotatedType
		public RuleCall getTypeAnnotatedTypeParserRuleCall_1_0() { return cTypeAnnotatedTypeParserRuleCall_1_0; }
		
		//(=> '[' size=XExpression ']' | => '(' sourceValue=XExpression ',' targetValue=XExpression ')')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//=> '[' size=XExpression ']'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//=> '['
		public Keyword getLeftSquareBracketKeyword_2_0_0() { return cLeftSquareBracketKeyword_2_0_0; }
		
		//size=XExpression
		public Assignment getSizeAssignment_2_0_1() { return cSizeAssignment_2_0_1; }
		
		//XExpression
		public RuleCall getSizeXExpressionParserRuleCall_2_0_1_0() { return cSizeXExpressionParserRuleCall_2_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_0_2() { return cRightSquareBracketKeyword_2_0_2; }
		
		//=> '(' sourceValue=XExpression ',' targetValue=XExpression ')'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//=> '('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//sourceValue=XExpression
		public Assignment getSourceValueAssignment_2_1_1() { return cSourceValueAssignment_2_1_1; }
		
		//XExpression
		public RuleCall getSourceValueXExpressionParserRuleCall_2_1_1_0() { return cSourceValueXExpressionParserRuleCall_2_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_2_1_2() { return cCommaKeyword_2_1_2; }
		
		//targetValue=XExpression
		public Assignment getTargetValueAssignment_2_1_3() { return cTargetValueAssignment_2_1_3; }
		
		//XExpression
		public RuleCall getTargetValueXExpressionParserRuleCall_2_1_3_0() { return cTargetValueXExpressionParserRuleCall_2_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_4() { return cRightParenthesisKeyword_2_1_4; }
	}
	public class AnnotatedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.AnnotatedType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSideAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSideSideEnumEnumRuleCall_1_0 = (RuleCall)cSideAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMetamodelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMetamodelImportSectionCrossReference_3_0 = (CrossReference)cMetamodelAssignment_3.eContents().get(0);
		private final RuleCall cMetamodelImportSectionValidIDParserRuleCall_3_0_1 = (RuleCall)cMetamodelImportSectionCrossReference_3_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTypeEClassCrossReference_5_0 = (CrossReference)cTypeAssignment_5.eContents().get(0);
		private final RuleCall cTypeEClassValidIDParserRuleCall_5_0_1 = (RuleCall)cTypeEClassCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColonColonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFeatureAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cFeatureEStructuralFeatureCrossReference_6_1_0 = (CrossReference)cFeatureAssignment_6_1.eContents().get(0);
		private final RuleCall cFeatureEStructuralFeatureValidIDParserRuleCall_6_1_0_1 = (RuleCall)cFeatureEStructuralFeatureCrossReference_6_1_0.eContents().get(1);
		
		//AnnotatedType:
		//	'@' side=SideEnum ':' metamodel=[ImportSection|ValidID] '!' type=[ecore::EClass|ValidID] (=> '::'
		//	feature=[ecore::EStructuralFeature|ValidID])?;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' side=SideEnum ':' metamodel=[ImportSection|ValidID] '!' type=[ecore::EClass|ValidID] (=> '::'
		//feature=[ecore::EStructuralFeature|ValidID])?
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//side=SideEnum
		public Assignment getSideAssignment_1() { return cSideAssignment_1; }
		
		//SideEnum
		public RuleCall getSideSideEnumEnumRuleCall_1_0() { return cSideSideEnumEnumRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//metamodel=[ImportSection|ValidID]
		public Assignment getMetamodelAssignment_3() { return cMetamodelAssignment_3; }
		
		//[ImportSection|ValidID]
		public CrossReference getMetamodelImportSectionCrossReference_3_0() { return cMetamodelImportSectionCrossReference_3_0; }
		
		//ValidID
		public RuleCall getMetamodelImportSectionValidIDParserRuleCall_3_0_1() { return cMetamodelImportSectionValidIDParserRuleCall_3_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_4() { return cExclamationMarkKeyword_4; }
		
		//type=[ecore::EClass|ValidID]
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//[ecore::EClass|ValidID]
		public CrossReference getTypeEClassCrossReference_5_0() { return cTypeEClassCrossReference_5_0; }
		
		//ValidID
		public RuleCall getTypeEClassValidIDParserRuleCall_5_0_1() { return cTypeEClassValidIDParserRuleCall_5_0_1; }
		
		//(=> '::' feature=[ecore::EStructuralFeature|ValidID])?
		public Group getGroup_6() { return cGroup_6; }
		
		//=> '::'
		public Keyword getColonColonKeyword_6_0() { return cColonColonKeyword_6_0; }
		
		//feature=[ecore::EStructuralFeature|ValidID]
		public Assignment getFeatureAssignment_6_1() { return cFeatureAssignment_6_1; }
		
		//[ecore::EStructuralFeature|ValidID]
		public CrossReference getFeatureEStructuralFeatureCrossReference_6_1_0() { return cFeatureEStructuralFeatureCrossReference_6_1_0; }
		
		//ValidID
		public RuleCall getFeatureEStructuralFeatureValidIDParserRuleCall_6_1_0_1() { return cFeatureEStructuralFeatureValidIDParserRuleCall_6_1_0_1; }
	}
	public class AllInstanceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.AllInstanceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAnnotatedTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAllInstancesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AllInstanceExpression:
		//	type=AnnotatedType '.' 'allInstances';
		@Override public ParserRule getRule() { return rule; }
		
		//type=AnnotatedType '.' 'allInstances'
		public Group getGroup() { return cGroup; }
		
		//type=AnnotatedType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//AnnotatedType
		public RuleCall getTypeAnnotatedTypeParserRuleCall_0_0() { return cTypeAnnotatedTypeParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'allInstances'
		public Keyword getAllInstancesKeyword_2() { return cAllInstancesKeyword_2; }
	}
	public class ModificationExpressionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ModificationExpressionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModificationExpressionBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBeginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsXExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ModificationExpressionBlock xbase::XExpression:
		//	{ModificationExpressionBlock} 'begin' (expressions+=XExpression ';'?)* 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{ModificationExpressionBlock} 'begin' (expressions+=XExpression ';'?)* 'end'
		public Group getGroup() { return cGroup; }
		
		//{ModificationExpressionBlock}
		public Action getModificationExpressionBlockAction_0() { return cModificationExpressionBlockAction_0; }
		
		//'begin'
		public Keyword getBeginKeyword_1() { return cBeginKeyword_1; }
		
		//(expressions+=XExpression ';'?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//expressions+=XExpression
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }
		
		//XExpression
		public RuleCall getExpressionsXExpressionParserRuleCall_2_0_0() { return cExpressionsXExpressionParserRuleCall_2_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class ModificationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ModificationExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnforcementExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeleteElementExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInsertElementExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMatchExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ModificationExpression:
		//	EnforcementExpression | DeleteElementExpression | InsertElementExpression | MatchExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//EnforcementExpression | DeleteElementExpression | InsertElementExpression | MatchExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnforcementExpression
		public RuleCall getEnforcementExpressionParserRuleCall_0() { return cEnforcementExpressionParserRuleCall_0; }
		
		//DeleteElementExpression
		public RuleCall getDeleteElementExpressionParserRuleCall_1() { return cDeleteElementExpressionParserRuleCall_1; }
		
		//InsertElementExpression
		public RuleCall getInsertElementExpressionParserRuleCall_2() { return cInsertElementExpressionParserRuleCall_2; }
		
		//MatchExpression
		public RuleCall getMatchExpressionParserRuleCall_3() { return cMatchExpressionParserRuleCall_3; }
	}
	public class EnforcementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.EnforcementExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnforceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternPatternParserRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueMappingsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueMappingsValueMappingParserRuleCall_2_1_0 = (RuleCall)cValueMappingsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cValueMappingsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cValueMappingsValueMappingParserRuleCall_2_2_1_0 = (RuleCall)cValueMappingsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EnforcementExpression:
		//	'enforce' pattern=Pattern ('{' valueMappings+=ValueMapping (',' valueMappings+=ValueMapping)* '}')? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'enforce' pattern=Pattern ('{' valueMappings+=ValueMapping (',' valueMappings+=ValueMapping)* '}')? ';'
		public Group getGroup() { return cGroup; }
		
		//'enforce'
		public Keyword getEnforceKeyword_0() { return cEnforceKeyword_0; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_1_0() { return cPatternPatternParserRuleCall_1_0; }
		
		//('{' valueMappings+=ValueMapping (',' valueMappings+=ValueMapping)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//valueMappings+=ValueMapping
		public Assignment getValueMappingsAssignment_2_1() { return cValueMappingsAssignment_2_1; }
		
		//ValueMapping
		public RuleCall getValueMappingsValueMappingParserRuleCall_2_1_0() { return cValueMappingsValueMappingParserRuleCall_2_1_0; }
		
		//(',' valueMappings+=ValueMapping)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//valueMappings+=ValueMapping
		public Assignment getValueMappingsAssignment_2_2_1() { return cValueMappingsAssignment_2_2_1; }
		
		//ValueMapping
		public RuleCall getValueMappingsValueMappingParserRuleCall_2_2_1_0() { return cValueMappingsValueMappingParserRuleCall_2_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class MatchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.MatchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternPatternParserRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueMappingsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueMappingsValueMappingParserRuleCall_2_1_0 = (RuleCall)cValueMappingsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cValueMappingsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cValueMappingsValueMappingParserRuleCall_2_2_1_0 = (RuleCall)cValueMappingsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cThenAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cThenXBlockExpressionParserRuleCall_3_1_0 = (RuleCall)cThenAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOtherwiseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOtherwiseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOtherwiseXBlockExpressionParserRuleCall_4_1_0 = (RuleCall)cOtherwiseAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MatchExpression:
		//	'find' pattern=Pattern ('{' valueMappings+=ValueMapping (',' valueMappings+=ValueMapping)* '}')? (=> 'then'
		//	then=XBlockExpression)? (=> 'otherwise' otherwise=XBlockExpression)?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'find' pattern=Pattern ('{' valueMappings+=ValueMapping (',' valueMappings+=ValueMapping)* '}')? (=> 'then'
		//then=XBlockExpression)? (=> 'otherwise' otherwise=XBlockExpression)? ';'
		public Group getGroup() { return cGroup; }
		
		//'find'
		public Keyword getFindKeyword_0() { return cFindKeyword_0; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_1_0() { return cPatternPatternParserRuleCall_1_0; }
		
		//('{' valueMappings+=ValueMapping (',' valueMappings+=ValueMapping)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//valueMappings+=ValueMapping
		public Assignment getValueMappingsAssignment_2_1() { return cValueMappingsAssignment_2_1; }
		
		//ValueMapping
		public RuleCall getValueMappingsValueMappingParserRuleCall_2_1_0() { return cValueMappingsValueMappingParserRuleCall_2_1_0; }
		
		//(',' valueMappings+=ValueMapping)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//valueMappings+=ValueMapping
		public Assignment getValueMappingsAssignment_2_2_1() { return cValueMappingsAssignment_2_2_1; }
		
		//ValueMapping
		public RuleCall getValueMappingsValueMappingParserRuleCall_2_2_1_0() { return cValueMappingsValueMappingParserRuleCall_2_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
		
		//(=> 'then' then=XBlockExpression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//=> 'then'
		public Keyword getThenKeyword_3_0() { return cThenKeyword_3_0; }
		
		//then=XBlockExpression
		public Assignment getThenAssignment_3_1() { return cThenAssignment_3_1; }
		
		//XBlockExpression
		public RuleCall getThenXBlockExpressionParserRuleCall_3_1_0() { return cThenXBlockExpressionParserRuleCall_3_1_0; }
		
		//(=> 'otherwise' otherwise=XBlockExpression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//=> 'otherwise'
		public Keyword getOtherwiseKeyword_4_0() { return cOtherwiseKeyword_4_0; }
		
		//otherwise=XBlockExpression
		public Assignment getOtherwiseAssignment_4_1() { return cOtherwiseAssignment_4_1; }
		
		//XBlockExpression
		public RuleCall getOtherwiseXBlockExpressionParserRuleCall_4_1_0() { return cOtherwiseXBlockExpressionParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class DeleteElementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.DeleteElementExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementXExpressionParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DeleteElementExpression:
		//	=> 'delete' element=XExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//=> 'delete' element=XExpression ';'
		public Group getGroup() { return cGroup; }
		
		//=> 'delete'
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//element=XExpression
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//XExpression
		public RuleCall getElementXExpressionParserRuleCall_1_0() { return cElementXExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class InsertElementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.InsertElementExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementXExpressionParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cPositionAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Alternatives cPositionAlternatives_2_0_0_0 = (Alternatives)cPositionAssignment_2_0_0.eContents().get(0);
		private final Keyword cPositionBeforeKeyword_2_0_0_0_0 = (Keyword)cPositionAlternatives_2_0_0_0.eContents().get(0);
		private final Keyword cPositionAfterKeyword_2_0_0_0_1 = (Keyword)cPositionAlternatives_2_0_0_0.eContents().get(1);
		private final Assignment cAnchorAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cAnchorXExpressionParserRuleCall_2_0_1_0 = (RuleCall)cAnchorAssignment_2_0_1.eContents().get(0);
		private final Assignment cPositionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cPositionFirstKeyword_2_1_0 = (Keyword)cPositionAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InsertElementExpression:
		//	=> 'insert' element=XExpression (position=('before' | 'after') anchor=XExpression | position='first')? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//=> 'insert' element=XExpression (position=('before' | 'after') anchor=XExpression | position='first')? ';'
		public Group getGroup() { return cGroup; }
		
		//=> 'insert'
		public Keyword getInsertKeyword_0() { return cInsertKeyword_0; }
		
		//element=XExpression
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//XExpression
		public RuleCall getElementXExpressionParserRuleCall_1_0() { return cElementXExpressionParserRuleCall_1_0; }
		
		//(position=('before' | 'after') anchor=XExpression | position='first')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//position=('before' | 'after') anchor=XExpression
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//position=('before' | 'after')
		public Assignment getPositionAssignment_2_0_0() { return cPositionAssignment_2_0_0; }
		
		//('before' | 'after')
		public Alternatives getPositionAlternatives_2_0_0_0() { return cPositionAlternatives_2_0_0_0; }
		
		//'before'
		public Keyword getPositionBeforeKeyword_2_0_0_0_0() { return cPositionBeforeKeyword_2_0_0_0_0; }
		
		//'after'
		public Keyword getPositionAfterKeyword_2_0_0_0_1() { return cPositionAfterKeyword_2_0_0_0_1; }
		
		//anchor=XExpression
		public Assignment getAnchorAssignment_2_0_1() { return cAnchorAssignment_2_0_1; }
		
		//XExpression
		public RuleCall getAnchorXExpressionParserRuleCall_2_0_1_0() { return cAnchorXExpressionParserRuleCall_2_0_1_0; }
		
		//position='first'
		public Assignment getPositionAssignment_2_1() { return cPositionAssignment_2_1; }
		
		//'first'
		public Keyword getPositionFirstKeyword_2_1_0() { return cPositionFirstKeyword_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ValueMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.ValueMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarNameValidIDParserRuleCall_0_0 = (RuleCall)cVarNameAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//ValueMapping:
		//	varName=ValidID '<-' expression=XExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//varName=ValidID '<-' expression=XExpression
		public Group getGroup() { return cGroup; }
		
		//varName=ValidID
		public Assignment getVarNameAssignment_0() { return cVarNameAssignment_0; }
		
		//ValidID
		public RuleCall getVarNameValidIDParserRuleCall_0_0() { return cVarNameValidIDParserRuleCall_0_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//expression=XExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_0() { return cExpressionXExpressionParserRuleCall_2_0; }
	}
	
	public class SideEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.sei.mde.bxcore.dsl.BXCore.SideEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSourceEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSourceSourceKeyword_0_0 = (Keyword)cSourceEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cViewEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cViewViewKeyword_1_0 = (Keyword)cViewEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cContextEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cContextContextKeyword_2_0 = (Keyword)cContextEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SideEnum:
		//	source | view | context;
		public EnumRule getRule() { return rule; }
		
		//source | view | context
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//source
		public EnumLiteralDeclaration getSourceEnumLiteralDeclaration_0() { return cSourceEnumLiteralDeclaration_0; }
		
		//'source'
		public Keyword getSourceSourceKeyword_0_0() { return cSourceSourceKeyword_0_0; }
		
		//view
		public EnumLiteralDeclaration getViewEnumLiteralDeclaration_1() { return cViewEnumLiteralDeclaration_1; }
		
		//'view'
		public Keyword getViewViewKeyword_1_0() { return cViewViewKeyword_1_0; }
		
		//context
		public EnumLiteralDeclaration getContextEnumLiteralDeclaration_2() { return cContextEnumLiteralDeclaration_2; }
		
		//'context'
		public Keyword getContextContextKeyword_2_0() { return cContextContextKeyword_2_0; }
	}
	
	private final BXProgramElements pBXProgram;
	private final ContextAwareActionElements pContextAwareAction;
	private final ImportSectionElements pImportSection;
	private final DataSlotElements pDataSlot;
	private final DefinitionElements pDefinition;
	private final HelperDefinitionElements pHelperDefinition;
	private final CustomizedBiGULDefinitionElements pCustomizedBiGULDefinition;
	private final TypeLiteralElements pTypeLiteral;
	private final TupleTypeLiteralElements pTupleTypeLiteral;
	private final UnorderedTupleTypeLiteralElements pUnorderedTupleTypeLiteral;
	private final UnorderedTupleTypeLiteralWithInitializerElements pUnorderedTupleTypeLiteralWithInitializer;
	private final OrderedTupleTypeLiteralElements pOrderedTupleTypeLiteral;
	private final TypeVarElements pTypeVar;
	private final TypeVarWithoutInitializerElements pTypeVarWithoutInitializer;
	private final TypeVarWithInitializerElements pTypeVarWithInitializer;
	private final PredefinedTypeLiteralElements pPredefinedTypeLiteral;
	private final PatternTypeLiteralElements pPatternTypeLiteral;
	private final TypeDefinitionElements pTypeDefinition;
	private final PatternDefinitionElements pPatternDefinition;
	private final ContextTypeRefElements pContextTypeRef;
	private final BXFunctionDefinitionElements pBXFunctionDefinition;
	private final TypeRefElements pTypeRef;
	private final IndexDefinitionElements pIndexDefinition;
	private final PatternNodeElements pPatternNode;
	private final AbstractPatternEdgeElements pAbstractPatternEdge;
	private final PatternEdgeElements pPatternEdge;
	private final PatternPathEdgeElements pPatternPathEdge;
	private final DashedPathTypeElements pDashedPathType;
	private final DashedPathTypeSegmentElements pDashedPathTypeSegment;
	private final PatternValueConditionElements pPatternValueCondition;
	private final PatternNodeRefElements pPatternNodeRef;
	private final PatternElements pPattern;
	private final PatternDefinitionReferenceElements pPatternDefinitionReference;
	private final XmuCoreStatementElements pXmuCoreStatement;
	private final XmuCoreCompositionChildStatementElements pXmuCoreCompositionChildStatement;
	private final TypeIndicatorElements pTypeIndicator;
	private final XmuCoreContextSourceElements pXmuCoreContextSource;
	private final ContextAwareDerivationActionElements pContextAwareDerivationAction;
	private final XmuCoreDeriveSourceElements pXmuCoreDeriveSource;
	private final XmuCoreDependencyViewElements pXmuCoreDependencyView;
	private final XmuCoreMatchSourceElements pXmuCoreMatchSource;
	private final XmuCoreMatchViewElements pXmuCoreMatchView;
	private final XmuCoreExpandSourceElements pXmuCoreExpandSource;
	private final XmuCoreExpandViewElements pXmuCoreExpandView;
	private final VarMappingElements pVarMapping;
	private final XmuCoreGraphReplaceElements pXmuCoreGraphReplace;
	private final XmuCoreParallelCompositionElements pXmuCoreParallelComposition;
	private final XmuCoreSwitchElements pXmuCoreSwitch;
	private final XmuCoreSwitchBranchElements pXmuCoreSwitchBranch;
	private final XmuCoreSwitchAdaptionElements pXmuCoreSwitchAdaption;
	private final ConversionElements pConversion;
	private final XmuCoreForkElements pXmuCoreFork;
	private final XmuCoreForkBranchElements pXmuCoreForkBranch;
	private final XmuCoreAlignElements pXmuCoreAlign;
	private final XmuCoreFunctionCallElements pXmuCoreFunctionCall;
	private final XmuCoreIndexElements pXmuCoreIndex;
	private final IndexPartElements pIndexPart;
	private final XmuCoreForEachMatchSourceElements pXmuCoreForEachMatchSource;
	private final ContextAwareConditionElements pContextAwareCondition;
	private final ContextAwareUnidirectionalActionElements pContextAwareUnidirectionalAction;
	private final BiGULStatementElements pBiGULStatement;
	private final BiGULReplaceElements pBiGULReplace;
	private final BiGULSkipElements pBiGULSkip;
	private final CustomizedBiGULReferenceElements pCustomizedBiGULReference;
	private final ValidIDElements pValidID;
	private final XPrimaryExpressionElements pXPrimaryExpression;
	private final ContextExpressionElements pContextExpression;
	private final ContextPrimaryExpressionElements pContextPrimaryExpression;
	private final ContextVarExpressionElements pContextVarExpression;
	private final NewInstanceExpressionElements pNewInstanceExpression;
	private final AnnotatedTypeElements pAnnotatedType;
	private final AllInstanceExpressionElements pAllInstanceExpression;
	private final SideEnumElements eSideEnum;
	private final ModificationExpressionBlockElements pModificationExpressionBlock;
	private final ModificationExpressionElements pModificationExpression;
	private final EnforcementExpressionElements pEnforcementExpression;
	private final MatchExpressionElements pMatchExpression;
	private final DeleteElementExpressionElements pDeleteElementExpression;
	private final InsertElementExpressionElements pInsertElementExpression;
	private final ValueMappingElements pValueMapping;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public BXCoreGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pBXProgram = new BXProgramElements();
		this.pContextAwareAction = new ContextAwareActionElements();
		this.pImportSection = new ImportSectionElements();
		this.pDataSlot = new DataSlotElements();
		this.pDefinition = new DefinitionElements();
		this.pHelperDefinition = new HelperDefinitionElements();
		this.pCustomizedBiGULDefinition = new CustomizedBiGULDefinitionElements();
		this.pTypeLiteral = new TypeLiteralElements();
		this.pTupleTypeLiteral = new TupleTypeLiteralElements();
		this.pUnorderedTupleTypeLiteral = new UnorderedTupleTypeLiteralElements();
		this.pUnorderedTupleTypeLiteralWithInitializer = new UnorderedTupleTypeLiteralWithInitializerElements();
		this.pOrderedTupleTypeLiteral = new OrderedTupleTypeLiteralElements();
		this.pTypeVar = new TypeVarElements();
		this.pTypeVarWithoutInitializer = new TypeVarWithoutInitializerElements();
		this.pTypeVarWithInitializer = new TypeVarWithInitializerElements();
		this.pPredefinedTypeLiteral = new PredefinedTypeLiteralElements();
		this.pPatternTypeLiteral = new PatternTypeLiteralElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pPatternDefinition = new PatternDefinitionElements();
		this.pContextTypeRef = new ContextTypeRefElements();
		this.pBXFunctionDefinition = new BXFunctionDefinitionElements();
		this.pTypeRef = new TypeRefElements();
		this.pIndexDefinition = new IndexDefinitionElements();
		this.pPatternNode = new PatternNodeElements();
		this.pAbstractPatternEdge = new AbstractPatternEdgeElements();
		this.pPatternEdge = new PatternEdgeElements();
		this.pPatternPathEdge = new PatternPathEdgeElements();
		this.pDashedPathType = new DashedPathTypeElements();
		this.pDashedPathTypeSegment = new DashedPathTypeSegmentElements();
		this.pPatternValueCondition = new PatternValueConditionElements();
		this.pPatternNodeRef = new PatternNodeRefElements();
		this.pPattern = new PatternElements();
		this.pPatternDefinitionReference = new PatternDefinitionReferenceElements();
		this.pXmuCoreStatement = new XmuCoreStatementElements();
		this.pXmuCoreCompositionChildStatement = new XmuCoreCompositionChildStatementElements();
		this.pTypeIndicator = new TypeIndicatorElements();
		this.pXmuCoreContextSource = new XmuCoreContextSourceElements();
		this.pContextAwareDerivationAction = new ContextAwareDerivationActionElements();
		this.pXmuCoreDeriveSource = new XmuCoreDeriveSourceElements();
		this.pXmuCoreDependencyView = new XmuCoreDependencyViewElements();
		this.pXmuCoreMatchSource = new XmuCoreMatchSourceElements();
		this.pXmuCoreMatchView = new XmuCoreMatchViewElements();
		this.pXmuCoreExpandSource = new XmuCoreExpandSourceElements();
		this.pXmuCoreExpandView = new XmuCoreExpandViewElements();
		this.pVarMapping = new VarMappingElements();
		this.pXmuCoreGraphReplace = new XmuCoreGraphReplaceElements();
		this.pXmuCoreParallelComposition = new XmuCoreParallelCompositionElements();
		this.pXmuCoreSwitch = new XmuCoreSwitchElements();
		this.pXmuCoreSwitchBranch = new XmuCoreSwitchBranchElements();
		this.pXmuCoreSwitchAdaption = new XmuCoreSwitchAdaptionElements();
		this.pConversion = new ConversionElements();
		this.pXmuCoreFork = new XmuCoreForkElements();
		this.pXmuCoreForkBranch = new XmuCoreForkBranchElements();
		this.pXmuCoreAlign = new XmuCoreAlignElements();
		this.pXmuCoreFunctionCall = new XmuCoreFunctionCallElements();
		this.pXmuCoreIndex = new XmuCoreIndexElements();
		this.pIndexPart = new IndexPartElements();
		this.pXmuCoreForEachMatchSource = new XmuCoreForEachMatchSourceElements();
		this.pContextAwareCondition = new ContextAwareConditionElements();
		this.pContextAwareUnidirectionalAction = new ContextAwareUnidirectionalActionElements();
		this.pBiGULStatement = new BiGULStatementElements();
		this.pBiGULReplace = new BiGULReplaceElements();
		this.pBiGULSkip = new BiGULSkipElements();
		this.pCustomizedBiGULReference = new CustomizedBiGULReferenceElements();
		this.pValidID = new ValidIDElements();
		this.pXPrimaryExpression = new XPrimaryExpressionElements();
		this.pContextExpression = new ContextExpressionElements();
		this.pContextPrimaryExpression = new ContextPrimaryExpressionElements();
		this.pContextVarExpression = new ContextVarExpressionElements();
		this.pNewInstanceExpression = new NewInstanceExpressionElements();
		this.pAnnotatedType = new AnnotatedTypeElements();
		this.pAllInstanceExpression = new AllInstanceExpressionElements();
		this.eSideEnum = new SideEnumElements();
		this.pModificationExpressionBlock = new ModificationExpressionBlockElements();
		this.pModificationExpression = new ModificationExpressionElements();
		this.pEnforcementExpression = new EnforcementExpressionElements();
		this.pMatchExpression = new MatchExpressionElements();
		this.pDeleteElementExpression = new DeleteElementExpressionElements();
		this.pInsertElementExpression = new InsertElementExpressionElements();
		this.pValueMapping = new ValueMappingElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.ustb.sei.mde.bxcore.dsl.BXCore".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//BXProgram:
	//	imports+=ImportSection*
	//	javaImports=XImportSection?
	//	slots+=DataSlot*
	//	definitions+=Definition*;
	public BXProgramElements getBXProgramAccess() {
		return pBXProgram;
	}
	
	public ParserRule getBXProgramRule() {
		return getBXProgramAccess().getRule();
	}
	
	//ContextAwareAction:
	//	ContextAwareDerivationAction | ContextAwareUnidirectionalAction;
	public ContextAwareActionElements getContextAwareActionAccess() {
		return pContextAwareAction;
	}
	
	public ParserRule getContextAwareActionRule() {
		return getContextAwareActionAccess().getRule();
	}
	
	//ImportSection:
	//	'import' metamodel=[ecore::EPackage|STRING] 'as' shortName=ValidID;
	public ImportSectionElements getImportSectionAccess() {
		return pImportSection;
	}
	
	public ParserRule getImportSectionRule() {
		return getImportSectionAccess().getRule();
	}
	
	//DataSlot:
	//	'slot' var=FullJvmFormalParameter ('=' initializer=XExpression)?;
	public DataSlotElements getDataSlotAccess() {
		return pDataSlot;
	}
	
	public ParserRule getDataSlotRule() {
		return getDataSlotAccess().getRule();
	}
	
	//Definition:
	//	CustomizedBiGULDefinition | TypeDefinition | BXFunctionDefinition | IndexDefinition | HelperDefinition;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//HelperDefinition:
	//	'helper' type=JvmTypeReference name=ValidID '(' (parameters+=JvmFormalParameter (','
	//	parameters+=JvmFormalParameter)*)? ')' body=XBlockExpression;
	public HelperDefinitionElements getHelperDefinitionAccess() {
		return pHelperDefinition;
	}
	
	public ParserRule getHelperDefinitionRule() {
		return getHelperDefinitionAccess().getRule();
	}
	
	//CustomizedBiGULDefinition:
	//	'bigul' name=ValidID
	//	'(' sourceParams+=JvmFormalParameter (',' sourceParams+=JvmFormalParameter)* ')'
	//	'(' viewParams+=JvmFormalParameter (',' viewParams+=JvmFormalParameter)* ')' ('get' get=XExpression & 'put'
	//	put=XExpression);
	public CustomizedBiGULDefinitionElements getCustomizedBiGULDefinitionAccess() {
		return pCustomizedBiGULDefinition;
	}
	
	public ParserRule getCustomizedBiGULDefinitionRule() {
		return getCustomizedBiGULDefinitionAccess().getRule();
	}
	
	//TypeLiteral:
	//	TupleTypeLiteral | PatternTypeLiteral;
	public TypeLiteralElements getTypeLiteralAccess() {
		return pTypeLiteral;
	}
	
	public ParserRule getTypeLiteralRule() {
		return getTypeLiteralAccess().getRule();
	}
	
	//TupleTypeLiteral:
	//	UnorderedTupleTypeLiteral | OrderedTupleTypeLiteral | PredefinedTypeLiteral;
	public TupleTypeLiteralElements getTupleTypeLiteralAccess() {
		return pTupleTypeLiteral;
	}
	
	public ParserRule getTupleTypeLiteralRule() {
		return getTupleTypeLiteralAccess().getRule();
	}
	
	//UnorderedTupleTypeLiteral:
	//	source=[ImportSection|ValidID] '!' ('(' elements+=TypeVarWithoutInitializer (',' elements+=TypeVarWithoutInitializer)*
	//	')');
	public UnorderedTupleTypeLiteralElements getUnorderedTupleTypeLiteralAccess() {
		return pUnorderedTupleTypeLiteral;
	}
	
	public ParserRule getUnorderedTupleTypeLiteralRule() {
		return getUnorderedTupleTypeLiteralAccess().getRule();
	}
	
	//UnorderedTupleTypeLiteralWithInitializer UnorderedTupleTypeLiteral:
	//	source=[ImportSection|ValidID] '!' ('(' elements+=TypeVarWithInitializer (',' elements+=TypeVarWithInitializer)* ')');
	public UnorderedTupleTypeLiteralWithInitializerElements getUnorderedTupleTypeLiteralWithInitializerAccess() {
		return pUnorderedTupleTypeLiteralWithInitializer;
	}
	
	public ParserRule getUnorderedTupleTypeLiteralWithInitializerRule() {
		return getUnorderedTupleTypeLiteralWithInitializerAccess().getRule();
	}
	
	//OrderedTupleTypeLiteral:
	//	source=[ImportSection|ValidID] '!' ('[' elements+=TypeVarWithoutInitializer (',' elements+=TypeVarWithoutInitializer)*
	//	']');
	public OrderedTupleTypeLiteralElements getOrderedTupleTypeLiteralAccess() {
		return pOrderedTupleTypeLiteral;
	}
	
	public ParserRule getOrderedTupleTypeLiteralRule() {
		return getOrderedTupleTypeLiteralAccess().getRule();
	}
	
	//TypeVar:
	//	TypeVarWithoutInitializer | TypeVarWithInitializer;
	public TypeVarElements getTypeVarAccess() {
		return pTypeVar;
	}
	
	public ParserRule getTypeVarRule() {
		return getTypeVarAccess().getRule();
	}
	
	//TypeVarWithoutInitializer TypeVar:
	//	name=ValidID ':' type=TypeRef many?='[]'?;
	public TypeVarWithoutInitializerElements getTypeVarWithoutInitializerAccess() {
		return pTypeVarWithoutInitializer;
	}
	
	public ParserRule getTypeVarWithoutInitializerRule() {
		return getTypeVarWithoutInitializerAccess().getRule();
	}
	
	//TypeVarWithInitializer TypeVar:
	//	name=ValidID ':' type=TypeRef many?='[]'? => '<-' initializer=ContextAwareDerivationAction;
	public TypeVarWithInitializerElements getTypeVarWithInitializerAccess() {
		return pTypeVarWithInitializer;
	}
	
	public ParserRule getTypeVarWithInitializerRule() {
		return getTypeVarWithInitializerAccess().getRule();
	}
	
	//PredefinedTypeLiteral:
	//	type='empty';
	public PredefinedTypeLiteralElements getPredefinedTypeLiteralAccess() {
		return pPredefinedTypeLiteral;
	}
	
	public ParserRule getPredefinedTypeLiteralRule() {
		return getPredefinedTypeLiteralAccess().getRule();
	}
	
	//PatternTypeLiteral:
	//	source=[ImportSection|ValidID] '!' root=PatternNode ('(' additional+=TypeVar (',' additional+=TypeVar)* ')')? ('['
	//	filter=ContextAwareCondition ']')? ('order' orderBy=[AbstractPatternEdge|ValidID] (direction=('after' | 'before')
	//	pivot=[TypeVar|ValidID])?)?;
	public PatternTypeLiteralElements getPatternTypeLiteralAccess() {
		return pPatternTypeLiteral;
	}
	
	public ParserRule getPatternTypeLiteralRule() {
		return getPatternTypeLiteralAccess().getRule();
	}
	
	//TypeDefinition:
	//	'type' name=ValidID '=' literal=TypeLiteral | PatternDefinition;
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}
	
	//PatternDefinition:
	//	'pattern' name=ValidID '=' literal=PatternTypeLiteral;
	public PatternDefinitionElements getPatternDefinitionAccess() {
		return pPatternDefinition;
	}
	
	public ParserRule getPatternDefinitionRule() {
		return getPatternDefinitionAccess().getRule();
	}
	
	//ContextTypeRef:
	//	{DefinedContextTypeRef} type=[TypeDefinition|ValidID] | TupleTypeLiteral;
	public ContextTypeRefElements getContextTypeRefAccess() {
		return pContextTypeRef;
	}
	
	public ParserRule getContextTypeRefRule() {
		return getContextTypeRefAccess().getRule();
	}
	
	//BXFunctionDefinition:
	//	'function' name=ValidID typeIndicator=TypeIndicator? '=' statement=XmuCoreStatement;
	public BXFunctionDefinitionElements getBXFunctionDefinitionAccess() {
		return pBXFunctionDefinition;
	}
	
	public ParserRule getBXFunctionDefinitionRule() {
		return getBXFunctionDefinitionAccess().getRule();
	}
	
	//TypeRef:
	//	{EcoreTypeRef} type=[ecore::EClassifier|ValidID] | {FeatureTypeRef} type=[ecore::EClassifier|ValidID] (=> '::'
	//	feature=[ecore::EStructuralFeature|ValidID]);
	public TypeRefElements getTypeRefAccess() {
		return pTypeRef;
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}
	
	//IndexDefinition:
	//	'index' name=ValidID '<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>';
	public IndexDefinitionElements getIndexDefinitionAccess() {
		return pIndexDefinition;
	}
	
	public ParserRule getIndexDefinitionRule() {
		return getIndexDefinitionAccess().getRule();
	}
	
	//PatternNode:
	//	name=ValidID ':' type=[ecore::EClassifier|ValidID] many?='[]'? ('{' (edges+=AbstractPatternEdge (','
	//	edges+=AbstractPatternEdge)*)? '}')?;
	public PatternNodeElements getPatternNodeAccess() {
		return pPatternNode;
	}
	
	public ParserRule getPatternNodeRule() {
		return getPatternNodeAccess().getRule();
	}
	
	//AbstractPatternEdge:
	//	PatternEdge | PatternPathEdge;
	public AbstractPatternEdgeElements getAbstractPatternEdgeAccess() {
		return pAbstractPatternEdge;
	}
	
	public ParserRule getAbstractPatternEdgeRule() {
		return getAbstractPatternEdgeAccess().getRule();
	}
	
	//PatternEdge:
	//	name=ValidID ':' feature=[ecore::EStructuralFeature|ValidID] many?='[]'? operator='=' value=PatternValueCondition;
	public PatternEdgeElements getPatternEdgeAccess() {
		return pPatternEdge;
	}
	
	public ParserRule getPatternEdgeRule() {
		return getPatternEdgeAccess().getRule();
	}
	
	//PatternPathEdge:
	//	name=ValidID ':' path=DashedPathType many?='[]'? operator='=' value=PatternValueCondition;
	public PatternPathEdgeElements getPatternPathEdgeAccess() {
		return pPatternPathEdge;
	}
	
	public ParserRule getPatternPathEdgeRule() {
		return getPatternPathEdgeAccess().getRule();
	}
	
	//DashedPathType:
	//	segment=DashedPathTypeSegment (=> '.' next=DashedPathType)?;
	public DashedPathTypeElements getDashedPathTypeAccess() {
		return pDashedPathType;
	}
	
	public ParserRule getDashedPathTypeRule() {
		return getDashedPathTypeAccess().getRule();
	}
	
	//DashedPathTypeSegment:
	//	'(' types+=[ecore::EStructuralFeature|ValidID] (=> '|' types+=[ecore::EStructuralFeature|ValidID])* ')' repeat=('?' |
	//	'*' | '+')?;
	public DashedPathTypeSegmentElements getDashedPathTypeSegmentAccess() {
		return pDashedPathTypeSegment;
	}
	
	public ParserRule getDashedPathTypeSegmentRule() {
		return getDashedPathTypeSegmentAccess().getRule();
	}
	
	//PatternValueCondition:
	//	PatternNode | PatternNodeRef;
	public PatternValueConditionElements getPatternValueConditionAccess() {
		return pPatternValueCondition;
	}
	
	public ParserRule getPatternValueConditionRule() {
		return getPatternValueConditionAccess().getRule();
	}
	
	//PatternNodeRef:
	//	node=[PatternNode|ValidID];
	public PatternNodeRefElements getPatternNodeRefAccess() {
		return pPatternNodeRef;
	}
	
	public ParserRule getPatternNodeRefRule() {
		return getPatternNodeRefAccess().getRule();
	}
	
	//Pattern:
	//	PatternTypeLiteral | PatternDefinitionReference;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//PatternDefinitionReference:
	//	pattern=[PatternDefinition|ValidID];
	public PatternDefinitionReferenceElements getPatternDefinitionReferenceAccess() {
		return pPatternDefinitionReference;
	}
	
	public ParserRule getPatternDefinitionReferenceRule() {
		return getPatternDefinitionReferenceAccess().getRule();
	}
	
	//XmuCoreStatement:
	//	XmuCoreFork | XmuCoreParallelComposition | XmuCoreCompositionChildStatement;
	public XmuCoreStatementElements getXmuCoreStatementAccess() {
		return pXmuCoreStatement;
	}
	
	public ParserRule getXmuCoreStatementRule() {
		return getXmuCoreStatementAccess().getRule();
	}
	
	//XmuCoreCompositionChildStatement:
	//	XmuCoreMatchSource | XmuCoreMatchView | XmuCoreExpandSource | XmuCoreExpandView | XmuCoreGraphReplace | XmuCoreSwitch
	//	| XmuCoreAlign | => XmuCoreFunctionCall | XmuCoreIndex | XmuCoreForEachMatchSource | XmuCoreContextSource |
	//	XmuCoreDeriveSource | XmuCoreDependencyView;
	public XmuCoreCompositionChildStatementElements getXmuCoreCompositionChildStatementAccess() {
		return pXmuCoreCompositionChildStatement;
	}
	
	public ParserRule getXmuCoreCompositionChildStatementRule() {
		return getXmuCoreCompositionChildStatementAccess().getRule();
	}
	
	//TypeIndicator:
	//	'<' sourceType=ContextTypeRef ',' viewType=ContextTypeRef '>';
	public TypeIndicatorElements getTypeIndicatorAccess() {
		return pTypeIndicator;
	}
	
	public ParserRule getTypeIndicatorRule() {
		return getTypeIndicatorAccess().getRule();
	}
	
	//XmuCoreContextSource:
	//	'context' typeIndicator=TypeIndicator?
	//	mappingView=UnorderedTupleTypeLiteralWithInitializer
	//	body=XmuCoreStatement;
	public XmuCoreContextSourceElements getXmuCoreContextSourceAccess() {
		return pXmuCoreContextSource;
	}
	
	public ParserRule getXmuCoreContextSourceRule() {
		return getXmuCoreContextSourceAccess().getRule();
	}
	
	//ContextAwareDerivationAction:
	//	body=XExpression;
	public ContextAwareDerivationActionElements getContextAwareDerivationActionAccess() {
		return pContextAwareDerivationAction;
	}
	
	public ParserRule getContextAwareDerivationActionRule() {
		return getContextAwareDerivationActionAccess().getRule();
	}
	
	//XmuCoreDeriveSource:
	//	'derive' typeIndicator=TypeIndicator?
	//	derivedType=UnorderedTupleTypeLiteralWithInitializer body=XmuCoreStatement;
	public XmuCoreDeriveSourceElements getXmuCoreDeriveSourceAccess() {
		return pXmuCoreDeriveSource;
	}
	
	public ParserRule getXmuCoreDeriveSourceRule() {
		return getXmuCoreDeriveSourceAccess().getRule();
	}
	
	//XmuCoreDependencyView:
	//	'dependency' typeIndicator=TypeIndicator? dependentType=UnorderedTupleTypeLiteralWithInitializer
	//	body=XmuCoreStatement;
	public XmuCoreDependencyViewElements getXmuCoreDependencyViewAccess() {
		return pXmuCoreDependencyView;
	}
	
	public ParserRule getXmuCoreDependencyViewRule() {
		return getXmuCoreDependencyViewAccess().getRule();
	}
	
	//XmuCoreMatchSource:
	//	'matchS' typeIndicator=TypeIndicator? pattern=Pattern body=XmuCoreStatement;
	public XmuCoreMatchSourceElements getXmuCoreMatchSourceAccess() {
		return pXmuCoreMatchSource;
	}
	
	public ParserRule getXmuCoreMatchSourceRule() {
		return getXmuCoreMatchSourceAccess().getRule();
	}
	
	//XmuCoreMatchView:
	//	'matchV' typeIndicator=TypeIndicator? pattern=Pattern body=XmuCoreStatement;
	public XmuCoreMatchViewElements getXmuCoreMatchViewAccess() {
		return pXmuCoreMatchView;
	}
	
	public ParserRule getXmuCoreMatchViewRule() {
		return getXmuCoreMatchViewAccess().getRule();
	}
	
	//XmuCoreExpandSource:
	//	'expandS' typeIndicator=TypeIndicator? pattern=Pattern '(' mappings+=VarMapping (',' mappings+=VarMapping)* ')' '->'
	//	body=XmuCoreStatement;
	public XmuCoreExpandSourceElements getXmuCoreExpandSourceAccess() {
		return pXmuCoreExpandSource;
	}
	
	public ParserRule getXmuCoreExpandSourceRule() {
		return getXmuCoreExpandSourceAccess().getRule();
	}
	
	//XmuCoreExpandView:
	//	'expandV' typeIndicator=TypeIndicator? pattern=Pattern '(' mappings+=VarMapping (',' mappings+=VarMapping)* ')' '->'
	//	body=XmuCoreStatement;
	public XmuCoreExpandViewElements getXmuCoreExpandViewAccess() {
		return pXmuCoreExpandView;
	}
	
	public ParserRule getXmuCoreExpandViewRule() {
		return getXmuCoreExpandViewAccess().getRule();
	}
	
	//VarMapping:
	//	to=ValidID '<-' from=ValidID;
	public VarMappingElements getVarMappingAccess() {
		return pVarMapping;
	}
	
	public ParserRule getVarMappingRule() {
		return getVarMappingAccess().getRule();
	}
	
	//XmuCoreGraphReplace:
	//	'replace' typeIndicator=TypeIndicator? source=Pattern view=Pattern ('{' conversions+=Conversion+ '}')?;
	public XmuCoreGraphReplaceElements getXmuCoreGraphReplaceAccess() {
		return pXmuCoreGraphReplace;
	}
	
	public ParserRule getXmuCoreGraphReplaceRule() {
		return getXmuCoreGraphReplaceAccess().getRule();
	}
	
	//XmuCoreParallelComposition:
	//	typeIndicator=TypeIndicator? '{' bodies+=XmuCoreCompositionChildStatement (=> '|'
	//	bodies+=XmuCoreCompositionChildStatement)+ '}';
	public XmuCoreParallelCompositionElements getXmuCoreParallelCompositionAccess() {
		return pXmuCoreParallelComposition;
	}
	
	public ParserRule getXmuCoreParallelCompositionRule() {
		return getXmuCoreParallelCompositionAccess().getRule();
	}
	
	//XmuCoreSwitch:
	//	'switch' typeIndicator=TypeIndicator? '['
	//	branches+=XmuCoreSwitchBranch+
	//	adaptions+=XmuCoreSwitchAdaption*
	//	']';
	public XmuCoreSwitchElements getXmuCoreSwitchAccess() {
		return pXmuCoreSwitch;
	}
	
	public ParserRule getXmuCoreSwitchRule() {
		return getXmuCoreSwitchAccess().getRule();
	}
	
	//XmuCoreSwitchBranch:
	//	'case' condition=ContextAwareCondition ':' action=XmuCoreStatement;
	public XmuCoreSwitchBranchElements getXmuCoreSwitchBranchAccess() {
		return pXmuCoreSwitchBranch;
	}
	
	public ParserRule getXmuCoreSwitchBranchRule() {
		return getXmuCoreSwitchBranchAccess().getRule();
	}
	
	//XmuCoreSwitchAdaption:
	//	'adaption' condition=ContextAwareCondition ':' action=ContextAwareUnidirectionalAction;
	public XmuCoreSwitchAdaptionElements getXmuCoreSwitchAdaptionAccess() {
		return pXmuCoreSwitchAdaption;
	}
	
	public ParserRule getXmuCoreSwitchAdaptionRule() {
		return getXmuCoreSwitchAdaptionAccess().getRule();
	}
	
	//Conversion:
	//	bigul=BiGULStatement '(' source+=ValidID (',' source+=ValidID)* ')' '(' view+=ValidID (',' view+=ValidID)* ')';
	public ConversionElements getConversionAccess() {
		return pConversion;
	}
	
	public ParserRule getConversionRule() {
		return getConversionAccess().getRule();
	}
	
	//XmuCoreFork:
	//	'fork' typeIndicator=TypeIndicator? '{' forks+=XmuCoreForkBranch ('|' forks+=XmuCoreForkBranch)+ '}';
	public XmuCoreForkElements getXmuCoreForkAccess() {
		return pXmuCoreFork;
	}
	
	public ParserRule getXmuCoreForkRule() {
		return getXmuCoreForkAccess().getRule();
	}
	
	//XmuCoreForkBranch:
	//	'(' sourceMappings+=VarMapping (',' sourceMappings+=VarMapping)* ')' ','
	//	'(' viewMappings+=VarMapping (',' viewMappings+=VarMapping)* ')' '->'
	//	body=XmuCoreStatement;
	public XmuCoreForkBranchElements getXmuCoreForkBranchAccess() {
		return pXmuCoreForkBranch;
	}
	
	public ParserRule getXmuCoreForkBranchRule() {
		return getXmuCoreForkBranchAccess().getRule();
	}
	
	//XmuCoreAlign:
	//	'align' typeIndicator=TypeIndicator? sourcePattern=Pattern viewPattern=Pattern ('with'
	//	alignment=ContextAwareCondition)? ('match' '->' match=XmuCoreStatement & 'unmatchS' '->'
	//	unmatchS=ContextAwareUnidirectionalAction & 'unmatchV' '->' unmatchV=ContextAwareUnidirectionalAction);
	public XmuCoreAlignElements getXmuCoreAlignAccess() {
		return pXmuCoreAlign;
	}
	
	public ParserRule getXmuCoreAlignRule() {
		return getXmuCoreAlignAccess().getRule();
	}
	
	//XmuCoreFunctionCall:
	//	target=[BXFunctionDefinition|ValidID] typeIndicator=TypeIndicator? => '(' (sourceMappings+=VarMapping (','
	//	sourceMappings+=VarMapping)*)? ')'
	//	'(' (viewMappings+=VarMapping (',' viewMappings+=VarMapping)*)? ')';
	public XmuCoreFunctionCallElements getXmuCoreFunctionCallAccess() {
		return pXmuCoreFunctionCall;
	}
	
	public ParserRule getXmuCoreFunctionCallRule() {
		return getXmuCoreFunctionCallAccess().getRule();
	}
	
	//XmuCoreIndex:
	//	'index' typeIndicator=TypeIndicator? parts+=IndexPart (',' parts+=IndexPart)* 'in' body=XmuCoreStatement;
	public XmuCoreIndexElements getXmuCoreIndexAccess() {
		return pXmuCoreIndex;
	}
	
	public ParserRule getXmuCoreIndexRule() {
		return getXmuCoreIndexAccess().getRule();
	}
	
	//IndexPart:
	//	signature=[IndexDefinition|ValidID] '<' sourceKeys+=ValidID (',' sourceKeys+=ValidID)* '|' viewKeys+=ValidID (','
	//	viewKeys+=ValidID)* '>';
	public IndexPartElements getIndexPartAccess() {
		return pIndexPart;
	}
	
	public ParserRule getIndexPartRule() {
		return getIndexPartAccess().getRule();
	}
	
	//XmuCoreForEachMatchSource:
	//	'foreach' typeIndicator=TypeIndicator? pattern=Pattern 'do' body=XmuCoreStatement;
	public XmuCoreForEachMatchSourceElements getXmuCoreForEachMatchSourceAccess() {
		return pXmuCoreForEachMatchSource;
	}
	
	public ParserRule getXmuCoreForEachMatchSourceRule() {
		return getXmuCoreForEachMatchSourceAccess().getRule();
	}
	
	//ContextAwareCondition:
	//	condition=XExpression;
	public ContextAwareConditionElements getContextAwareConditionAccess() {
		return pContextAwareCondition;
	}
	
	public ParserRule getContextAwareConditionRule() {
		return getContextAwareConditionAccess().getRule();
	}
	
	//ContextAwareUnidirectionalAction:
	//	action=XBlockExpression;
	public ContextAwareUnidirectionalActionElements getContextAwareUnidirectionalActionAccess() {
		return pContextAwareUnidirectionalAction;
	}
	
	public ParserRule getContextAwareUnidirectionalActionRule() {
		return getContextAwareUnidirectionalActionAccess().getRule();
	}
	
	//BiGULStatement:
	//	BiGULReplace | BiGULSkip | CustomizedBiGULReference;
	public BiGULStatementElements getBiGULStatementAccess() {
		return pBiGULStatement;
	}
	
	public ParserRule getBiGULStatementRule() {
		return getBiGULStatementAccess().getRule();
	}
	
	//BiGULReplace:
	//	{BiGULReplace} => 'replace';
	public BiGULReplaceElements getBiGULReplaceAccess() {
		return pBiGULReplace;
	}
	
	public ParserRule getBiGULReplaceRule() {
		return getBiGULReplaceAccess().getRule();
	}
	
	//BiGULSkip:
	//	{BiGULSkip} => 'skip';
	public BiGULSkipElements getBiGULSkipAccess() {
		return pBiGULSkip;
	}
	
	public ParserRule getBiGULSkipRule() {
		return getBiGULSkipAccess().getRule();
	}
	
	//CustomizedBiGULReference:
	//	function=[CustomizedBiGULDefinition|ValidID];
	public CustomizedBiGULReferenceElements getCustomizedBiGULReferenceAccess() {
		return pCustomizedBiGULReference;
	}
	
	public ParserRule getCustomizedBiGULReferenceRule() {
		return getCustomizedBiGULReferenceAccess().getRule();
	}
	
	//@Override
	//ValidID:
	//	ID | 'index' | 'align' | 'match' | 'int' | 'String' | 'boolean' | 'type' | 'source' | 'view' | 'get' | 'put' |
	//	'context';
	public ValidIDElements getValidIDAccess() {
		return pValidID;
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//@Override
	//XPrimaryExpression xbase::XExpression:
	//	ModificationExpressionBlock
	//	| ModificationExpression
	//	| ContextExpression
	//	| NewInstanceExpression
	//	| AllInstanceExpression
	//	//	| MatchExpression
	//	| super;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return pXPrimaryExpression;
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//ContextExpression:
	//	ContextPrimaryExpression ({NavigationExpression.host=current} '.' navOp=('@' | '@@') pathName=ValidID)*;
	public ContextExpressionElements getContextExpressionAccess() {
		return pContextExpression;
	}
	
	public ParserRule getContextExpressionRule() {
		return getContextExpressionAccess().getRule();
	}
	
	//ContextPrimaryExpression:
	//	ContextVarExpression;
	public ContextPrimaryExpressionElements getContextPrimaryExpressionAccess() {
		return pContextPrimaryExpression;
	}
	
	public ParserRule getContextPrimaryExpressionRule() {
		return getContextPrimaryExpressionAccess().getRule();
	}
	
	//ContextVarExpression ContextPrimaryExpression:
	//	{ContextVarExpression} name=ValidID '@' side=SideEnum | {ExpressionConversion} '@' side=SideEnum ':'
	//	metamodel=[ImportSection|ValidID] '!' type=[ecore::EClass|ValidID] many?='[]'? '(' expression=XExpression ')';
	public ContextVarExpressionElements getContextVarExpressionAccess() {
		return pContextVarExpression;
	}
	
	public ParserRule getContextVarExpressionRule() {
		return getContextVarExpressionAccess().getRule();
	}
	
	//NewInstanceExpression:
	//	'new' type=AnnotatedType (=> '[' size=XExpression ']' | => '(' sourceValue=XExpression ',' targetValue=XExpression
	//	')')?;
	public NewInstanceExpressionElements getNewInstanceExpressionAccess() {
		return pNewInstanceExpression;
	}
	
	public ParserRule getNewInstanceExpressionRule() {
		return getNewInstanceExpressionAccess().getRule();
	}
	
	//AnnotatedType:
	//	'@' side=SideEnum ':' metamodel=[ImportSection|ValidID] '!' type=[ecore::EClass|ValidID] (=> '::'
	//	feature=[ecore::EStructuralFeature|ValidID])?;
	public AnnotatedTypeElements getAnnotatedTypeAccess() {
		return pAnnotatedType;
	}
	
	public ParserRule getAnnotatedTypeRule() {
		return getAnnotatedTypeAccess().getRule();
	}
	
	//AllInstanceExpression:
	//	type=AnnotatedType '.' 'allInstances';
	public AllInstanceExpressionElements getAllInstanceExpressionAccess() {
		return pAllInstanceExpression;
	}
	
	public ParserRule getAllInstanceExpressionRule() {
		return getAllInstanceExpressionAccess().getRule();
	}
	
	//enum SideEnum:
	//	source | view | context;
	public SideEnumElements getSideEnumAccess() {
		return eSideEnum;
	}
	
	public EnumRule getSideEnumRule() {
		return getSideEnumAccess().getRule();
	}
	
	//ModificationExpressionBlock xbase::XExpression:
	//	{ModificationExpressionBlock} 'begin' (expressions+=XExpression ';'?)* 'end';
	public ModificationExpressionBlockElements getModificationExpressionBlockAccess() {
		return pModificationExpressionBlock;
	}
	
	public ParserRule getModificationExpressionBlockRule() {
		return getModificationExpressionBlockAccess().getRule();
	}
	
	//ModificationExpression:
	//	EnforcementExpression | DeleteElementExpression | InsertElementExpression | MatchExpression;
	public ModificationExpressionElements getModificationExpressionAccess() {
		return pModificationExpression;
	}
	
	public ParserRule getModificationExpressionRule() {
		return getModificationExpressionAccess().getRule();
	}
	
	//EnforcementExpression:
	//	'enforce' pattern=Pattern ('{' valueMappings+=ValueMapping (',' valueMappings+=ValueMapping)* '}')? ';';
	public EnforcementExpressionElements getEnforcementExpressionAccess() {
		return pEnforcementExpression;
	}
	
	public ParserRule getEnforcementExpressionRule() {
		return getEnforcementExpressionAccess().getRule();
	}
	
	//MatchExpression:
	//	'find' pattern=Pattern ('{' valueMappings+=ValueMapping (',' valueMappings+=ValueMapping)* '}')? (=> 'then'
	//	then=XBlockExpression)? (=> 'otherwise' otherwise=XBlockExpression)?
	//	';';
	public MatchExpressionElements getMatchExpressionAccess() {
		return pMatchExpression;
	}
	
	public ParserRule getMatchExpressionRule() {
		return getMatchExpressionAccess().getRule();
	}
	
	//DeleteElementExpression:
	//	=> 'delete' element=XExpression ';';
	public DeleteElementExpressionElements getDeleteElementExpressionAccess() {
		return pDeleteElementExpression;
	}
	
	public ParserRule getDeleteElementExpressionRule() {
		return getDeleteElementExpressionAccess().getRule();
	}
	
	//InsertElementExpression:
	//	=> 'insert' element=XExpression (position=('before' | 'after') anchor=XExpression | position='first')? ';';
	public InsertElementExpressionElements getInsertElementExpressionAccess() {
		return pInsertElementExpression;
	}
	
	public ParserRule getInsertElementExpressionRule() {
		return getInsertElementExpressionAccess().getRule();
	}
	
	//ValueMapping:
	//	varName=ValidID '<-' expression=XExpression;
	public ValueMappingElements getValueMappingAccess() {
		return pValueMapping;
	}
	
	public ParserRule getValueMappingRule() {
		return getValueMappingAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	super::XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXbaseXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXbaseXPrimaryExpressionRule() {
		return getXbaseXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=super::ValidID) |
	//	name=super::ValidID) ('=' right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=super::ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=super::ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	super::ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//	super::ValidID (=> '.' super::ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */ StaticQualifier:
	//	(super::ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.')
	//	type=[JvmType|super::ValidID] (=> '<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)*
	//	'>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=super::ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=super::ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(super::ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
