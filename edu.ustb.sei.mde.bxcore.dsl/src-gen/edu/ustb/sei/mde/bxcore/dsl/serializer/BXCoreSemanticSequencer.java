/*
 * generated by Xtext 2.18.0.M3
 */
package edu.ustb.sei.mde.bxcore.dsl.serializer;

import com.google.inject.Inject;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.AllInstanceExpression;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.AnnotatedType;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXCorePackage;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXFunctionDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXProgram;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BiGULReplace;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BiGULSkip;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextAwareCondition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextAwareDerivationAction;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextAwareUnidirectionalAction;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextVarExpression;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.Conversion;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.CustomizedBiGULDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.CustomizedBiGULReference;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.DashedPathType;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.DashedPathTypeSegment;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.DataSlot;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.DefinedContextTypeRef;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.DeleteElementExpression;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.EcoreTypeRef;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.EnforcementExpression;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ExpressionConversion;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.FeatureTypeRef;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.HelperDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ImportSection;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.IndexDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.IndexPart;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.InsertElementExpression;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.MatchExpression;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ModificationExpressionBlock;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.NavigationExpression;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.NewInstanceExpression;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.OrderedTupleTypeLiteral;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternDefinitionReference;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternEdge;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternNode;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternNodeRef;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternPathEdge;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternTypeLiteral;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.PredefinedTypeLiteral;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeIndicator;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeVar;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.UnorderedTupleTypeLiteral;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ValueMapping;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.VarMapping;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreAlign;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreContextSource;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreDependencyView;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreDeriveSource;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreExpandSource;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreExpandView;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreForEachMatchSource;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreFork;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreForkBranch;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreFunctionCall;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreGraphReplace;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreIndex;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreMatchSource;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreMatchView;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreParallelComposition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreSwitch;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreSwitchAdaption;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreSwitchBranch;
import edu.ustb.sei.mde.bxcore.dsl.services.BXCoreGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class BXCoreSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private BXCoreGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BXCorePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BXCorePackage.ALL_INSTANCE_EXPRESSION:
				sequence_AllInstanceExpression(context, (AllInstanceExpression) semanticObject); 
				return; 
			case BXCorePackage.ANNOTATED_TYPE:
				sequence_AnnotatedType(context, (AnnotatedType) semanticObject); 
				return; 
			case BXCorePackage.BX_FUNCTION_DEFINITION:
				sequence_BXFunctionDefinition(context, (BXFunctionDefinition) semanticObject); 
				return; 
			case BXCorePackage.BX_PROGRAM:
				sequence_BXProgram(context, (BXProgram) semanticObject); 
				return; 
			case BXCorePackage.BI_GUL_REPLACE:
				sequence_BiGULReplace(context, (BiGULReplace) semanticObject); 
				return; 
			case BXCorePackage.BI_GUL_SKIP:
				sequence_BiGULSkip(context, (BiGULSkip) semanticObject); 
				return; 
			case BXCorePackage.CONTEXT_AWARE_CONDITION:
				sequence_ContextAwareCondition(context, (ContextAwareCondition) semanticObject); 
				return; 
			case BXCorePackage.CONTEXT_AWARE_DERIVATION_ACTION:
				sequence_ContextAwareDerivationAction(context, (ContextAwareDerivationAction) semanticObject); 
				return; 
			case BXCorePackage.CONTEXT_AWARE_UNIDIRECTIONAL_ACTION:
				sequence_ContextAwareUnidirectionalAction(context, (ContextAwareUnidirectionalAction) semanticObject); 
				return; 
			case BXCorePackage.CONTEXT_VAR_EXPRESSION:
				sequence_ContextVarExpression(context, (ContextVarExpression) semanticObject); 
				return; 
			case BXCorePackage.CONVERSION:
				sequence_Conversion(context, (Conversion) semanticObject); 
				return; 
			case BXCorePackage.CUSTOMIZED_BI_GUL_DEFINITION:
				sequence_CustomizedBiGULDefinition(context, (CustomizedBiGULDefinition) semanticObject); 
				return; 
			case BXCorePackage.CUSTOMIZED_BI_GUL_REFERENCE:
				sequence_CustomizedBiGULReference(context, (CustomizedBiGULReference) semanticObject); 
				return; 
			case BXCorePackage.DASHED_PATH_TYPE:
				sequence_DashedPathType(context, (DashedPathType) semanticObject); 
				return; 
			case BXCorePackage.DASHED_PATH_TYPE_SEGMENT:
				sequence_DashedPathTypeSegment(context, (DashedPathTypeSegment) semanticObject); 
				return; 
			case BXCorePackage.DATA_SLOT:
				sequence_DataSlot(context, (DataSlot) semanticObject); 
				return; 
			case BXCorePackage.DEFINED_CONTEXT_TYPE_REF:
				sequence_ContextTypeRef(context, (DefinedContextTypeRef) semanticObject); 
				return; 
			case BXCorePackage.DELETE_ELEMENT_EXPRESSION:
				sequence_DeleteElementExpression(context, (DeleteElementExpression) semanticObject); 
				return; 
			case BXCorePackage.ECORE_TYPE_REF:
				sequence_TypeRef(context, (EcoreTypeRef) semanticObject); 
				return; 
			case BXCorePackage.ENFORCEMENT_EXPRESSION:
				sequence_EnforcementExpression(context, (EnforcementExpression) semanticObject); 
				return; 
			case BXCorePackage.EXPRESSION_CONVERSION:
				sequence_ContextVarExpression(context, (ExpressionConversion) semanticObject); 
				return; 
			case BXCorePackage.FEATURE_TYPE_REF:
				sequence_TypeRef(context, (FeatureTypeRef) semanticObject); 
				return; 
			case BXCorePackage.HELPER_DEFINITION:
				sequence_HelperDefinition(context, (HelperDefinition) semanticObject); 
				return; 
			case BXCorePackage.IMPORT_SECTION:
				sequence_ImportSection(context, (ImportSection) semanticObject); 
				return; 
			case BXCorePackage.INDEX_DEFINITION:
				sequence_IndexDefinition(context, (IndexDefinition) semanticObject); 
				return; 
			case BXCorePackage.INDEX_PART:
				sequence_IndexPart(context, (IndexPart) semanticObject); 
				return; 
			case BXCorePackage.INSERT_ELEMENT_EXPRESSION:
				sequence_InsertElementExpression(context, (InsertElementExpression) semanticObject); 
				return; 
			case BXCorePackage.MATCH_EXPRESSION:
				sequence_MatchExpression(context, (MatchExpression) semanticObject); 
				return; 
			case BXCorePackage.MODIFICATION_EXPRESSION_BLOCK:
				sequence_ModificationExpressionBlock(context, (ModificationExpressionBlock) semanticObject); 
				return; 
			case BXCorePackage.NAVIGATION_EXPRESSION:
				sequence_ContextExpression(context, (NavigationExpression) semanticObject); 
				return; 
			case BXCorePackage.NEW_INSTANCE_EXPRESSION:
				sequence_NewInstanceExpression(context, (NewInstanceExpression) semanticObject); 
				return; 
			case BXCorePackage.ORDERED_TUPLE_TYPE_LITERAL:
				sequence_OrderedTupleTypeLiteral(context, (OrderedTupleTypeLiteral) semanticObject); 
				return; 
			case BXCorePackage.PATTERN_DEFINITION:
				sequence_PatternDefinition(context, (PatternDefinition) semanticObject); 
				return; 
			case BXCorePackage.PATTERN_DEFINITION_REFERENCE:
				sequence_PatternDefinitionReference(context, (PatternDefinitionReference) semanticObject); 
				return; 
			case BXCorePackage.PATTERN_EDGE:
				sequence_PatternEdge(context, (PatternEdge) semanticObject); 
				return; 
			case BXCorePackage.PATTERN_NODE:
				sequence_PatternNode(context, (PatternNode) semanticObject); 
				return; 
			case BXCorePackage.PATTERN_NODE_REF:
				sequence_PatternNodeRef(context, (PatternNodeRef) semanticObject); 
				return; 
			case BXCorePackage.PATTERN_PATH_EDGE:
				sequence_PatternPathEdge(context, (PatternPathEdge) semanticObject); 
				return; 
			case BXCorePackage.PATTERN_TYPE_LITERAL:
				sequence_PatternTypeLiteral(context, (PatternTypeLiteral) semanticObject); 
				return; 
			case BXCorePackage.PREDEFINED_TYPE_LITERAL:
				sequence_PredefinedTypeLiteral(context, (PredefinedTypeLiteral) semanticObject); 
				return; 
			case BXCorePackage.TYPE_DEFINITION:
				sequence_TypeDefinition(context, (TypeDefinition) semanticObject); 
				return; 
			case BXCorePackage.TYPE_INDICATOR:
				sequence_TypeIndicator(context, (TypeIndicator) semanticObject); 
				return; 
			case BXCorePackage.TYPE_VAR:
				if (rule == grammarAccess.getTypeVarWithInitializerRule()) {
					sequence_TypeVarWithInitializer(context, (TypeVar) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeVarRule()) {
					sequence_TypeVarWithInitializer_TypeVarWithoutInitializer(context, (TypeVar) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeVarWithoutInitializerRule()) {
					sequence_TypeVarWithoutInitializer(context, (TypeVar) semanticObject); 
					return; 
				}
				else break;
			case BXCorePackage.UNORDERED_TUPLE_TYPE_LITERAL:
				if (rule == grammarAccess.getUnorderedTupleTypeLiteralWithInitializerRule()) {
					sequence_UnorderedTupleTypeLiteralWithInitializer(context, (UnorderedTupleTypeLiteral) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeLiteralRule()
						|| rule == grammarAccess.getTupleTypeLiteralRule()
						|| rule == grammarAccess.getUnorderedTupleTypeLiteralRule()
						|| rule == grammarAccess.getContextTypeRefRule()) {
					sequence_UnorderedTupleTypeLiteral(context, (UnorderedTupleTypeLiteral) semanticObject); 
					return; 
				}
				else break;
			case BXCorePackage.VALUE_MAPPING:
				sequence_ValueMapping(context, (ValueMapping) semanticObject); 
				return; 
			case BXCorePackage.VAR_MAPPING:
				sequence_VarMapping(context, (VarMapping) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_ALIGN:
				sequence_XmuCoreAlign(context, (XmuCoreAlign) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_CONTEXT_SOURCE:
				sequence_XmuCoreContextSource(context, (XmuCoreContextSource) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_DEPENDENCY_VIEW:
				sequence_XmuCoreDependencyView(context, (XmuCoreDependencyView) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_DERIVE_SOURCE:
				sequence_XmuCoreDeriveSource(context, (XmuCoreDeriveSource) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_EXPAND_SOURCE:
				sequence_XmuCoreExpandSource(context, (XmuCoreExpandSource) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_EXPAND_VIEW:
				sequence_XmuCoreExpandView(context, (XmuCoreExpandView) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_FOR_EACH_MATCH_SOURCE:
				sequence_XmuCoreForEachMatchSource(context, (XmuCoreForEachMatchSource) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_FORK:
				sequence_XmuCoreFork(context, (XmuCoreFork) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_FORK_BRANCH:
				sequence_XmuCoreForkBranch(context, (XmuCoreForkBranch) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_FUNCTION_CALL:
				sequence_XmuCoreFunctionCall(context, (XmuCoreFunctionCall) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_GRAPH_REPLACE:
				sequence_XmuCoreGraphReplace(context, (XmuCoreGraphReplace) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_INDEX:
				sequence_XmuCoreIndex(context, (XmuCoreIndex) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_MATCH_SOURCE:
				sequence_XmuCoreMatchSource(context, (XmuCoreMatchSource) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_MATCH_VIEW:
				sequence_XmuCoreMatchView(context, (XmuCoreMatchView) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_PARALLEL_COMPOSITION:
				sequence_XmuCoreParallelComposition(context, (XmuCoreParallelComposition) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_SWITCH:
				sequence_XmuCoreSwitch(context, (XmuCoreSwitch) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_SWITCH_ADAPTION:
				sequence_XmuCoreSwitchAdaption(context, (XmuCoreSwitchAdaption) semanticObject); 
				return; 
			case BXCorePackage.XMU_CORE_SWITCH_BRANCH:
				sequence_XmuCoreSwitchBranch(context, (XmuCoreSwitchBranch) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXbaseXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXbaseXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     XPrimaryExpression returns AllInstanceExpression
	 *     AllInstanceExpression returns AllInstanceExpression
	 *     XExpression returns AllInstanceExpression
	 *     XAssignment returns AllInstanceExpression
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns AllInstanceExpression
	 *     XOrExpression returns AllInstanceExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns AllInstanceExpression
	 *     XAndExpression returns AllInstanceExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns AllInstanceExpression
	 *     XEqualityExpression returns AllInstanceExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns AllInstanceExpression
	 *     XRelationalExpression returns AllInstanceExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns AllInstanceExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns AllInstanceExpression
	 *     XOtherOperatorExpression returns AllInstanceExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns AllInstanceExpression
	 *     XAdditiveExpression returns AllInstanceExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns AllInstanceExpression
	 *     XMultiplicativeExpression returns AllInstanceExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns AllInstanceExpression
	 *     XUnaryOperation returns AllInstanceExpression
	 *     XCastedExpression returns AllInstanceExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns AllInstanceExpression
	 *     XPostfixOperation returns AllInstanceExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns AllInstanceExpression
	 *     XMemberFeatureCall returns AllInstanceExpression
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns AllInstanceExpression
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns AllInstanceExpression
	 *     XPrimaryExpression returns AllInstanceExpression
	 *     XParenthesizedExpression returns AllInstanceExpression
	 *     XExpressionOrVarDeclaration returns AllInstanceExpression
	 *
	 * Constraint:
	 *     type=AnnotatedType
	 */
	protected void sequence_AllInstanceExpression(ISerializationContext context, AllInstanceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.ALL_INSTANCE_EXPRESSION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.ALL_INSTANCE_EXPRESSION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAllInstanceExpressionAccess().getTypeAnnotatedTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AnnotatedType returns AnnotatedType
	 *
	 * Constraint:
	 *     (side=SideEnum metamodel=[ImportSection|ValidID] type=[EClass|ValidID] feature=[EStructuralFeature|ValidID]?)
	 */
	protected void sequence_AnnotatedType(ISerializationContext context, AnnotatedType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Definition returns BXFunctionDefinition
	 *     BXFunctionDefinition returns BXFunctionDefinition
	 *
	 * Constraint:
	 *     (name=ValidID typeIndicator=TypeIndicator? statement=XmuCoreStatement)
	 */
	protected void sequence_BXFunctionDefinition(ISerializationContext context, BXFunctionDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BXProgram returns BXProgram
	 *
	 * Constraint:
	 *     (
	 *         (imports+=ImportSection+ ((javaImports=XImportSection definitions+=Definition+) | definitions+=Definition+)) | 
	 *         (((imports+=ImportSection+ javaImports=XImportSection) | javaImports=XImportSection)? slots+=DataSlot+ definitions+=Definition+) | 
	 *         (javaImports=XImportSection definitions+=Definition+) | 
	 *         definitions+=Definition+
	 *     )?
	 */
	protected void sequence_BXProgram(ISerializationContext context, BXProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BiGULStatement returns BiGULReplace
	 *     BiGULReplace returns BiGULReplace
	 *
	 * Constraint:
	 *     {BiGULReplace}
	 */
	protected void sequence_BiGULReplace(ISerializationContext context, BiGULReplace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BiGULStatement returns BiGULSkip
	 *     BiGULSkip returns BiGULSkip
	 *
	 * Constraint:
	 *     {BiGULSkip}
	 */
	protected void sequence_BiGULSkip(ISerializationContext context, BiGULSkip semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContextAwareCondition returns ContextAwareCondition
	 *
	 * Constraint:
	 *     condition=XExpression
	 */
	protected void sequence_ContextAwareCondition(ISerializationContext context, ContextAwareCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.CONTEXT_AWARE_CONDITION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.CONTEXT_AWARE_CONDITION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContextAwareConditionAccess().getConditionXExpressionParserRuleCall_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContextAwareAction returns ContextAwareDerivationAction
	 *     ContextAwareDerivationAction returns ContextAwareDerivationAction
	 *
	 * Constraint:
	 *     body=XExpression
	 */
	protected void sequence_ContextAwareDerivationAction(ISerializationContext context, ContextAwareDerivationAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.CONTEXT_AWARE_DERIVATION_ACTION__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.CONTEXT_AWARE_DERIVATION_ACTION__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContextAwareDerivationActionAccess().getBodyXExpressionParserRuleCall_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContextAwareAction returns ContextAwareUnidirectionalAction
	 *     ContextAwareUnidirectionalAction returns ContextAwareUnidirectionalAction
	 *
	 * Constraint:
	 *     action=XBlockExpression
	 */
	protected void sequence_ContextAwareUnidirectionalAction(ISerializationContext context, ContextAwareUnidirectionalAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.CONTEXT_AWARE_UNIDIRECTIONAL_ACTION__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.CONTEXT_AWARE_UNIDIRECTIONAL_ACTION__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContextAwareUnidirectionalActionAccess().getActionXBlockExpressionParserRuleCall_0(), semanticObject.getAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XPrimaryExpression returns NavigationExpression
	 *     ContextExpression returns NavigationExpression
	 *     ContextExpression.NavigationExpression_1_0 returns NavigationExpression
	 *     XExpression returns NavigationExpression
	 *     XAssignment returns NavigationExpression
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns NavigationExpression
	 *     XOrExpression returns NavigationExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns NavigationExpression
	 *     XAndExpression returns NavigationExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns NavigationExpression
	 *     XEqualityExpression returns NavigationExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns NavigationExpression
	 *     XRelationalExpression returns NavigationExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns NavigationExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns NavigationExpression
	 *     XOtherOperatorExpression returns NavigationExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns NavigationExpression
	 *     XAdditiveExpression returns NavigationExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns NavigationExpression
	 *     XMultiplicativeExpression returns NavigationExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns NavigationExpression
	 *     XUnaryOperation returns NavigationExpression
	 *     XCastedExpression returns NavigationExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns NavigationExpression
	 *     XPostfixOperation returns NavigationExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns NavigationExpression
	 *     XMemberFeatureCall returns NavigationExpression
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns NavigationExpression
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns NavigationExpression
	 *     XPrimaryExpression returns NavigationExpression
	 *     XParenthesizedExpression returns NavigationExpression
	 *     XExpressionOrVarDeclaration returns NavigationExpression
	 *
	 * Constraint:
	 *     (host=ContextExpression_NavigationExpression_1_0 (navOp='@' | navOp='@@') pathName=ValidID)
	 */
	protected void sequence_ContextExpression(ISerializationContext context, NavigationExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContextTypeRef returns DefinedContextTypeRef
	 *
	 * Constraint:
	 *     type=[TypeDefinition|ValidID]
	 */
	protected void sequence_ContextTypeRef(ISerializationContext context, DefinedContextTypeRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.DEFINED_CONTEXT_TYPE_REF__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.DEFINED_CONTEXT_TYPE_REF__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContextTypeRefAccess().getTypeTypeDefinitionValidIDParserRuleCall_0_1_0_1(), semanticObject.eGet(BXCorePackage.Literals.DEFINED_CONTEXT_TYPE_REF__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XPrimaryExpression returns ContextVarExpression
	 *     ContextExpression returns ContextVarExpression
	 *     ContextExpression.NavigationExpression_1_0 returns ContextVarExpression
	 *     ContextPrimaryExpression returns ContextVarExpression
	 *     ContextVarExpression returns ContextVarExpression
	 *     XExpression returns ContextVarExpression
	 *     XAssignment returns ContextVarExpression
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns ContextVarExpression
	 *     XOrExpression returns ContextVarExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns ContextVarExpression
	 *     XAndExpression returns ContextVarExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns ContextVarExpression
	 *     XEqualityExpression returns ContextVarExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns ContextVarExpression
	 *     XRelationalExpression returns ContextVarExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns ContextVarExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns ContextVarExpression
	 *     XOtherOperatorExpression returns ContextVarExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns ContextVarExpression
	 *     XAdditiveExpression returns ContextVarExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns ContextVarExpression
	 *     XMultiplicativeExpression returns ContextVarExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns ContextVarExpression
	 *     XUnaryOperation returns ContextVarExpression
	 *     XCastedExpression returns ContextVarExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns ContextVarExpression
	 *     XPostfixOperation returns ContextVarExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns ContextVarExpression
	 *     XMemberFeatureCall returns ContextVarExpression
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns ContextVarExpression
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns ContextVarExpression
	 *     XPrimaryExpression returns ContextVarExpression
	 *     XParenthesizedExpression returns ContextVarExpression
	 *     XExpressionOrVarDeclaration returns ContextVarExpression
	 *
	 * Constraint:
	 *     (name=ValidID side=SideEnum)
	 */
	protected void sequence_ContextVarExpression(ISerializationContext context, ContextVarExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.CONTEXT_VAR_EXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.CONTEXT_VAR_EXPRESSION__NAME));
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.CONTEXT_PRIMARY_EXPRESSION__SIDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.CONTEXT_PRIMARY_EXPRESSION__SIDE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContextVarExpressionAccess().getNameValidIDParserRuleCall_0_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getContextVarExpressionAccess().getSideSideEnumEnumRuleCall_0_3_0(), semanticObject.getSide());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XPrimaryExpression returns ExpressionConversion
	 *     ContextExpression returns ExpressionConversion
	 *     ContextExpression.NavigationExpression_1_0 returns ExpressionConversion
	 *     ContextPrimaryExpression returns ExpressionConversion
	 *     ContextVarExpression returns ExpressionConversion
	 *     XExpression returns ExpressionConversion
	 *     XAssignment returns ExpressionConversion
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns ExpressionConversion
	 *     XOrExpression returns ExpressionConversion
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns ExpressionConversion
	 *     XAndExpression returns ExpressionConversion
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns ExpressionConversion
	 *     XEqualityExpression returns ExpressionConversion
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns ExpressionConversion
	 *     XRelationalExpression returns ExpressionConversion
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns ExpressionConversion
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns ExpressionConversion
	 *     XOtherOperatorExpression returns ExpressionConversion
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns ExpressionConversion
	 *     XAdditiveExpression returns ExpressionConversion
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns ExpressionConversion
	 *     XMultiplicativeExpression returns ExpressionConversion
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns ExpressionConversion
	 *     XUnaryOperation returns ExpressionConversion
	 *     XCastedExpression returns ExpressionConversion
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns ExpressionConversion
	 *     XPostfixOperation returns ExpressionConversion
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns ExpressionConversion
	 *     XMemberFeatureCall returns ExpressionConversion
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns ExpressionConversion
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns ExpressionConversion
	 *     XPrimaryExpression returns ExpressionConversion
	 *     XParenthesizedExpression returns ExpressionConversion
	 *     XExpressionOrVarDeclaration returns ExpressionConversion
	 *
	 * Constraint:
	 *     (side=SideEnum metamodel=[ImportSection|ValidID] type=[EClass|ValidID] many?='[]'? expression=XExpression)
	 */
	protected void sequence_ContextVarExpression(ISerializationContext context, ExpressionConversion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Conversion returns Conversion
	 *
	 * Constraint:
	 *     (bigul=BiGULStatement source+=ValidID source+=ValidID* view+=ValidID view+=ValidID*)
	 */
	protected void sequence_Conversion(ISerializationContext context, Conversion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Definition returns CustomizedBiGULDefinition
	 *     CustomizedBiGULDefinition returns CustomizedBiGULDefinition
	 *
	 * Constraint:
	 *     (
	 *         name=ValidID 
	 *         sourceParams+=JvmFormalParameter 
	 *         sourceParams+=JvmFormalParameter* 
	 *         viewParams+=JvmFormalParameter 
	 *         viewParams+=JvmFormalParameter* 
	 *         (get=XExpression | put=XExpression)+
	 *     )
	 */
	protected void sequence_CustomizedBiGULDefinition(ISerializationContext context, CustomizedBiGULDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BiGULStatement returns CustomizedBiGULReference
	 *     CustomizedBiGULReference returns CustomizedBiGULReference
	 *
	 * Constraint:
	 *     function=[CustomizedBiGULDefinition|ValidID]
	 */
	protected void sequence_CustomizedBiGULReference(ISerializationContext context, CustomizedBiGULReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.CUSTOMIZED_BI_GUL_REFERENCE__FUNCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.CUSTOMIZED_BI_GUL_REFERENCE__FUNCTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCustomizedBiGULReferenceAccess().getFunctionCustomizedBiGULDefinitionValidIDParserRuleCall_0_1(), semanticObject.eGet(BXCorePackage.Literals.CUSTOMIZED_BI_GUL_REFERENCE__FUNCTION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DashedPathTypeSegment returns DashedPathTypeSegment
	 *
	 * Constraint:
	 *     (types+=[EStructuralFeature|ValidID] types+=[EStructuralFeature|ValidID]* (repeat='?' | repeat='*' | repeat='+')?)
	 */
	protected void sequence_DashedPathTypeSegment(ISerializationContext context, DashedPathTypeSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DashedPathType returns DashedPathType
	 *
	 * Constraint:
	 *     (segment=DashedPathTypeSegment next=DashedPathType?)
	 */
	protected void sequence_DashedPathType(ISerializationContext context, DashedPathType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataSlot returns DataSlot
	 *
	 * Constraint:
	 *     (var=FullJvmFormalParameter initializer=XExpression?)
	 */
	protected void sequence_DataSlot(ISerializationContext context, DataSlot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XPrimaryExpression returns DeleteElementExpression
	 *     ModificationExpression returns DeleteElementExpression
	 *     DeleteElementExpression returns DeleteElementExpression
	 *     XExpression returns DeleteElementExpression
	 *     XAssignment returns DeleteElementExpression
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns DeleteElementExpression
	 *     XOrExpression returns DeleteElementExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns DeleteElementExpression
	 *     XAndExpression returns DeleteElementExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns DeleteElementExpression
	 *     XEqualityExpression returns DeleteElementExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns DeleteElementExpression
	 *     XRelationalExpression returns DeleteElementExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns DeleteElementExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns DeleteElementExpression
	 *     XOtherOperatorExpression returns DeleteElementExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns DeleteElementExpression
	 *     XAdditiveExpression returns DeleteElementExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns DeleteElementExpression
	 *     XMultiplicativeExpression returns DeleteElementExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns DeleteElementExpression
	 *     XUnaryOperation returns DeleteElementExpression
	 *     XCastedExpression returns DeleteElementExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns DeleteElementExpression
	 *     XPostfixOperation returns DeleteElementExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns DeleteElementExpression
	 *     XMemberFeatureCall returns DeleteElementExpression
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns DeleteElementExpression
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns DeleteElementExpression
	 *     XPrimaryExpression returns DeleteElementExpression
	 *     XParenthesizedExpression returns DeleteElementExpression
	 *     XExpressionOrVarDeclaration returns DeleteElementExpression
	 *
	 * Constraint:
	 *     element=XExpression
	 */
	protected void sequence_DeleteElementExpression(ISerializationContext context, DeleteElementExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.DELETE_ELEMENT_EXPRESSION__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.DELETE_ELEMENT_EXPRESSION__ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeleteElementExpressionAccess().getElementXExpressionParserRuleCall_1_0(), semanticObject.getElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XPrimaryExpression returns EnforcementExpression
	 *     ModificationExpression returns EnforcementExpression
	 *     EnforcementExpression returns EnforcementExpression
	 *     XExpression returns EnforcementExpression
	 *     XAssignment returns EnforcementExpression
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns EnforcementExpression
	 *     XOrExpression returns EnforcementExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns EnforcementExpression
	 *     XAndExpression returns EnforcementExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns EnforcementExpression
	 *     XEqualityExpression returns EnforcementExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns EnforcementExpression
	 *     XRelationalExpression returns EnforcementExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns EnforcementExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns EnforcementExpression
	 *     XOtherOperatorExpression returns EnforcementExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns EnforcementExpression
	 *     XAdditiveExpression returns EnforcementExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns EnforcementExpression
	 *     XMultiplicativeExpression returns EnforcementExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns EnforcementExpression
	 *     XUnaryOperation returns EnforcementExpression
	 *     XCastedExpression returns EnforcementExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns EnforcementExpression
	 *     XPostfixOperation returns EnforcementExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns EnforcementExpression
	 *     XMemberFeatureCall returns EnforcementExpression
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns EnforcementExpression
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns EnforcementExpression
	 *     XPrimaryExpression returns EnforcementExpression
	 *     XParenthesizedExpression returns EnforcementExpression
	 *     XExpressionOrVarDeclaration returns EnforcementExpression
	 *
	 * Constraint:
	 *     (pattern=Pattern (valueMappings+=ValueMapping valueMappings+=ValueMapping*)?)
	 */
	protected void sequence_EnforcementExpression(ISerializationContext context, EnforcementExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Definition returns HelperDefinition
	 *     HelperDefinition returns HelperDefinition
	 *
	 * Constraint:
	 *     (type=JvmTypeReference name=ValidID (parameters+=JvmFormalParameter parameters+=JvmFormalParameter*)? body=XBlockExpression)
	 */
	protected void sequence_HelperDefinition(ISerializationContext context, HelperDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImportSection returns ImportSection
	 *
	 * Constraint:
	 *     (metamodel=[EPackage|STRING] shortName=ValidID)
	 */
	protected void sequence_ImportSection(ISerializationContext context, ImportSection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.IMPORT_SECTION__METAMODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.IMPORT_SECTION__METAMODEL));
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.IMPORT_SECTION__SHORT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.IMPORT_SECTION__SHORT_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportSectionAccess().getMetamodelEPackageSTRINGTerminalRuleCall_1_0_1(), semanticObject.eGet(BXCorePackage.Literals.IMPORT_SECTION__METAMODEL, false));
		feeder.accept(grammarAccess.getImportSectionAccess().getShortNameValidIDParserRuleCall_3_0(), semanticObject.getShortName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Definition returns IndexDefinition
	 *     IndexDefinition returns IndexDefinition
	 *
	 * Constraint:
	 *     (name=ValidID sourceType=ContextTypeRef viewType=ContextTypeRef)
	 */
	protected void sequence_IndexDefinition(ISerializationContext context, IndexDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.DEFINITION__NAME));
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.INDEX_DEFINITION__SOURCE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.INDEX_DEFINITION__SOURCE_TYPE));
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.INDEX_DEFINITION__VIEW_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.INDEX_DEFINITION__VIEW_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIndexDefinitionAccess().getNameValidIDParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getIndexDefinitionAccess().getSourceTypeContextTypeRefParserRuleCall_3_0(), semanticObject.getSourceType());
		feeder.accept(grammarAccess.getIndexDefinitionAccess().getViewTypeContextTypeRefParserRuleCall_5_0(), semanticObject.getViewType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IndexPart returns IndexPart
	 *
	 * Constraint:
	 *     (signature=[IndexDefinition|ValidID] sourceKeys+=ValidID sourceKeys+=ValidID* viewKeys+=ValidID viewKeys+=ValidID*)
	 */
	protected void sequence_IndexPart(ISerializationContext context, IndexPart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XPrimaryExpression returns InsertElementExpression
	 *     ModificationExpression returns InsertElementExpression
	 *     InsertElementExpression returns InsertElementExpression
	 *     XExpression returns InsertElementExpression
	 *     XAssignment returns InsertElementExpression
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns InsertElementExpression
	 *     XOrExpression returns InsertElementExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns InsertElementExpression
	 *     XAndExpression returns InsertElementExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns InsertElementExpression
	 *     XEqualityExpression returns InsertElementExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns InsertElementExpression
	 *     XRelationalExpression returns InsertElementExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns InsertElementExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns InsertElementExpression
	 *     XOtherOperatorExpression returns InsertElementExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns InsertElementExpression
	 *     XAdditiveExpression returns InsertElementExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns InsertElementExpression
	 *     XMultiplicativeExpression returns InsertElementExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns InsertElementExpression
	 *     XUnaryOperation returns InsertElementExpression
	 *     XCastedExpression returns InsertElementExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns InsertElementExpression
	 *     XPostfixOperation returns InsertElementExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns InsertElementExpression
	 *     XMemberFeatureCall returns InsertElementExpression
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns InsertElementExpression
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns InsertElementExpression
	 *     XPrimaryExpression returns InsertElementExpression
	 *     XParenthesizedExpression returns InsertElementExpression
	 *     XExpressionOrVarDeclaration returns InsertElementExpression
	 *
	 * Constraint:
	 *     (element=XExpression (((position='before' | position='after') anchor=XExpression) | position='first')?)
	 */
	protected void sequence_InsertElementExpression(ISerializationContext context, InsertElementExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XPrimaryExpression returns MatchExpression
	 *     ModificationExpression returns MatchExpression
	 *     MatchExpression returns MatchExpression
	 *     XExpression returns MatchExpression
	 *     XAssignment returns MatchExpression
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns MatchExpression
	 *     XOrExpression returns MatchExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns MatchExpression
	 *     XAndExpression returns MatchExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns MatchExpression
	 *     XEqualityExpression returns MatchExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns MatchExpression
	 *     XRelationalExpression returns MatchExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns MatchExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns MatchExpression
	 *     XOtherOperatorExpression returns MatchExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns MatchExpression
	 *     XAdditiveExpression returns MatchExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns MatchExpression
	 *     XMultiplicativeExpression returns MatchExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns MatchExpression
	 *     XUnaryOperation returns MatchExpression
	 *     XCastedExpression returns MatchExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns MatchExpression
	 *     XPostfixOperation returns MatchExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns MatchExpression
	 *     XMemberFeatureCall returns MatchExpression
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns MatchExpression
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns MatchExpression
	 *     XPrimaryExpression returns MatchExpression
	 *     XParenthesizedExpression returns MatchExpression
	 *     XExpressionOrVarDeclaration returns MatchExpression
	 *
	 * Constraint:
	 *     (pattern=Pattern (valueMappings+=ValueMapping valueMappings+=ValueMapping*)? then=XBlockExpression? otherwise=XBlockExpression?)
	 */
	protected void sequence_MatchExpression(ISerializationContext context, MatchExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XPrimaryExpression returns ModificationExpressionBlock
	 *     ModificationExpressionBlock returns ModificationExpressionBlock
	 *     XExpression returns ModificationExpressionBlock
	 *     XAssignment returns ModificationExpressionBlock
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns ModificationExpressionBlock
	 *     XOrExpression returns ModificationExpressionBlock
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns ModificationExpressionBlock
	 *     XAndExpression returns ModificationExpressionBlock
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns ModificationExpressionBlock
	 *     XEqualityExpression returns ModificationExpressionBlock
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns ModificationExpressionBlock
	 *     XRelationalExpression returns ModificationExpressionBlock
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns ModificationExpressionBlock
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns ModificationExpressionBlock
	 *     XOtherOperatorExpression returns ModificationExpressionBlock
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns ModificationExpressionBlock
	 *     XAdditiveExpression returns ModificationExpressionBlock
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns ModificationExpressionBlock
	 *     XMultiplicativeExpression returns ModificationExpressionBlock
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns ModificationExpressionBlock
	 *     XUnaryOperation returns ModificationExpressionBlock
	 *     XCastedExpression returns ModificationExpressionBlock
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns ModificationExpressionBlock
	 *     XPostfixOperation returns ModificationExpressionBlock
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns ModificationExpressionBlock
	 *     XMemberFeatureCall returns ModificationExpressionBlock
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns ModificationExpressionBlock
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns ModificationExpressionBlock
	 *     XPrimaryExpression returns ModificationExpressionBlock
	 *     XParenthesizedExpression returns ModificationExpressionBlock
	 *     XExpressionOrVarDeclaration returns ModificationExpressionBlock
	 *
	 * Constraint:
	 *     expressions+=XExpression*
	 */
	protected void sequence_ModificationExpressionBlock(ISerializationContext context, ModificationExpressionBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XPrimaryExpression returns NewInstanceExpression
	 *     NewInstanceExpression returns NewInstanceExpression
	 *     XExpression returns NewInstanceExpression
	 *     XAssignment returns NewInstanceExpression
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns NewInstanceExpression
	 *     XOrExpression returns NewInstanceExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns NewInstanceExpression
	 *     XAndExpression returns NewInstanceExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns NewInstanceExpression
	 *     XEqualityExpression returns NewInstanceExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns NewInstanceExpression
	 *     XRelationalExpression returns NewInstanceExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns NewInstanceExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns NewInstanceExpression
	 *     XOtherOperatorExpression returns NewInstanceExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns NewInstanceExpression
	 *     XAdditiveExpression returns NewInstanceExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns NewInstanceExpression
	 *     XMultiplicativeExpression returns NewInstanceExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns NewInstanceExpression
	 *     XUnaryOperation returns NewInstanceExpression
	 *     XCastedExpression returns NewInstanceExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns NewInstanceExpression
	 *     XPostfixOperation returns NewInstanceExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns NewInstanceExpression
	 *     XMemberFeatureCall returns NewInstanceExpression
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns NewInstanceExpression
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns NewInstanceExpression
	 *     XPrimaryExpression returns NewInstanceExpression
	 *     XParenthesizedExpression returns NewInstanceExpression
	 *     XExpressionOrVarDeclaration returns NewInstanceExpression
	 *
	 * Constraint:
	 *     (type=AnnotatedType (size=XExpression | (sourceValue=XExpression targetValue=XExpression))?)
	 */
	protected void sequence_NewInstanceExpression(ISerializationContext context, NewInstanceExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeLiteral returns OrderedTupleTypeLiteral
	 *     TupleTypeLiteral returns OrderedTupleTypeLiteral
	 *     OrderedTupleTypeLiteral returns OrderedTupleTypeLiteral
	 *     ContextTypeRef returns OrderedTupleTypeLiteral
	 *
	 * Constraint:
	 *     (source=[ImportSection|ValidID] elements+=TypeVarWithoutInitializer elements+=TypeVarWithoutInitializer*)
	 */
	protected void sequence_OrderedTupleTypeLiteral(ISerializationContext context, OrderedTupleTypeLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pattern returns PatternDefinitionReference
	 *     PatternDefinitionReference returns PatternDefinitionReference
	 *
	 * Constraint:
	 *     pattern=[PatternDefinition|ValidID]
	 */
	protected void sequence_PatternDefinitionReference(ISerializationContext context, PatternDefinitionReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.PATTERN_DEFINITION_REFERENCE__PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.PATTERN_DEFINITION_REFERENCE__PATTERN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPatternDefinitionReferenceAccess().getPatternPatternDefinitionValidIDParserRuleCall_0_1(), semanticObject.eGet(BXCorePackage.Literals.PATTERN_DEFINITION_REFERENCE__PATTERN, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Definition returns PatternDefinition
	 *     TypeDefinition returns PatternDefinition
	 *     PatternDefinition returns PatternDefinition
	 *
	 * Constraint:
	 *     (name=ValidID literal=PatternTypeLiteral)
	 */
	protected void sequence_PatternDefinition(ISerializationContext context, PatternDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.DEFINITION__NAME));
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.TYPE_DEFINITION__LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.TYPE_DEFINITION__LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPatternDefinitionAccess().getNameValidIDParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPatternDefinitionAccess().getLiteralPatternTypeLiteralParserRuleCall_3_0(), semanticObject.getLiteral());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractPatternEdge returns PatternEdge
	 *     PatternEdge returns PatternEdge
	 *
	 * Constraint:
	 *     (name=ValidID feature=[EStructuralFeature|ValidID] many?='[]'? operator='=' value=PatternValueCondition)
	 */
	protected void sequence_PatternEdge(ISerializationContext context, PatternEdge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PatternValueCondition returns PatternNodeRef
	 *     PatternNodeRef returns PatternNodeRef
	 *
	 * Constraint:
	 *     node=[PatternNode|ValidID]
	 */
	protected void sequence_PatternNodeRef(ISerializationContext context, PatternNodeRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.PATTERN_NODE_REF__NODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.PATTERN_NODE_REF__NODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPatternNodeRefAccess().getNodePatternNodeValidIDParserRuleCall_0_1(), semanticObject.eGet(BXCorePackage.Literals.PATTERN_NODE_REF__NODE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PatternNode returns PatternNode
	 *     PatternValueCondition returns PatternNode
	 *
	 * Constraint:
	 *     (name=ValidID type=[EClassifier|ValidID] many?='[]'? (edges+=AbstractPatternEdge edges+=AbstractPatternEdge*)?)
	 */
	protected void sequence_PatternNode(ISerializationContext context, PatternNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractPatternEdge returns PatternPathEdge
	 *     PatternPathEdge returns PatternPathEdge
	 *
	 * Constraint:
	 *     (name=ValidID path=DashedPathType many?='[]'? operator='=' value=PatternValueCondition)
	 */
	protected void sequence_PatternPathEdge(ISerializationContext context, PatternPathEdge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeLiteral returns PatternTypeLiteral
	 *     PatternTypeLiteral returns PatternTypeLiteral
	 *     Pattern returns PatternTypeLiteral
	 *
	 * Constraint:
	 *     (
	 *         source=[ImportSection|ValidID] 
	 *         root=PatternNode 
	 *         (additional+=TypeVar additional+=TypeVar*)? 
	 *         filter=ContextAwareCondition? 
	 *         (orderBy=[AbstractPatternEdge|ValidID] ((direction='after' | direction='before') pivot=[TypeVar|ValidID])?)?
	 *     )
	 */
	protected void sequence_PatternTypeLiteral(ISerializationContext context, PatternTypeLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeLiteral returns PredefinedTypeLiteral
	 *     TupleTypeLiteral returns PredefinedTypeLiteral
	 *     PredefinedTypeLiteral returns PredefinedTypeLiteral
	 *     ContextTypeRef returns PredefinedTypeLiteral
	 *
	 * Constraint:
	 *     type='empty'
	 */
	protected void sequence_PredefinedTypeLiteral(ISerializationContext context, PredefinedTypeLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.PREDEFINED_TYPE_LITERAL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.PREDEFINED_TYPE_LITERAL__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPredefinedTypeLiteralAccess().getTypeEmptyKeyword_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Definition returns TypeDefinition
	 *     TypeDefinition returns TypeDefinition
	 *
	 * Constraint:
	 *     (name=ValidID literal=TypeLiteral)
	 */
	protected void sequence_TypeDefinition(ISerializationContext context, TypeDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.DEFINITION__NAME));
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.TYPE_DEFINITION__LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.TYPE_DEFINITION__LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeDefinitionAccess().getNameValidIDParserRuleCall_0_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTypeDefinitionAccess().getLiteralTypeLiteralParserRuleCall_0_3_0(), semanticObject.getLiteral());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeIndicator returns TypeIndicator
	 *
	 * Constraint:
	 *     (sourceType=ContextTypeRef viewType=ContextTypeRef)
	 */
	protected void sequence_TypeIndicator(ISerializationContext context, TypeIndicator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.TYPE_INDICATOR__SOURCE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.TYPE_INDICATOR__SOURCE_TYPE));
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.TYPE_INDICATOR__VIEW_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.TYPE_INDICATOR__VIEW_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeIndicatorAccess().getSourceTypeContextTypeRefParserRuleCall_1_0(), semanticObject.getSourceType());
		feeder.accept(grammarAccess.getTypeIndicatorAccess().getViewTypeContextTypeRefParserRuleCall_3_0(), semanticObject.getViewType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeRef returns EcoreTypeRef
	 *
	 * Constraint:
	 *     type=[EClassifier|ValidID]
	 */
	protected void sequence_TypeRef(ISerializationContext context, EcoreTypeRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.TYPE_REF__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.TYPE_REF__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeRefAccess().getTypeEClassifierValidIDParserRuleCall_0_1_0_1(), semanticObject.eGet(BXCorePackage.Literals.TYPE_REF__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeRef returns FeatureTypeRef
	 *
	 * Constraint:
	 *     (type=[EClassifier|ValidID] feature=[EStructuralFeature|ValidID])
	 */
	protected void sequence_TypeRef(ISerializationContext context, FeatureTypeRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.TYPE_REF__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.TYPE_REF__TYPE));
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.FEATURE_TYPE_REF__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.FEATURE_TYPE_REF__FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeRefAccess().getTypeEClassifierValidIDParserRuleCall_1_1_0_1(), semanticObject.eGet(BXCorePackage.Literals.TYPE_REF__TYPE, false));
		feeder.accept(grammarAccess.getTypeRefAccess().getFeatureEStructuralFeatureValidIDParserRuleCall_1_2_1_0_1(), semanticObject.eGet(BXCorePackage.Literals.FEATURE_TYPE_REF__FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeVarWithInitializer returns TypeVar
	 *
	 * Constraint:
	 *     (name=ValidID type=TypeRef many?='[]'? initializer=ContextAwareDerivationAction)
	 */
	protected void sequence_TypeVarWithInitializer(ISerializationContext context, TypeVar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeVar returns TypeVar
	 *
	 * Constraint:
	 *     ((name=ValidID type=TypeRef many?='[]'?) | (name=ValidID type=TypeRef many?='[]'? initializer=ContextAwareDerivationAction))
	 */
	protected void sequence_TypeVarWithInitializer_TypeVarWithoutInitializer(ISerializationContext context, TypeVar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeVarWithoutInitializer returns TypeVar
	 *
	 * Constraint:
	 *     (name=ValidID type=TypeRef many?='[]'?)
	 */
	protected void sequence_TypeVarWithoutInitializer(ISerializationContext context, TypeVar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnorderedTupleTypeLiteralWithInitializer returns UnorderedTupleTypeLiteral
	 *
	 * Constraint:
	 *     (source=[ImportSection|ValidID] elements+=TypeVarWithInitializer elements+=TypeVarWithInitializer*)
	 */
	protected void sequence_UnorderedTupleTypeLiteralWithInitializer(ISerializationContext context, UnorderedTupleTypeLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeLiteral returns UnorderedTupleTypeLiteral
	 *     TupleTypeLiteral returns UnorderedTupleTypeLiteral
	 *     UnorderedTupleTypeLiteral returns UnorderedTupleTypeLiteral
	 *     ContextTypeRef returns UnorderedTupleTypeLiteral
	 *
	 * Constraint:
	 *     (source=[ImportSection|ValidID] elements+=TypeVarWithoutInitializer elements+=TypeVarWithoutInitializer*)
	 */
	protected void sequence_UnorderedTupleTypeLiteral(ISerializationContext context, UnorderedTupleTypeLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValueMapping returns ValueMapping
	 *
	 * Constraint:
	 *     (varName=ValidID expression=XExpression)
	 */
	protected void sequence_ValueMapping(ISerializationContext context, ValueMapping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.VALUE_MAPPING__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.VALUE_MAPPING__VAR_NAME));
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.VALUE_MAPPING__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.VALUE_MAPPING__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValueMappingAccess().getVarNameValidIDParserRuleCall_0_0(), semanticObject.getVarName());
		feeder.accept(grammarAccess.getValueMappingAccess().getExpressionXExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VarMapping returns VarMapping
	 *
	 * Constraint:
	 *     (to=ValidID from=ValidID)
	 */
	protected void sequence_VarMapping(ISerializationContext context, VarMapping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.VAR_MAPPING__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.VAR_MAPPING__TO));
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.VAR_MAPPING__FROM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.VAR_MAPPING__FROM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarMappingAccess().getToValidIDParserRuleCall_0_0(), semanticObject.getTo());
		feeder.accept(grammarAccess.getVarMappingAccess().getFromValidIDParserRuleCall_2_0(), semanticObject.getFrom());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreStatement returns XmuCoreAlign
	 *     XmuCoreCompositionChildStatement returns XmuCoreAlign
	 *     XmuCoreAlign returns XmuCoreAlign
	 *
	 * Constraint:
	 *     (
	 *         typeIndicator=TypeIndicator? 
	 *         sourcePattern=Pattern 
	 *         viewPattern=Pattern 
	 *         alignment=ContextAwareCondition? 
	 *         (match=XmuCoreStatement | unmatchS=ContextAwareUnidirectionalAction | unmatchV=ContextAwareUnidirectionalAction)+
	 *     )
	 */
	protected void sequence_XmuCoreAlign(ISerializationContext context, XmuCoreAlign semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreStatement returns XmuCoreContextSource
	 *     XmuCoreCompositionChildStatement returns XmuCoreContextSource
	 *     XmuCoreContextSource returns XmuCoreContextSource
	 *
	 * Constraint:
	 *     (typeIndicator=TypeIndicator? mappingView=UnorderedTupleTypeLiteralWithInitializer body=XmuCoreStatement)
	 */
	protected void sequence_XmuCoreContextSource(ISerializationContext context, XmuCoreContextSource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreStatement returns XmuCoreDependencyView
	 *     XmuCoreCompositionChildStatement returns XmuCoreDependencyView
	 *     XmuCoreDependencyView returns XmuCoreDependencyView
	 *
	 * Constraint:
	 *     (typeIndicator=TypeIndicator? dependentType=UnorderedTupleTypeLiteralWithInitializer body=XmuCoreStatement)
	 */
	protected void sequence_XmuCoreDependencyView(ISerializationContext context, XmuCoreDependencyView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreStatement returns XmuCoreDeriveSource
	 *     XmuCoreCompositionChildStatement returns XmuCoreDeriveSource
	 *     XmuCoreDeriveSource returns XmuCoreDeriveSource
	 *
	 * Constraint:
	 *     (typeIndicator=TypeIndicator? derivedType=UnorderedTupleTypeLiteralWithInitializer body=XmuCoreStatement)
	 */
	protected void sequence_XmuCoreDeriveSource(ISerializationContext context, XmuCoreDeriveSource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreStatement returns XmuCoreExpandSource
	 *     XmuCoreCompositionChildStatement returns XmuCoreExpandSource
	 *     XmuCoreExpandSource returns XmuCoreExpandSource
	 *
	 * Constraint:
	 *     (typeIndicator=TypeIndicator? pattern=Pattern mappings+=VarMapping mappings+=VarMapping* body=XmuCoreStatement)
	 */
	protected void sequence_XmuCoreExpandSource(ISerializationContext context, XmuCoreExpandSource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreStatement returns XmuCoreExpandView
	 *     XmuCoreCompositionChildStatement returns XmuCoreExpandView
	 *     XmuCoreExpandView returns XmuCoreExpandView
	 *
	 * Constraint:
	 *     (typeIndicator=TypeIndicator? pattern=Pattern mappings+=VarMapping mappings+=VarMapping* body=XmuCoreStatement)
	 */
	protected void sequence_XmuCoreExpandView(ISerializationContext context, XmuCoreExpandView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreStatement returns XmuCoreForEachMatchSource
	 *     XmuCoreCompositionChildStatement returns XmuCoreForEachMatchSource
	 *     XmuCoreForEachMatchSource returns XmuCoreForEachMatchSource
	 *
	 * Constraint:
	 *     (typeIndicator=TypeIndicator? pattern=Pattern body=XmuCoreStatement)
	 */
	protected void sequence_XmuCoreForEachMatchSource(ISerializationContext context, XmuCoreForEachMatchSource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreForkBranch returns XmuCoreForkBranch
	 *
	 * Constraint:
	 *     (sourceMappings+=VarMapping sourceMappings+=VarMapping* viewMappings+=VarMapping viewMappings+=VarMapping* body=XmuCoreStatement)
	 */
	protected void sequence_XmuCoreForkBranch(ISerializationContext context, XmuCoreForkBranch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreStatement returns XmuCoreFork
	 *     XmuCoreFork returns XmuCoreFork
	 *
	 * Constraint:
	 *     (typeIndicator=TypeIndicator? forks+=XmuCoreForkBranch forks+=XmuCoreForkBranch+)
	 */
	protected void sequence_XmuCoreFork(ISerializationContext context, XmuCoreFork semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreStatement returns XmuCoreFunctionCall
	 *     XmuCoreCompositionChildStatement returns XmuCoreFunctionCall
	 *     XmuCoreFunctionCall returns XmuCoreFunctionCall
	 *
	 * Constraint:
	 *     (
	 *         target=[BXFunctionDefinition|ValidID] 
	 *         typeIndicator=TypeIndicator? 
	 *         (sourceMappings+=VarMapping sourceMappings+=VarMapping*)? 
	 *         (viewMappings+=VarMapping viewMappings+=VarMapping*)?
	 *     )
	 */
	protected void sequence_XmuCoreFunctionCall(ISerializationContext context, XmuCoreFunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreStatement returns XmuCoreGraphReplace
	 *     XmuCoreCompositionChildStatement returns XmuCoreGraphReplace
	 *     XmuCoreGraphReplace returns XmuCoreGraphReplace
	 *
	 * Constraint:
	 *     (typeIndicator=TypeIndicator? source=Pattern view=Pattern conversions+=Conversion*)
	 */
	protected void sequence_XmuCoreGraphReplace(ISerializationContext context, XmuCoreGraphReplace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreStatement returns XmuCoreIndex
	 *     XmuCoreCompositionChildStatement returns XmuCoreIndex
	 *     XmuCoreIndex returns XmuCoreIndex
	 *
	 * Constraint:
	 *     (typeIndicator=TypeIndicator? parts+=IndexPart parts+=IndexPart* body=XmuCoreStatement)
	 */
	protected void sequence_XmuCoreIndex(ISerializationContext context, XmuCoreIndex semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreStatement returns XmuCoreMatchSource
	 *     XmuCoreCompositionChildStatement returns XmuCoreMatchSource
	 *     XmuCoreMatchSource returns XmuCoreMatchSource
	 *
	 * Constraint:
	 *     (typeIndicator=TypeIndicator? pattern=Pattern body=XmuCoreStatement)
	 */
	protected void sequence_XmuCoreMatchSource(ISerializationContext context, XmuCoreMatchSource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreStatement returns XmuCoreMatchView
	 *     XmuCoreCompositionChildStatement returns XmuCoreMatchView
	 *     XmuCoreMatchView returns XmuCoreMatchView
	 *
	 * Constraint:
	 *     (typeIndicator=TypeIndicator? pattern=Pattern body=XmuCoreStatement)
	 */
	protected void sequence_XmuCoreMatchView(ISerializationContext context, XmuCoreMatchView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreStatement returns XmuCoreParallelComposition
	 *     XmuCoreParallelComposition returns XmuCoreParallelComposition
	 *
	 * Constraint:
	 *     (typeIndicator=TypeIndicator? bodies+=XmuCoreCompositionChildStatement bodies+=XmuCoreCompositionChildStatement+)
	 */
	protected void sequence_XmuCoreParallelComposition(ISerializationContext context, XmuCoreParallelComposition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreSwitchAdaption returns XmuCoreSwitchAdaption
	 *
	 * Constraint:
	 *     (condition=ContextAwareCondition action=ContextAwareUnidirectionalAction)
	 */
	protected void sequence_XmuCoreSwitchAdaption(ISerializationContext context, XmuCoreSwitchAdaption semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.XMU_CORE_SWITCH_ADAPTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.XMU_CORE_SWITCH_ADAPTION__CONDITION));
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.XMU_CORE_SWITCH_ADAPTION__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.XMU_CORE_SWITCH_ADAPTION__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXmuCoreSwitchAdaptionAccess().getConditionContextAwareConditionParserRuleCall_1_0(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getXmuCoreSwitchAdaptionAccess().getActionContextAwareUnidirectionalActionParserRuleCall_3_0(), semanticObject.getAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreSwitchBranch returns XmuCoreSwitchBranch
	 *
	 * Constraint:
	 *     (condition=ContextAwareCondition action=XmuCoreStatement)
	 */
	protected void sequence_XmuCoreSwitchBranch(ISerializationContext context, XmuCoreSwitchBranch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.XMU_CORE_SWITCH_BRANCH__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.XMU_CORE_SWITCH_BRANCH__CONDITION));
			if (transientValues.isValueTransient(semanticObject, BXCorePackage.Literals.XMU_CORE_SWITCH_BRANCH__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BXCorePackage.Literals.XMU_CORE_SWITCH_BRANCH__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXmuCoreSwitchBranchAccess().getConditionContextAwareConditionParserRuleCall_1_0(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getXmuCoreSwitchBranchAccess().getActionXmuCoreStatementParserRuleCall_3_0(), semanticObject.getAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XmuCoreStatement returns XmuCoreSwitch
	 *     XmuCoreCompositionChildStatement returns XmuCoreSwitch
	 *     XmuCoreSwitch returns XmuCoreSwitch
	 *
	 * Constraint:
	 *     (typeIndicator=TypeIndicator? branches+=XmuCoreSwitchBranch+ adaptions+=XmuCoreSwitchAdaption*)
	 */
	protected void sequence_XmuCoreSwitch(ISerializationContext context, XmuCoreSwitch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
