/**
 * generated by Xtext 2.18.0.M3
 */
package edu.ustb.sei.mde.bxcore.dsl.bXCore.impl;

import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXCorePackage;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXProgram;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.DataSlot;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.Definition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ImportSection;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.xtext.xtype.XImportSection;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>BX Program</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.BXProgramImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.BXProgramImpl#getJavaImports <em>Java Imports</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.BXProgramImpl#getSlots <em>Slots</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.BXProgramImpl#getDefinitions <em>Definitions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BXProgramImpl extends MinimalEObjectImpl.Container implements BXProgram
{
  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<ImportSection> imports;

  /**
   * The cached value of the '{@link #getJavaImports() <em>Java Imports</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJavaImports()
   * @generated
   * @ordered
   */
  protected XImportSection javaImports;

  /**
   * The cached value of the '{@link #getSlots() <em>Slots</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSlots()
   * @generated
   * @ordered
   */
  protected EList<DataSlot> slots;

  /**
   * The cached value of the '{@link #getDefinitions() <em>Definitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefinitions()
   * @generated
   * @ordered
   */
  protected EList<Definition> definitions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BXProgramImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BXCorePackage.Literals.BX_PROGRAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ImportSection> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<ImportSection>(ImportSection.class, this, BXCorePackage.BX_PROGRAM__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XImportSection getJavaImports()
  {
    return javaImports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetJavaImports(XImportSection newJavaImports, NotificationChain msgs)
  {
    XImportSection oldJavaImports = javaImports;
    javaImports = newJavaImports;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BXCorePackage.BX_PROGRAM__JAVA_IMPORTS, oldJavaImports, newJavaImports);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJavaImports(XImportSection newJavaImports)
  {
    if (newJavaImports != javaImports)
    {
      NotificationChain msgs = null;
      if (javaImports != null)
        msgs = ((InternalEObject)javaImports).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.BX_PROGRAM__JAVA_IMPORTS, null, msgs);
      if (newJavaImports != null)
        msgs = ((InternalEObject)newJavaImports).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.BX_PROGRAM__JAVA_IMPORTS, null, msgs);
      msgs = basicSetJavaImports(newJavaImports, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXCorePackage.BX_PROGRAM__JAVA_IMPORTS, newJavaImports, newJavaImports));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DataSlot> getSlots()
  {
    if (slots == null)
    {
      slots = new EObjectContainmentEList<DataSlot>(DataSlot.class, this, BXCorePackage.BX_PROGRAM__SLOTS);
    }
    return slots;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Definition> getDefinitions()
  {
    if (definitions == null)
    {
      definitions = new EObjectContainmentEList<Definition>(Definition.class, this, BXCorePackage.BX_PROGRAM__DEFINITIONS);
    }
    return definitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BXCorePackage.BX_PROGRAM__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case BXCorePackage.BX_PROGRAM__JAVA_IMPORTS:
        return basicSetJavaImports(null, msgs);
      case BXCorePackage.BX_PROGRAM__SLOTS:
        return ((InternalEList<?>)getSlots()).basicRemove(otherEnd, msgs);
      case BXCorePackage.BX_PROGRAM__DEFINITIONS:
        return ((InternalEList<?>)getDefinitions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BXCorePackage.BX_PROGRAM__IMPORTS:
        return getImports();
      case BXCorePackage.BX_PROGRAM__JAVA_IMPORTS:
        return getJavaImports();
      case BXCorePackage.BX_PROGRAM__SLOTS:
        return getSlots();
      case BXCorePackage.BX_PROGRAM__DEFINITIONS:
        return getDefinitions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BXCorePackage.BX_PROGRAM__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends ImportSection>)newValue);
        return;
      case BXCorePackage.BX_PROGRAM__JAVA_IMPORTS:
        setJavaImports((XImportSection)newValue);
        return;
      case BXCorePackage.BX_PROGRAM__SLOTS:
        getSlots().clear();
        getSlots().addAll((Collection<? extends DataSlot>)newValue);
        return;
      case BXCorePackage.BX_PROGRAM__DEFINITIONS:
        getDefinitions().clear();
        getDefinitions().addAll((Collection<? extends Definition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BXCorePackage.BX_PROGRAM__IMPORTS:
        getImports().clear();
        return;
      case BXCorePackage.BX_PROGRAM__JAVA_IMPORTS:
        setJavaImports((XImportSection)null);
        return;
      case BXCorePackage.BX_PROGRAM__SLOTS:
        getSlots().clear();
        return;
      case BXCorePackage.BX_PROGRAM__DEFINITIONS:
        getDefinitions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BXCorePackage.BX_PROGRAM__IMPORTS:
        return imports != null && !imports.isEmpty();
      case BXCorePackage.BX_PROGRAM__JAVA_IMPORTS:
        return javaImports != null;
      case BXCorePackage.BX_PROGRAM__SLOTS:
        return slots != null && !slots.isEmpty();
      case BXCorePackage.BX_PROGRAM__DEFINITIONS:
        return definitions != null && !definitions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //BXProgramImpl
