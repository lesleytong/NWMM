/**
 * generated by Xtext 2.18.0.M3
 */
package edu.ustb.sei.mde.bxcore.dsl.bXCore.util;

import edu.ustb.sei.mde.bxcore.dsl.bXCore.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.xbase.XExpression;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.BXCorePackage
 * @generated
 */
public class BXCoreAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BXCorePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BXCoreAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = BXCorePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BXCoreSwitch<Adapter> modelSwitch =
    new BXCoreSwitch<Adapter>()
    {
      @Override
      public Adapter caseBXProgram(BXProgram object)
      {
        return createBXProgramAdapter();
      }
      @Override
      public Adapter caseContextAwareAction(ContextAwareAction object)
      {
        return createContextAwareActionAdapter();
      }
      @Override
      public Adapter caseImportSection(ImportSection object)
      {
        return createImportSectionAdapter();
      }
      @Override
      public Adapter caseDataSlot(DataSlot object)
      {
        return createDataSlotAdapter();
      }
      @Override
      public Adapter caseDefinition(Definition object)
      {
        return createDefinitionAdapter();
      }
      @Override
      public Adapter caseHelperDefinition(HelperDefinition object)
      {
        return createHelperDefinitionAdapter();
      }
      @Override
      public Adapter caseCustomizedBiGULDefinition(CustomizedBiGULDefinition object)
      {
        return createCustomizedBiGULDefinitionAdapter();
      }
      @Override
      public Adapter caseTypeLiteral(TypeLiteral object)
      {
        return createTypeLiteralAdapter();
      }
      @Override
      public Adapter caseTupleTypeLiteral(TupleTypeLiteral object)
      {
        return createTupleTypeLiteralAdapter();
      }
      @Override
      public Adapter caseUnorderedTupleTypeLiteral(UnorderedTupleTypeLiteral object)
      {
        return createUnorderedTupleTypeLiteralAdapter();
      }
      @Override
      public Adapter caseOrderedTupleTypeLiteral(OrderedTupleTypeLiteral object)
      {
        return createOrderedTupleTypeLiteralAdapter();
      }
      @Override
      public Adapter caseTypeVar(TypeVar object)
      {
        return createTypeVarAdapter();
      }
      @Override
      public Adapter casePredefinedTypeLiteral(PredefinedTypeLiteral object)
      {
        return createPredefinedTypeLiteralAdapter();
      }
      @Override
      public Adapter casePatternTypeLiteral(PatternTypeLiteral object)
      {
        return createPatternTypeLiteralAdapter();
      }
      @Override
      public Adapter caseTypeDefinition(TypeDefinition object)
      {
        return createTypeDefinitionAdapter();
      }
      @Override
      public Adapter casePatternDefinition(PatternDefinition object)
      {
        return createPatternDefinitionAdapter();
      }
      @Override
      public Adapter caseContextTypeRef(ContextTypeRef object)
      {
        return createContextTypeRefAdapter();
      }
      @Override
      public Adapter caseBXFunctionDefinition(BXFunctionDefinition object)
      {
        return createBXFunctionDefinitionAdapter();
      }
      @Override
      public Adapter caseTypeRef(TypeRef object)
      {
        return createTypeRefAdapter();
      }
      @Override
      public Adapter caseIndexDefinition(IndexDefinition object)
      {
        return createIndexDefinitionAdapter();
      }
      @Override
      public Adapter casePatternNode(PatternNode object)
      {
        return createPatternNodeAdapter();
      }
      @Override
      public Adapter caseAbstractPatternEdge(AbstractPatternEdge object)
      {
        return createAbstractPatternEdgeAdapter();
      }
      @Override
      public Adapter casePatternEdge(PatternEdge object)
      {
        return createPatternEdgeAdapter();
      }
      @Override
      public Adapter casePatternPathEdge(PatternPathEdge object)
      {
        return createPatternPathEdgeAdapter();
      }
      @Override
      public Adapter caseDashedPathType(DashedPathType object)
      {
        return createDashedPathTypeAdapter();
      }
      @Override
      public Adapter caseDashedPathTypeSegment(DashedPathTypeSegment object)
      {
        return createDashedPathTypeSegmentAdapter();
      }
      @Override
      public Adapter casePatternValueCondition(PatternValueCondition object)
      {
        return createPatternValueConditionAdapter();
      }
      @Override
      public Adapter casePatternNodeRef(PatternNodeRef object)
      {
        return createPatternNodeRefAdapter();
      }
      @Override
      public Adapter casePattern(Pattern object)
      {
        return createPatternAdapter();
      }
      @Override
      public Adapter casePatternDefinitionReference(PatternDefinitionReference object)
      {
        return createPatternDefinitionReferenceAdapter();
      }
      @Override
      public Adapter caseXmuCoreStatement(XmuCoreStatement object)
      {
        return createXmuCoreStatementAdapter();
      }
      @Override
      public Adapter caseXmuCoreCompositionChildStatement(XmuCoreCompositionChildStatement object)
      {
        return createXmuCoreCompositionChildStatementAdapter();
      }
      @Override
      public Adapter caseTypeIndicator(TypeIndicator object)
      {
        return createTypeIndicatorAdapter();
      }
      @Override
      public Adapter caseXmuCoreContextSource(XmuCoreContextSource object)
      {
        return createXmuCoreContextSourceAdapter();
      }
      @Override
      public Adapter caseContextAwareDerivationAction(ContextAwareDerivationAction object)
      {
        return createContextAwareDerivationActionAdapter();
      }
      @Override
      public Adapter caseXmuCoreDeriveSource(XmuCoreDeriveSource object)
      {
        return createXmuCoreDeriveSourceAdapter();
      }
      @Override
      public Adapter caseXmuCoreDependencyView(XmuCoreDependencyView object)
      {
        return createXmuCoreDependencyViewAdapter();
      }
      @Override
      public Adapter caseXmuCoreMatchSource(XmuCoreMatchSource object)
      {
        return createXmuCoreMatchSourceAdapter();
      }
      @Override
      public Adapter caseXmuCoreMatchView(XmuCoreMatchView object)
      {
        return createXmuCoreMatchViewAdapter();
      }
      @Override
      public Adapter caseXmuCoreExpandSource(XmuCoreExpandSource object)
      {
        return createXmuCoreExpandSourceAdapter();
      }
      @Override
      public Adapter caseXmuCoreExpandView(XmuCoreExpandView object)
      {
        return createXmuCoreExpandViewAdapter();
      }
      @Override
      public Adapter caseVarMapping(VarMapping object)
      {
        return createVarMappingAdapter();
      }
      @Override
      public Adapter caseXmuCoreGraphReplace(XmuCoreGraphReplace object)
      {
        return createXmuCoreGraphReplaceAdapter();
      }
      @Override
      public Adapter caseXmuCoreParallelComposition(XmuCoreParallelComposition object)
      {
        return createXmuCoreParallelCompositionAdapter();
      }
      @Override
      public Adapter caseXmuCoreSwitch(XmuCoreSwitch object)
      {
        return createXmuCoreSwitchAdapter();
      }
      @Override
      public Adapter caseXmuCoreSwitchBranch(XmuCoreSwitchBranch object)
      {
        return createXmuCoreSwitchBranchAdapter();
      }
      @Override
      public Adapter caseXmuCoreSwitchAdaption(XmuCoreSwitchAdaption object)
      {
        return createXmuCoreSwitchAdaptionAdapter();
      }
      @Override
      public Adapter caseConversion(Conversion object)
      {
        return createConversionAdapter();
      }
      @Override
      public Adapter caseXmuCoreFork(XmuCoreFork object)
      {
        return createXmuCoreForkAdapter();
      }
      @Override
      public Adapter caseXmuCoreForkBranch(XmuCoreForkBranch object)
      {
        return createXmuCoreForkBranchAdapter();
      }
      @Override
      public Adapter caseXmuCoreAlign(XmuCoreAlign object)
      {
        return createXmuCoreAlignAdapter();
      }
      @Override
      public Adapter caseXmuCoreFunctionCall(XmuCoreFunctionCall object)
      {
        return createXmuCoreFunctionCallAdapter();
      }
      @Override
      public Adapter caseXmuCoreIndex(XmuCoreIndex object)
      {
        return createXmuCoreIndexAdapter();
      }
      @Override
      public Adapter caseIndexPart(IndexPart object)
      {
        return createIndexPartAdapter();
      }
      @Override
      public Adapter caseXmuCoreForEachMatchSource(XmuCoreForEachMatchSource object)
      {
        return createXmuCoreForEachMatchSourceAdapter();
      }
      @Override
      public Adapter caseContextAwareCondition(ContextAwareCondition object)
      {
        return createContextAwareConditionAdapter();
      }
      @Override
      public Adapter caseContextAwareUnidirectionalAction(ContextAwareUnidirectionalAction object)
      {
        return createContextAwareUnidirectionalActionAdapter();
      }
      @Override
      public Adapter caseBiGULStatement(BiGULStatement object)
      {
        return createBiGULStatementAdapter();
      }
      @Override
      public Adapter caseBiGULReplace(BiGULReplace object)
      {
        return createBiGULReplaceAdapter();
      }
      @Override
      public Adapter caseBiGULSkip(BiGULSkip object)
      {
        return createBiGULSkipAdapter();
      }
      @Override
      public Adapter caseCustomizedBiGULReference(CustomizedBiGULReference object)
      {
        return createCustomizedBiGULReferenceAdapter();
      }
      @Override
      public Adapter caseContextExpression(ContextExpression object)
      {
        return createContextExpressionAdapter();
      }
      @Override
      public Adapter caseContextPrimaryExpression(ContextPrimaryExpression object)
      {
        return createContextPrimaryExpressionAdapter();
      }
      @Override
      public Adapter caseNewInstanceExpression(NewInstanceExpression object)
      {
        return createNewInstanceExpressionAdapter();
      }
      @Override
      public Adapter caseAnnotatedType(AnnotatedType object)
      {
        return createAnnotatedTypeAdapter();
      }
      @Override
      public Adapter caseAllInstanceExpression(AllInstanceExpression object)
      {
        return createAllInstanceExpressionAdapter();
      }
      @Override
      public Adapter caseModificationExpression(ModificationExpression object)
      {
        return createModificationExpressionAdapter();
      }
      @Override
      public Adapter caseEnforcementExpression(EnforcementExpression object)
      {
        return createEnforcementExpressionAdapter();
      }
      @Override
      public Adapter caseMatchExpression(MatchExpression object)
      {
        return createMatchExpressionAdapter();
      }
      @Override
      public Adapter caseDeleteElementExpression(DeleteElementExpression object)
      {
        return createDeleteElementExpressionAdapter();
      }
      @Override
      public Adapter caseInsertElementExpression(InsertElementExpression object)
      {
        return createInsertElementExpressionAdapter();
      }
      @Override
      public Adapter caseValueMapping(ValueMapping object)
      {
        return createValueMappingAdapter();
      }
      @Override
      public Adapter caseDefinedContextTypeRef(DefinedContextTypeRef object)
      {
        return createDefinedContextTypeRefAdapter();
      }
      @Override
      public Adapter caseEcoreTypeRef(EcoreTypeRef object)
      {
        return createEcoreTypeRefAdapter();
      }
      @Override
      public Adapter caseFeatureTypeRef(FeatureTypeRef object)
      {
        return createFeatureTypeRefAdapter();
      }
      @Override
      public Adapter caseNavigationExpression(NavigationExpression object)
      {
        return createNavigationExpressionAdapter();
      }
      @Override
      public Adapter caseContextVarExpression(ContextVarExpression object)
      {
        return createContextVarExpressionAdapter();
      }
      @Override
      public Adapter caseExpressionConversion(ExpressionConversion object)
      {
        return createExpressionConversionAdapter();
      }
      @Override
      public Adapter caseModificationExpressionBlock(ModificationExpressionBlock object)
      {
        return createModificationExpressionBlockAdapter();
      }
      @Override
      public Adapter caseXExpression(XExpression object)
      {
        return createXExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.BXProgram <em>BX Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.BXProgram
   * @generated
   */
  public Adapter createBXProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextAwareAction <em>Context Aware Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextAwareAction
   * @generated
   */
  public Adapter createContextAwareActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.ImportSection <em>Import Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.ImportSection
   * @generated
   */
  public Adapter createImportSectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.DataSlot <em>Data Slot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.DataSlot
   * @generated
   */
  public Adapter createDataSlotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.Definition <em>Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.Definition
   * @generated
   */
  public Adapter createDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.HelperDefinition <em>Helper Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.HelperDefinition
   * @generated
   */
  public Adapter createHelperDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.CustomizedBiGULDefinition <em>Customized Bi GUL Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.CustomizedBiGULDefinition
   * @generated
   */
  public Adapter createCustomizedBiGULDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeLiteral <em>Type Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeLiteral
   * @generated
   */
  public Adapter createTypeLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.TupleTypeLiteral <em>Tuple Type Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.TupleTypeLiteral
   * @generated
   */
  public Adapter createTupleTypeLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.UnorderedTupleTypeLiteral <em>Unordered Tuple Type Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.UnorderedTupleTypeLiteral
   * @generated
   */
  public Adapter createUnorderedTupleTypeLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.OrderedTupleTypeLiteral <em>Ordered Tuple Type Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.OrderedTupleTypeLiteral
   * @generated
   */
  public Adapter createOrderedTupleTypeLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeVar <em>Type Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeVar
   * @generated
   */
  public Adapter createTypeVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.PredefinedTypeLiteral <em>Predefined Type Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.PredefinedTypeLiteral
   * @generated
   */
  public Adapter createPredefinedTypeLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternTypeLiteral <em>Pattern Type Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternTypeLiteral
   * @generated
   */
  public Adapter createPatternTypeLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeDefinition <em>Type Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeDefinition
   * @generated
   */
  public Adapter createTypeDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternDefinition <em>Pattern Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternDefinition
   * @generated
   */
  public Adapter createPatternDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextTypeRef <em>Context Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextTypeRef
   * @generated
   */
  public Adapter createContextTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.BXFunctionDefinition <em>BX Function Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.BXFunctionDefinition
   * @generated
   */
  public Adapter createBXFunctionDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeRef <em>Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeRef
   * @generated
   */
  public Adapter createTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.IndexDefinition <em>Index Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.IndexDefinition
   * @generated
   */
  public Adapter createIndexDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternNode <em>Pattern Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternNode
   * @generated
   */
  public Adapter createPatternNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.AbstractPatternEdge <em>Abstract Pattern Edge</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.AbstractPatternEdge
   * @generated
   */
  public Adapter createAbstractPatternEdgeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternEdge <em>Pattern Edge</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternEdge
   * @generated
   */
  public Adapter createPatternEdgeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternPathEdge <em>Pattern Path Edge</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternPathEdge
   * @generated
   */
  public Adapter createPatternPathEdgeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.DashedPathType <em>Dashed Path Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.DashedPathType
   * @generated
   */
  public Adapter createDashedPathTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.DashedPathTypeSegment <em>Dashed Path Type Segment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.DashedPathTypeSegment
   * @generated
   */
  public Adapter createDashedPathTypeSegmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternValueCondition <em>Pattern Value Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternValueCondition
   * @generated
   */
  public Adapter createPatternValueConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternNodeRef <em>Pattern Node Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternNodeRef
   * @generated
   */
  public Adapter createPatternNodeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.Pattern <em>Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.Pattern
   * @generated
   */
  public Adapter createPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternDefinitionReference <em>Pattern Definition Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.PatternDefinitionReference
   * @generated
   */
  public Adapter createPatternDefinitionReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreStatement <em>Xmu Core Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreStatement
   * @generated
   */
  public Adapter createXmuCoreStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreCompositionChildStatement <em>Xmu Core Composition Child Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreCompositionChildStatement
   * @generated
   */
  public Adapter createXmuCoreCompositionChildStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeIndicator <em>Type Indicator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.TypeIndicator
   * @generated
   */
  public Adapter createTypeIndicatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreContextSource <em>Xmu Core Context Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreContextSource
   * @generated
   */
  public Adapter createXmuCoreContextSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextAwareDerivationAction <em>Context Aware Derivation Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextAwareDerivationAction
   * @generated
   */
  public Adapter createContextAwareDerivationActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreDeriveSource <em>Xmu Core Derive Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreDeriveSource
   * @generated
   */
  public Adapter createXmuCoreDeriveSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreDependencyView <em>Xmu Core Dependency View</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreDependencyView
   * @generated
   */
  public Adapter createXmuCoreDependencyViewAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreMatchSource <em>Xmu Core Match Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreMatchSource
   * @generated
   */
  public Adapter createXmuCoreMatchSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreMatchView <em>Xmu Core Match View</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreMatchView
   * @generated
   */
  public Adapter createXmuCoreMatchViewAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreExpandSource <em>Xmu Core Expand Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreExpandSource
   * @generated
   */
  public Adapter createXmuCoreExpandSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreExpandView <em>Xmu Core Expand View</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreExpandView
   * @generated
   */
  public Adapter createXmuCoreExpandViewAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.VarMapping <em>Var Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.VarMapping
   * @generated
   */
  public Adapter createVarMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreGraphReplace <em>Xmu Core Graph Replace</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreGraphReplace
   * @generated
   */
  public Adapter createXmuCoreGraphReplaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreParallelComposition <em>Xmu Core Parallel Composition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreParallelComposition
   * @generated
   */
  public Adapter createXmuCoreParallelCompositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreSwitch <em>Xmu Core Switch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreSwitch
   * @generated
   */
  public Adapter createXmuCoreSwitchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreSwitchBranch <em>Xmu Core Switch Branch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreSwitchBranch
   * @generated
   */
  public Adapter createXmuCoreSwitchBranchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreSwitchAdaption <em>Xmu Core Switch Adaption</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreSwitchAdaption
   * @generated
   */
  public Adapter createXmuCoreSwitchAdaptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.Conversion <em>Conversion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.Conversion
   * @generated
   */
  public Adapter createConversionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreFork <em>Xmu Core Fork</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreFork
   * @generated
   */
  public Adapter createXmuCoreForkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreForkBranch <em>Xmu Core Fork Branch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreForkBranch
   * @generated
   */
  public Adapter createXmuCoreForkBranchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreAlign <em>Xmu Core Align</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreAlign
   * @generated
   */
  public Adapter createXmuCoreAlignAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreFunctionCall <em>Xmu Core Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreFunctionCall
   * @generated
   */
  public Adapter createXmuCoreFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreIndex <em>Xmu Core Index</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreIndex
   * @generated
   */
  public Adapter createXmuCoreIndexAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.IndexPart <em>Index Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.IndexPart
   * @generated
   */
  public Adapter createIndexPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreForEachMatchSource <em>Xmu Core For Each Match Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreForEachMatchSource
   * @generated
   */
  public Adapter createXmuCoreForEachMatchSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextAwareCondition <em>Context Aware Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextAwareCondition
   * @generated
   */
  public Adapter createContextAwareConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextAwareUnidirectionalAction <em>Context Aware Unidirectional Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextAwareUnidirectionalAction
   * @generated
   */
  public Adapter createContextAwareUnidirectionalActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.BiGULStatement <em>Bi GUL Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.BiGULStatement
   * @generated
   */
  public Adapter createBiGULStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.BiGULReplace <em>Bi GUL Replace</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.BiGULReplace
   * @generated
   */
  public Adapter createBiGULReplaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.BiGULSkip <em>Bi GUL Skip</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.BiGULSkip
   * @generated
   */
  public Adapter createBiGULSkipAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.CustomizedBiGULReference <em>Customized Bi GUL Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.CustomizedBiGULReference
   * @generated
   */
  public Adapter createCustomizedBiGULReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextExpression <em>Context Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextExpression
   * @generated
   */
  public Adapter createContextExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextPrimaryExpression <em>Context Primary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextPrimaryExpression
   * @generated
   */
  public Adapter createContextPrimaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.NewInstanceExpression <em>New Instance Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.NewInstanceExpression
   * @generated
   */
  public Adapter createNewInstanceExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.AnnotatedType <em>Annotated Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.AnnotatedType
   * @generated
   */
  public Adapter createAnnotatedTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.AllInstanceExpression <em>All Instance Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.AllInstanceExpression
   * @generated
   */
  public Adapter createAllInstanceExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.ModificationExpression <em>Modification Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.ModificationExpression
   * @generated
   */
  public Adapter createModificationExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.EnforcementExpression <em>Enforcement Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.EnforcementExpression
   * @generated
   */
  public Adapter createEnforcementExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.MatchExpression <em>Match Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.MatchExpression
   * @generated
   */
  public Adapter createMatchExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.DeleteElementExpression <em>Delete Element Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.DeleteElementExpression
   * @generated
   */
  public Adapter createDeleteElementExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.InsertElementExpression <em>Insert Element Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.InsertElementExpression
   * @generated
   */
  public Adapter createInsertElementExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.ValueMapping <em>Value Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.ValueMapping
   * @generated
   */
  public Adapter createValueMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.DefinedContextTypeRef <em>Defined Context Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.DefinedContextTypeRef
   * @generated
   */
  public Adapter createDefinedContextTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.EcoreTypeRef <em>Ecore Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.EcoreTypeRef
   * @generated
   */
  public Adapter createEcoreTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.FeatureTypeRef <em>Feature Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.FeatureTypeRef
   * @generated
   */
  public Adapter createFeatureTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.NavigationExpression <em>Navigation Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.NavigationExpression
   * @generated
   */
  public Adapter createNavigationExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextVarExpression <em>Context Var Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextVarExpression
   * @generated
   */
  public Adapter createContextVarExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.ExpressionConversion <em>Expression Conversion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.ExpressionConversion
   * @generated
   */
  public Adapter createExpressionConversionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.ModificationExpressionBlock <em>Modification Expression Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.ModificationExpressionBlock
   * @generated
   */
  public Adapter createModificationExpressionBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.xtext.xbase.XExpression <em>XExpression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.xtext.xbase.XExpression
   * @since 2.7
   * @generated
   */
  public Adapter createXExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //BXCoreAdapterFactory
