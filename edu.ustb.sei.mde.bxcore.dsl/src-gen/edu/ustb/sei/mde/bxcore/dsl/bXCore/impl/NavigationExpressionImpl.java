/**
 * generated by Xtext 2.18.0.M3
 */
package edu.ustb.sei.mde.bxcore.dsl.bXCore.impl;

import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXCorePackage;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextExpression;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.NavigationExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Navigation Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.NavigationExpressionImpl#getHost <em>Host</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.NavigationExpressionImpl#getNavOp <em>Nav Op</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.NavigationExpressionImpl#getPathName <em>Path Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NavigationExpressionImpl extends ContextExpressionImpl implements NavigationExpression
{
  /**
   * The cached value of the '{@link #getHost() <em>Host</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHost()
   * @generated
   * @ordered
   */
  protected ContextExpression host;

  /**
   * The default value of the '{@link #getNavOp() <em>Nav Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNavOp()
   * @generated
   * @ordered
   */
  protected static final String NAV_OP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNavOp() <em>Nav Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNavOp()
   * @generated
   * @ordered
   */
  protected String navOp = NAV_OP_EDEFAULT;

  /**
   * The default value of the '{@link #getPathName() <em>Path Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPathName()
   * @generated
   * @ordered
   */
  protected static final String PATH_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPathName() <em>Path Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPathName()
   * @generated
   * @ordered
   */
  protected String pathName = PATH_NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NavigationExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BXCorePackage.Literals.NAVIGATION_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextExpression getHost()
  {
    return host;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHost(ContextExpression newHost, NotificationChain msgs)
  {
    ContextExpression oldHost = host;
    host = newHost;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BXCorePackage.NAVIGATION_EXPRESSION__HOST, oldHost, newHost);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHost(ContextExpression newHost)
  {
    if (newHost != host)
    {
      NotificationChain msgs = null;
      if (host != null)
        msgs = ((InternalEObject)host).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.NAVIGATION_EXPRESSION__HOST, null, msgs);
      if (newHost != null)
        msgs = ((InternalEObject)newHost).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.NAVIGATION_EXPRESSION__HOST, null, msgs);
      msgs = basicSetHost(newHost, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXCorePackage.NAVIGATION_EXPRESSION__HOST, newHost, newHost));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNavOp()
  {
    return navOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNavOp(String newNavOp)
  {
    String oldNavOp = navOp;
    navOp = newNavOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXCorePackage.NAVIGATION_EXPRESSION__NAV_OP, oldNavOp, navOp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPathName()
  {
    return pathName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPathName(String newPathName)
  {
    String oldPathName = pathName;
    pathName = newPathName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXCorePackage.NAVIGATION_EXPRESSION__PATH_NAME, oldPathName, pathName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BXCorePackage.NAVIGATION_EXPRESSION__HOST:
        return basicSetHost(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BXCorePackage.NAVIGATION_EXPRESSION__HOST:
        return getHost();
      case BXCorePackage.NAVIGATION_EXPRESSION__NAV_OP:
        return getNavOp();
      case BXCorePackage.NAVIGATION_EXPRESSION__PATH_NAME:
        return getPathName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BXCorePackage.NAVIGATION_EXPRESSION__HOST:
        setHost((ContextExpression)newValue);
        return;
      case BXCorePackage.NAVIGATION_EXPRESSION__NAV_OP:
        setNavOp((String)newValue);
        return;
      case BXCorePackage.NAVIGATION_EXPRESSION__PATH_NAME:
        setPathName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BXCorePackage.NAVIGATION_EXPRESSION__HOST:
        setHost((ContextExpression)null);
        return;
      case BXCorePackage.NAVIGATION_EXPRESSION__NAV_OP:
        setNavOp(NAV_OP_EDEFAULT);
        return;
      case BXCorePackage.NAVIGATION_EXPRESSION__PATH_NAME:
        setPathName(PATH_NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BXCorePackage.NAVIGATION_EXPRESSION__HOST:
        return host != null;
      case BXCorePackage.NAVIGATION_EXPRESSION__NAV_OP:
        return NAV_OP_EDEFAULT == null ? navOp != null : !NAV_OP_EDEFAULT.equals(navOp);
      case BXCorePackage.NAVIGATION_EXPRESSION__PATH_NAME:
        return PATH_NAME_EDEFAULT == null ? pathName != null : !PATH_NAME_EDEFAULT.equals(pathName);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (navOp: ");
    result.append(navOp);
    result.append(", pathName: ");
    result.append(pathName);
    result.append(')');
    return result.toString();
  }

} //NavigationExpressionImpl
