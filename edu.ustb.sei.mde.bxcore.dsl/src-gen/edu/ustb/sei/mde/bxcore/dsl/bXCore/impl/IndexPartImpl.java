/**
 * generated by Xtext 2.18.0.M3
 */
package edu.ustb.sei.mde.bxcore.dsl.bXCore.impl;

import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXCorePackage;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.IndexDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.IndexPart;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Index Part</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.IndexPartImpl#getSignature <em>Signature</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.IndexPartImpl#getSourceKeys <em>Source Keys</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.IndexPartImpl#getViewKeys <em>View Keys</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IndexPartImpl extends MinimalEObjectImpl.Container implements IndexPart
{
  /**
   * The cached value of the '{@link #getSignature() <em>Signature</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignature()
   * @generated
   * @ordered
   */
  protected IndexDefinition signature;

  /**
   * The cached value of the '{@link #getSourceKeys() <em>Source Keys</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSourceKeys()
   * @generated
   * @ordered
   */
  protected EList<String> sourceKeys;

  /**
   * The cached value of the '{@link #getViewKeys() <em>View Keys</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getViewKeys()
   * @generated
   * @ordered
   */
  protected EList<String> viewKeys;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IndexPartImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BXCorePackage.Literals.INDEX_PART;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexDefinition getSignature()
  {
    if (signature != null && signature.eIsProxy())
    {
      InternalEObject oldSignature = (InternalEObject)signature;
      signature = (IndexDefinition)eResolveProxy(oldSignature);
      if (signature != oldSignature)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BXCorePackage.INDEX_PART__SIGNATURE, oldSignature, signature));
      }
    }
    return signature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IndexDefinition basicGetSignature()
  {
    return signature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSignature(IndexDefinition newSignature)
  {
    IndexDefinition oldSignature = signature;
    signature = newSignature;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXCorePackage.INDEX_PART__SIGNATURE, oldSignature, signature));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getSourceKeys()
  {
    if (sourceKeys == null)
    {
      sourceKeys = new EDataTypeEList<String>(String.class, this, BXCorePackage.INDEX_PART__SOURCE_KEYS);
    }
    return sourceKeys;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getViewKeys()
  {
    if (viewKeys == null)
    {
      viewKeys = new EDataTypeEList<String>(String.class, this, BXCorePackage.INDEX_PART__VIEW_KEYS);
    }
    return viewKeys;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BXCorePackage.INDEX_PART__SIGNATURE:
        if (resolve) return getSignature();
        return basicGetSignature();
      case BXCorePackage.INDEX_PART__SOURCE_KEYS:
        return getSourceKeys();
      case BXCorePackage.INDEX_PART__VIEW_KEYS:
        return getViewKeys();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BXCorePackage.INDEX_PART__SIGNATURE:
        setSignature((IndexDefinition)newValue);
        return;
      case BXCorePackage.INDEX_PART__SOURCE_KEYS:
        getSourceKeys().clear();
        getSourceKeys().addAll((Collection<? extends String>)newValue);
        return;
      case BXCorePackage.INDEX_PART__VIEW_KEYS:
        getViewKeys().clear();
        getViewKeys().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BXCorePackage.INDEX_PART__SIGNATURE:
        setSignature((IndexDefinition)null);
        return;
      case BXCorePackage.INDEX_PART__SOURCE_KEYS:
        getSourceKeys().clear();
        return;
      case BXCorePackage.INDEX_PART__VIEW_KEYS:
        getViewKeys().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BXCorePackage.INDEX_PART__SIGNATURE:
        return signature != null;
      case BXCorePackage.INDEX_PART__SOURCE_KEYS:
        return sourceKeys != null && !sourceKeys.isEmpty();
      case BXCorePackage.INDEX_PART__VIEW_KEYS:
        return viewKeys != null && !viewKeys.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (sourceKeys: ");
    result.append(sourceKeys);
    result.append(", viewKeys: ");
    result.append(viewKeys);
    result.append(')');
    return result.toString();
  }

} //IndexPartImpl
