/**
 * generated by Xtext 2.18.0.M3
 */
package edu.ustb.sei.mde.bxcore.dsl.bXCore.impl;

import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXCorePackage;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXFunctionDefinition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.VarMapping;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreFunctionCall;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Xmu Core Function Call</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.XmuCoreFunctionCallImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.XmuCoreFunctionCallImpl#getSourceMappings <em>Source Mappings</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.XmuCoreFunctionCallImpl#getViewMappings <em>View Mappings</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XmuCoreFunctionCallImpl extends XmuCoreCompositionChildStatementImpl implements XmuCoreFunctionCall
{
  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected BXFunctionDefinition target;

  /**
   * The cached value of the '{@link #getSourceMappings() <em>Source Mappings</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSourceMappings()
   * @generated
   * @ordered
   */
  protected EList<VarMapping> sourceMappings;

  /**
   * The cached value of the '{@link #getViewMappings() <em>View Mappings</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getViewMappings()
   * @generated
   * @ordered
   */
  protected EList<VarMapping> viewMappings;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XmuCoreFunctionCallImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BXCorePackage.Literals.XMU_CORE_FUNCTION_CALL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BXFunctionDefinition getTarget()
  {
    if (target != null && target.eIsProxy())
    {
      InternalEObject oldTarget = (InternalEObject)target;
      target = (BXFunctionDefinition)eResolveProxy(oldTarget);
      if (target != oldTarget)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BXCorePackage.XMU_CORE_FUNCTION_CALL__TARGET, oldTarget, target));
      }
    }
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BXFunctionDefinition basicGetTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget(BXFunctionDefinition newTarget)
  {
    BXFunctionDefinition oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_FUNCTION_CALL__TARGET, oldTarget, target));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VarMapping> getSourceMappings()
  {
    if (sourceMappings == null)
    {
      sourceMappings = new EObjectContainmentEList<VarMapping>(VarMapping.class, this, BXCorePackage.XMU_CORE_FUNCTION_CALL__SOURCE_MAPPINGS);
    }
    return sourceMappings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VarMapping> getViewMappings()
  {
    if (viewMappings == null)
    {
      viewMappings = new EObjectContainmentEList<VarMapping>(VarMapping.class, this, BXCorePackage.XMU_CORE_FUNCTION_CALL__VIEW_MAPPINGS);
    }
    return viewMappings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BXCorePackage.XMU_CORE_FUNCTION_CALL__SOURCE_MAPPINGS:
        return ((InternalEList<?>)getSourceMappings()).basicRemove(otherEnd, msgs);
      case BXCorePackage.XMU_CORE_FUNCTION_CALL__VIEW_MAPPINGS:
        return ((InternalEList<?>)getViewMappings()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BXCorePackage.XMU_CORE_FUNCTION_CALL__TARGET:
        if (resolve) return getTarget();
        return basicGetTarget();
      case BXCorePackage.XMU_CORE_FUNCTION_CALL__SOURCE_MAPPINGS:
        return getSourceMappings();
      case BXCorePackage.XMU_CORE_FUNCTION_CALL__VIEW_MAPPINGS:
        return getViewMappings();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BXCorePackage.XMU_CORE_FUNCTION_CALL__TARGET:
        setTarget((BXFunctionDefinition)newValue);
        return;
      case BXCorePackage.XMU_CORE_FUNCTION_CALL__SOURCE_MAPPINGS:
        getSourceMappings().clear();
        getSourceMappings().addAll((Collection<? extends VarMapping>)newValue);
        return;
      case BXCorePackage.XMU_CORE_FUNCTION_CALL__VIEW_MAPPINGS:
        getViewMappings().clear();
        getViewMappings().addAll((Collection<? extends VarMapping>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BXCorePackage.XMU_CORE_FUNCTION_CALL__TARGET:
        setTarget((BXFunctionDefinition)null);
        return;
      case BXCorePackage.XMU_CORE_FUNCTION_CALL__SOURCE_MAPPINGS:
        getSourceMappings().clear();
        return;
      case BXCorePackage.XMU_CORE_FUNCTION_CALL__VIEW_MAPPINGS:
        getViewMappings().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BXCorePackage.XMU_CORE_FUNCTION_CALL__TARGET:
        return target != null;
      case BXCorePackage.XMU_CORE_FUNCTION_CALL__SOURCE_MAPPINGS:
        return sourceMappings != null && !sourceMappings.isEmpty();
      case BXCorePackage.XMU_CORE_FUNCTION_CALL__VIEW_MAPPINGS:
        return viewMappings != null && !viewMappings.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //XmuCoreFunctionCallImpl
