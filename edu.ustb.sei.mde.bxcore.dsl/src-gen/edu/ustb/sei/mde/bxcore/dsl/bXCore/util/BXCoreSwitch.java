/**
 * generated by Xtext 2.18.0.M3
 */
package edu.ustb.sei.mde.bxcore.dsl.bXCore.util;

import edu.ustb.sei.mde.bxcore.dsl.bXCore.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.eclipse.xtext.xbase.XExpression;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see edu.ustb.sei.mde.bxcore.dsl.bXCore.BXCorePackage
 * @generated
 */
public class BXCoreSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BXCorePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BXCoreSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = BXCorePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case BXCorePackage.BX_PROGRAM:
      {
        BXProgram bxProgram = (BXProgram)theEObject;
        T result = caseBXProgram(bxProgram);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.CONTEXT_AWARE_ACTION:
      {
        ContextAwareAction contextAwareAction = (ContextAwareAction)theEObject;
        T result = caseContextAwareAction(contextAwareAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.IMPORT_SECTION:
      {
        ImportSection importSection = (ImportSection)theEObject;
        T result = caseImportSection(importSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.DATA_SLOT:
      {
        DataSlot dataSlot = (DataSlot)theEObject;
        T result = caseDataSlot(dataSlot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.DEFINITION:
      {
        Definition definition = (Definition)theEObject;
        T result = caseDefinition(definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.HELPER_DEFINITION:
      {
        HelperDefinition helperDefinition = (HelperDefinition)theEObject;
        T result = caseHelperDefinition(helperDefinition);
        if (result == null) result = caseDefinition(helperDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.CUSTOMIZED_BI_GUL_DEFINITION:
      {
        CustomizedBiGULDefinition customizedBiGULDefinition = (CustomizedBiGULDefinition)theEObject;
        T result = caseCustomizedBiGULDefinition(customizedBiGULDefinition);
        if (result == null) result = caseDefinition(customizedBiGULDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.TYPE_LITERAL:
      {
        TypeLiteral typeLiteral = (TypeLiteral)theEObject;
        T result = caseTypeLiteral(typeLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.TUPLE_TYPE_LITERAL:
      {
        TupleTypeLiteral tupleTypeLiteral = (TupleTypeLiteral)theEObject;
        T result = caseTupleTypeLiteral(tupleTypeLiteral);
        if (result == null) result = caseTypeLiteral(tupleTypeLiteral);
        if (result == null) result = caseContextTypeRef(tupleTypeLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.UNORDERED_TUPLE_TYPE_LITERAL:
      {
        UnorderedTupleTypeLiteral unorderedTupleTypeLiteral = (UnorderedTupleTypeLiteral)theEObject;
        T result = caseUnorderedTupleTypeLiteral(unorderedTupleTypeLiteral);
        if (result == null) result = caseTupleTypeLiteral(unorderedTupleTypeLiteral);
        if (result == null) result = caseTypeLiteral(unorderedTupleTypeLiteral);
        if (result == null) result = caseContextTypeRef(unorderedTupleTypeLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.ORDERED_TUPLE_TYPE_LITERAL:
      {
        OrderedTupleTypeLiteral orderedTupleTypeLiteral = (OrderedTupleTypeLiteral)theEObject;
        T result = caseOrderedTupleTypeLiteral(orderedTupleTypeLiteral);
        if (result == null) result = caseTupleTypeLiteral(orderedTupleTypeLiteral);
        if (result == null) result = caseTypeLiteral(orderedTupleTypeLiteral);
        if (result == null) result = caseContextTypeRef(orderedTupleTypeLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.TYPE_VAR:
      {
        TypeVar typeVar = (TypeVar)theEObject;
        T result = caseTypeVar(typeVar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.PREDEFINED_TYPE_LITERAL:
      {
        PredefinedTypeLiteral predefinedTypeLiteral = (PredefinedTypeLiteral)theEObject;
        T result = casePredefinedTypeLiteral(predefinedTypeLiteral);
        if (result == null) result = caseTupleTypeLiteral(predefinedTypeLiteral);
        if (result == null) result = caseTypeLiteral(predefinedTypeLiteral);
        if (result == null) result = caseContextTypeRef(predefinedTypeLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.PATTERN_TYPE_LITERAL:
      {
        PatternTypeLiteral patternTypeLiteral = (PatternTypeLiteral)theEObject;
        T result = casePatternTypeLiteral(patternTypeLiteral);
        if (result == null) result = caseTypeLiteral(patternTypeLiteral);
        if (result == null) result = casePattern(patternTypeLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.TYPE_DEFINITION:
      {
        TypeDefinition typeDefinition = (TypeDefinition)theEObject;
        T result = caseTypeDefinition(typeDefinition);
        if (result == null) result = caseDefinition(typeDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.PATTERN_DEFINITION:
      {
        PatternDefinition patternDefinition = (PatternDefinition)theEObject;
        T result = casePatternDefinition(patternDefinition);
        if (result == null) result = caseTypeDefinition(patternDefinition);
        if (result == null) result = caseDefinition(patternDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.CONTEXT_TYPE_REF:
      {
        ContextTypeRef contextTypeRef = (ContextTypeRef)theEObject;
        T result = caseContextTypeRef(contextTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.BX_FUNCTION_DEFINITION:
      {
        BXFunctionDefinition bxFunctionDefinition = (BXFunctionDefinition)theEObject;
        T result = caseBXFunctionDefinition(bxFunctionDefinition);
        if (result == null) result = caseDefinition(bxFunctionDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.TYPE_REF:
      {
        TypeRef typeRef = (TypeRef)theEObject;
        T result = caseTypeRef(typeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.INDEX_DEFINITION:
      {
        IndexDefinition indexDefinition = (IndexDefinition)theEObject;
        T result = caseIndexDefinition(indexDefinition);
        if (result == null) result = caseDefinition(indexDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.PATTERN_NODE:
      {
        PatternNode patternNode = (PatternNode)theEObject;
        T result = casePatternNode(patternNode);
        if (result == null) result = casePatternValueCondition(patternNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.ABSTRACT_PATTERN_EDGE:
      {
        AbstractPatternEdge abstractPatternEdge = (AbstractPatternEdge)theEObject;
        T result = caseAbstractPatternEdge(abstractPatternEdge);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.PATTERN_EDGE:
      {
        PatternEdge patternEdge = (PatternEdge)theEObject;
        T result = casePatternEdge(patternEdge);
        if (result == null) result = caseAbstractPatternEdge(patternEdge);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.PATTERN_PATH_EDGE:
      {
        PatternPathEdge patternPathEdge = (PatternPathEdge)theEObject;
        T result = casePatternPathEdge(patternPathEdge);
        if (result == null) result = caseAbstractPatternEdge(patternPathEdge);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.DASHED_PATH_TYPE:
      {
        DashedPathType dashedPathType = (DashedPathType)theEObject;
        T result = caseDashedPathType(dashedPathType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.DASHED_PATH_TYPE_SEGMENT:
      {
        DashedPathTypeSegment dashedPathTypeSegment = (DashedPathTypeSegment)theEObject;
        T result = caseDashedPathTypeSegment(dashedPathTypeSegment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.PATTERN_VALUE_CONDITION:
      {
        PatternValueCondition patternValueCondition = (PatternValueCondition)theEObject;
        T result = casePatternValueCondition(patternValueCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.PATTERN_NODE_REF:
      {
        PatternNodeRef patternNodeRef = (PatternNodeRef)theEObject;
        T result = casePatternNodeRef(patternNodeRef);
        if (result == null) result = casePatternValueCondition(patternNodeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.PATTERN:
      {
        Pattern pattern = (Pattern)theEObject;
        T result = casePattern(pattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.PATTERN_DEFINITION_REFERENCE:
      {
        PatternDefinitionReference patternDefinitionReference = (PatternDefinitionReference)theEObject;
        T result = casePatternDefinitionReference(patternDefinitionReference);
        if (result == null) result = casePattern(patternDefinitionReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_STATEMENT:
      {
        XmuCoreStatement xmuCoreStatement = (XmuCoreStatement)theEObject;
        T result = caseXmuCoreStatement(xmuCoreStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_COMPOSITION_CHILD_STATEMENT:
      {
        XmuCoreCompositionChildStatement xmuCoreCompositionChildStatement = (XmuCoreCompositionChildStatement)theEObject;
        T result = caseXmuCoreCompositionChildStatement(xmuCoreCompositionChildStatement);
        if (result == null) result = caseXmuCoreStatement(xmuCoreCompositionChildStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.TYPE_INDICATOR:
      {
        TypeIndicator typeIndicator = (TypeIndicator)theEObject;
        T result = caseTypeIndicator(typeIndicator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_CONTEXT_SOURCE:
      {
        XmuCoreContextSource xmuCoreContextSource = (XmuCoreContextSource)theEObject;
        T result = caseXmuCoreContextSource(xmuCoreContextSource);
        if (result == null) result = caseXmuCoreCompositionChildStatement(xmuCoreContextSource);
        if (result == null) result = caseXmuCoreStatement(xmuCoreContextSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.CONTEXT_AWARE_DERIVATION_ACTION:
      {
        ContextAwareDerivationAction contextAwareDerivationAction = (ContextAwareDerivationAction)theEObject;
        T result = caseContextAwareDerivationAction(contextAwareDerivationAction);
        if (result == null) result = caseContextAwareAction(contextAwareDerivationAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_DERIVE_SOURCE:
      {
        XmuCoreDeriveSource xmuCoreDeriveSource = (XmuCoreDeriveSource)theEObject;
        T result = caseXmuCoreDeriveSource(xmuCoreDeriveSource);
        if (result == null) result = caseXmuCoreCompositionChildStatement(xmuCoreDeriveSource);
        if (result == null) result = caseXmuCoreStatement(xmuCoreDeriveSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_DEPENDENCY_VIEW:
      {
        XmuCoreDependencyView xmuCoreDependencyView = (XmuCoreDependencyView)theEObject;
        T result = caseXmuCoreDependencyView(xmuCoreDependencyView);
        if (result == null) result = caseXmuCoreCompositionChildStatement(xmuCoreDependencyView);
        if (result == null) result = caseXmuCoreStatement(xmuCoreDependencyView);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_MATCH_SOURCE:
      {
        XmuCoreMatchSource xmuCoreMatchSource = (XmuCoreMatchSource)theEObject;
        T result = caseXmuCoreMatchSource(xmuCoreMatchSource);
        if (result == null) result = caseXmuCoreCompositionChildStatement(xmuCoreMatchSource);
        if (result == null) result = caseXmuCoreStatement(xmuCoreMatchSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_MATCH_VIEW:
      {
        XmuCoreMatchView xmuCoreMatchView = (XmuCoreMatchView)theEObject;
        T result = caseXmuCoreMatchView(xmuCoreMatchView);
        if (result == null) result = caseXmuCoreCompositionChildStatement(xmuCoreMatchView);
        if (result == null) result = caseXmuCoreStatement(xmuCoreMatchView);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_EXPAND_SOURCE:
      {
        XmuCoreExpandSource xmuCoreExpandSource = (XmuCoreExpandSource)theEObject;
        T result = caseXmuCoreExpandSource(xmuCoreExpandSource);
        if (result == null) result = caseXmuCoreCompositionChildStatement(xmuCoreExpandSource);
        if (result == null) result = caseXmuCoreStatement(xmuCoreExpandSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_EXPAND_VIEW:
      {
        XmuCoreExpandView xmuCoreExpandView = (XmuCoreExpandView)theEObject;
        T result = caseXmuCoreExpandView(xmuCoreExpandView);
        if (result == null) result = caseXmuCoreCompositionChildStatement(xmuCoreExpandView);
        if (result == null) result = caseXmuCoreStatement(xmuCoreExpandView);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.VAR_MAPPING:
      {
        VarMapping varMapping = (VarMapping)theEObject;
        T result = caseVarMapping(varMapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_GRAPH_REPLACE:
      {
        XmuCoreGraphReplace xmuCoreGraphReplace = (XmuCoreGraphReplace)theEObject;
        T result = caseXmuCoreGraphReplace(xmuCoreGraphReplace);
        if (result == null) result = caseXmuCoreCompositionChildStatement(xmuCoreGraphReplace);
        if (result == null) result = caseXmuCoreStatement(xmuCoreGraphReplace);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_PARALLEL_COMPOSITION:
      {
        XmuCoreParallelComposition xmuCoreParallelComposition = (XmuCoreParallelComposition)theEObject;
        T result = caseXmuCoreParallelComposition(xmuCoreParallelComposition);
        if (result == null) result = caseXmuCoreStatement(xmuCoreParallelComposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_SWITCH:
      {
        XmuCoreSwitch xmuCoreSwitch = (XmuCoreSwitch)theEObject;
        T result = caseXmuCoreSwitch(xmuCoreSwitch);
        if (result == null) result = caseXmuCoreCompositionChildStatement(xmuCoreSwitch);
        if (result == null) result = caseXmuCoreStatement(xmuCoreSwitch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_SWITCH_BRANCH:
      {
        XmuCoreSwitchBranch xmuCoreSwitchBranch = (XmuCoreSwitchBranch)theEObject;
        T result = caseXmuCoreSwitchBranch(xmuCoreSwitchBranch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_SWITCH_ADAPTION:
      {
        XmuCoreSwitchAdaption xmuCoreSwitchAdaption = (XmuCoreSwitchAdaption)theEObject;
        T result = caseXmuCoreSwitchAdaption(xmuCoreSwitchAdaption);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.CONVERSION:
      {
        Conversion conversion = (Conversion)theEObject;
        T result = caseConversion(conversion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_FORK:
      {
        XmuCoreFork xmuCoreFork = (XmuCoreFork)theEObject;
        T result = caseXmuCoreFork(xmuCoreFork);
        if (result == null) result = caseXmuCoreStatement(xmuCoreFork);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_FORK_BRANCH:
      {
        XmuCoreForkBranch xmuCoreForkBranch = (XmuCoreForkBranch)theEObject;
        T result = caseXmuCoreForkBranch(xmuCoreForkBranch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_ALIGN:
      {
        XmuCoreAlign xmuCoreAlign = (XmuCoreAlign)theEObject;
        T result = caseXmuCoreAlign(xmuCoreAlign);
        if (result == null) result = caseXmuCoreCompositionChildStatement(xmuCoreAlign);
        if (result == null) result = caseXmuCoreStatement(xmuCoreAlign);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_FUNCTION_CALL:
      {
        XmuCoreFunctionCall xmuCoreFunctionCall = (XmuCoreFunctionCall)theEObject;
        T result = caseXmuCoreFunctionCall(xmuCoreFunctionCall);
        if (result == null) result = caseXmuCoreCompositionChildStatement(xmuCoreFunctionCall);
        if (result == null) result = caseXmuCoreStatement(xmuCoreFunctionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_INDEX:
      {
        XmuCoreIndex xmuCoreIndex = (XmuCoreIndex)theEObject;
        T result = caseXmuCoreIndex(xmuCoreIndex);
        if (result == null) result = caseXmuCoreCompositionChildStatement(xmuCoreIndex);
        if (result == null) result = caseXmuCoreStatement(xmuCoreIndex);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.INDEX_PART:
      {
        IndexPart indexPart = (IndexPart)theEObject;
        T result = caseIndexPart(indexPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.XMU_CORE_FOR_EACH_MATCH_SOURCE:
      {
        XmuCoreForEachMatchSource xmuCoreForEachMatchSource = (XmuCoreForEachMatchSource)theEObject;
        T result = caseXmuCoreForEachMatchSource(xmuCoreForEachMatchSource);
        if (result == null) result = caseXmuCoreCompositionChildStatement(xmuCoreForEachMatchSource);
        if (result == null) result = caseXmuCoreStatement(xmuCoreForEachMatchSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.CONTEXT_AWARE_CONDITION:
      {
        ContextAwareCondition contextAwareCondition = (ContextAwareCondition)theEObject;
        T result = caseContextAwareCondition(contextAwareCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.CONTEXT_AWARE_UNIDIRECTIONAL_ACTION:
      {
        ContextAwareUnidirectionalAction contextAwareUnidirectionalAction = (ContextAwareUnidirectionalAction)theEObject;
        T result = caseContextAwareUnidirectionalAction(contextAwareUnidirectionalAction);
        if (result == null) result = caseContextAwareAction(contextAwareUnidirectionalAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.BI_GUL_STATEMENT:
      {
        BiGULStatement biGULStatement = (BiGULStatement)theEObject;
        T result = caseBiGULStatement(biGULStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.BI_GUL_REPLACE:
      {
        BiGULReplace biGULReplace = (BiGULReplace)theEObject;
        T result = caseBiGULReplace(biGULReplace);
        if (result == null) result = caseBiGULStatement(biGULReplace);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.BI_GUL_SKIP:
      {
        BiGULSkip biGULSkip = (BiGULSkip)theEObject;
        T result = caseBiGULSkip(biGULSkip);
        if (result == null) result = caseBiGULStatement(biGULSkip);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.CUSTOMIZED_BI_GUL_REFERENCE:
      {
        CustomizedBiGULReference customizedBiGULReference = (CustomizedBiGULReference)theEObject;
        T result = caseCustomizedBiGULReference(customizedBiGULReference);
        if (result == null) result = caseBiGULStatement(customizedBiGULReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.CONTEXT_EXPRESSION:
      {
        ContextExpression contextExpression = (ContextExpression)theEObject;
        T result = caseContextExpression(contextExpression);
        if (result == null) result = caseXExpression(contextExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.CONTEXT_PRIMARY_EXPRESSION:
      {
        ContextPrimaryExpression contextPrimaryExpression = (ContextPrimaryExpression)theEObject;
        T result = caseContextPrimaryExpression(contextPrimaryExpression);
        if (result == null) result = caseContextExpression(contextPrimaryExpression);
        if (result == null) result = caseXExpression(contextPrimaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.NEW_INSTANCE_EXPRESSION:
      {
        NewInstanceExpression newInstanceExpression = (NewInstanceExpression)theEObject;
        T result = caseNewInstanceExpression(newInstanceExpression);
        if (result == null) result = caseXExpression(newInstanceExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.ANNOTATED_TYPE:
      {
        AnnotatedType annotatedType = (AnnotatedType)theEObject;
        T result = caseAnnotatedType(annotatedType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.ALL_INSTANCE_EXPRESSION:
      {
        AllInstanceExpression allInstanceExpression = (AllInstanceExpression)theEObject;
        T result = caseAllInstanceExpression(allInstanceExpression);
        if (result == null) result = caseXExpression(allInstanceExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.MODIFICATION_EXPRESSION:
      {
        ModificationExpression modificationExpression = (ModificationExpression)theEObject;
        T result = caseModificationExpression(modificationExpression);
        if (result == null) result = caseXExpression(modificationExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.ENFORCEMENT_EXPRESSION:
      {
        EnforcementExpression enforcementExpression = (EnforcementExpression)theEObject;
        T result = caseEnforcementExpression(enforcementExpression);
        if (result == null) result = caseModificationExpression(enforcementExpression);
        if (result == null) result = caseXExpression(enforcementExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.MATCH_EXPRESSION:
      {
        MatchExpression matchExpression = (MatchExpression)theEObject;
        T result = caseMatchExpression(matchExpression);
        if (result == null) result = caseModificationExpression(matchExpression);
        if (result == null) result = caseXExpression(matchExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.DELETE_ELEMENT_EXPRESSION:
      {
        DeleteElementExpression deleteElementExpression = (DeleteElementExpression)theEObject;
        T result = caseDeleteElementExpression(deleteElementExpression);
        if (result == null) result = caseModificationExpression(deleteElementExpression);
        if (result == null) result = caseXExpression(deleteElementExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.INSERT_ELEMENT_EXPRESSION:
      {
        InsertElementExpression insertElementExpression = (InsertElementExpression)theEObject;
        T result = caseInsertElementExpression(insertElementExpression);
        if (result == null) result = caseModificationExpression(insertElementExpression);
        if (result == null) result = caseXExpression(insertElementExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.VALUE_MAPPING:
      {
        ValueMapping valueMapping = (ValueMapping)theEObject;
        T result = caseValueMapping(valueMapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.DEFINED_CONTEXT_TYPE_REF:
      {
        DefinedContextTypeRef definedContextTypeRef = (DefinedContextTypeRef)theEObject;
        T result = caseDefinedContextTypeRef(definedContextTypeRef);
        if (result == null) result = caseContextTypeRef(definedContextTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.ECORE_TYPE_REF:
      {
        EcoreTypeRef ecoreTypeRef = (EcoreTypeRef)theEObject;
        T result = caseEcoreTypeRef(ecoreTypeRef);
        if (result == null) result = caseTypeRef(ecoreTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.FEATURE_TYPE_REF:
      {
        FeatureTypeRef featureTypeRef = (FeatureTypeRef)theEObject;
        T result = caseFeatureTypeRef(featureTypeRef);
        if (result == null) result = caseTypeRef(featureTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.NAVIGATION_EXPRESSION:
      {
        NavigationExpression navigationExpression = (NavigationExpression)theEObject;
        T result = caseNavigationExpression(navigationExpression);
        if (result == null) result = caseContextExpression(navigationExpression);
        if (result == null) result = caseXExpression(navigationExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.CONTEXT_VAR_EXPRESSION:
      {
        ContextVarExpression contextVarExpression = (ContextVarExpression)theEObject;
        T result = caseContextVarExpression(contextVarExpression);
        if (result == null) result = caseContextPrimaryExpression(contextVarExpression);
        if (result == null) result = caseContextExpression(contextVarExpression);
        if (result == null) result = caseXExpression(contextVarExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.EXPRESSION_CONVERSION:
      {
        ExpressionConversion expressionConversion = (ExpressionConversion)theEObject;
        T result = caseExpressionConversion(expressionConversion);
        if (result == null) result = caseContextPrimaryExpression(expressionConversion);
        if (result == null) result = caseContextExpression(expressionConversion);
        if (result == null) result = caseXExpression(expressionConversion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BXCorePackage.MODIFICATION_EXPRESSION_BLOCK:
      {
        ModificationExpressionBlock modificationExpressionBlock = (ModificationExpressionBlock)theEObject;
        T result = caseModificationExpressionBlock(modificationExpressionBlock);
        if (result == null) result = caseXExpression(modificationExpressionBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BX Program</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BX Program</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBXProgram(BXProgram object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context Aware Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context Aware Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContextAwareAction(ContextAwareAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImportSection(ImportSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Slot</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Slot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataSlot(DataSlot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefinition(Definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Helper Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Helper Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHelperDefinition(HelperDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Customized Bi GUL Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Customized Bi GUL Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCustomizedBiGULDefinition(CustomizedBiGULDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLiteral(TypeLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Type Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Type Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleTypeLiteral(TupleTypeLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unordered Tuple Type Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unordered Tuple Type Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnorderedTupleTypeLiteral(UnorderedTupleTypeLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ordered Tuple Type Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ordered Tuple Type Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderedTupleTypeLiteral(OrderedTupleTypeLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeVar(TypeVar object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predefined Type Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predefined Type Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredefinedTypeLiteral(PredefinedTypeLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Type Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Type Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternTypeLiteral(PatternTypeLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeDefinition(TypeDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternDefinition(PatternDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContextTypeRef(ContextTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BX Function Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BX Function Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBXFunctionDefinition(BXFunctionDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeRef(TypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Index Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Index Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndexDefinition(IndexDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternNode(PatternNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Pattern Edge</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Pattern Edge</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractPatternEdge(AbstractPatternEdge object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Edge</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Edge</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternEdge(PatternEdge object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Path Edge</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Path Edge</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternPathEdge(PatternPathEdge object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dashed Path Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dashed Path Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDashedPathType(DashedPathType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dashed Path Type Segment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dashed Path Type Segment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDashedPathTypeSegment(DashedPathTypeSegment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Value Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Value Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternValueCondition(PatternValueCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Node Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Node Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternNodeRef(PatternNodeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePattern(Pattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Definition Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Definition Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternDefinitionReference(PatternDefinitionReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreStatement(XmuCoreStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Composition Child Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Composition Child Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreCompositionChildStatement(XmuCoreCompositionChildStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Indicator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Indicator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeIndicator(TypeIndicator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Context Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Context Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreContextSource(XmuCoreContextSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context Aware Derivation Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context Aware Derivation Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContextAwareDerivationAction(ContextAwareDerivationAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Derive Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Derive Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreDeriveSource(XmuCoreDeriveSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Dependency View</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Dependency View</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreDependencyView(XmuCoreDependencyView object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Match Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Match Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreMatchSource(XmuCoreMatchSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Match View</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Match View</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreMatchView(XmuCoreMatchView object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Expand Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Expand Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreExpandSource(XmuCoreExpandSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Expand View</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Expand View</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreExpandView(XmuCoreExpandView object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarMapping(VarMapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Graph Replace</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Graph Replace</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreGraphReplace(XmuCoreGraphReplace object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Parallel Composition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Parallel Composition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreParallelComposition(XmuCoreParallelComposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Switch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Switch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreSwitch(XmuCoreSwitch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Switch Branch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Switch Branch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreSwitchBranch(XmuCoreSwitchBranch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Switch Adaption</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Switch Adaption</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreSwitchAdaption(XmuCoreSwitchAdaption object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conversion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conversion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConversion(Conversion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Fork</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Fork</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreFork(XmuCoreFork object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Fork Branch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Fork Branch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreForkBranch(XmuCoreForkBranch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Align</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Align</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreAlign(XmuCoreAlign object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreFunctionCall(XmuCoreFunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core Index</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core Index</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreIndex(XmuCoreIndex object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Index Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Index Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndexPart(IndexPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xmu Core For Each Match Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xmu Core For Each Match Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXmuCoreForEachMatchSource(XmuCoreForEachMatchSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context Aware Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context Aware Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContextAwareCondition(ContextAwareCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context Aware Unidirectional Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context Aware Unidirectional Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContextAwareUnidirectionalAction(ContextAwareUnidirectionalAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bi GUL Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bi GUL Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBiGULStatement(BiGULStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bi GUL Replace</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bi GUL Replace</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBiGULReplace(BiGULReplace object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bi GUL Skip</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bi GUL Skip</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBiGULSkip(BiGULSkip object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Customized Bi GUL Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Customized Bi GUL Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCustomizedBiGULReference(CustomizedBiGULReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContextExpression(ContextExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context Primary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context Primary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContextPrimaryExpression(ContextPrimaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>New Instance Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>New Instance Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNewInstanceExpression(NewInstanceExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annotated Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annotated Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnotatedType(AnnotatedType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>All Instance Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>All Instance Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAllInstanceExpression(AllInstanceExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modification Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modification Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModificationExpression(ModificationExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enforcement Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enforcement Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnforcementExpression(EnforcementExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Match Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Match Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMatchExpression(MatchExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delete Element Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delete Element Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeleteElementExpression(DeleteElementExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Insert Element Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Insert Element Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInsertElementExpression(InsertElementExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValueMapping(ValueMapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Defined Context Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Defined Context Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefinedContextTypeRef(DefinedContextTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ecore Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ecore Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEcoreTypeRef(EcoreTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feature Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feature Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeatureTypeRef(FeatureTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigation Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigation Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigationExpression(NavigationExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context Var Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context Var Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContextVarExpression(ContextVarExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Conversion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Conversion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionConversion(ExpressionConversion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modification Expression Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modification Expression Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModificationExpressionBlock(ModificationExpressionBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XExpression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XExpression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @since 2.7
   * @generated
   */
  public T caseXExpression(XExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //BXCoreSwitch
