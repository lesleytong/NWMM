/**
 * generated by Xtext 2.18.0.M3
 */
package edu.ustb.sei.mde.bxcore.dsl.bXCore.impl;

import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXCorePackage;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextAwareCondition;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.ContextAwareUnidirectionalAction;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.Pattern;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreAlign;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.XmuCoreStatement;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Xmu Core Align</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.XmuCoreAlignImpl#getSourcePattern <em>Source Pattern</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.XmuCoreAlignImpl#getViewPattern <em>View Pattern</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.XmuCoreAlignImpl#getAlignment <em>Alignment</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.XmuCoreAlignImpl#getMatch <em>Match</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.XmuCoreAlignImpl#getUnmatchS <em>Unmatch S</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.XmuCoreAlignImpl#getUnmatchV <em>Unmatch V</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XmuCoreAlignImpl extends XmuCoreCompositionChildStatementImpl implements XmuCoreAlign
{
  /**
   * The cached value of the '{@link #getSourcePattern() <em>Source Pattern</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSourcePattern()
   * @generated
   * @ordered
   */
  protected Pattern sourcePattern;

  /**
   * The cached value of the '{@link #getViewPattern() <em>View Pattern</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getViewPattern()
   * @generated
   * @ordered
   */
  protected Pattern viewPattern;

  /**
   * The cached value of the '{@link #getAlignment() <em>Alignment</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlignment()
   * @generated
   * @ordered
   */
  protected ContextAwareCondition alignment;

  /**
   * The cached value of the '{@link #getMatch() <em>Match</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMatch()
   * @generated
   * @ordered
   */
  protected XmuCoreStatement match;

  /**
   * The cached value of the '{@link #getUnmatchS() <em>Unmatch S</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnmatchS()
   * @generated
   * @ordered
   */
  protected ContextAwareUnidirectionalAction unmatchS;

  /**
   * The cached value of the '{@link #getUnmatchV() <em>Unmatch V</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnmatchV()
   * @generated
   * @ordered
   */
  protected ContextAwareUnidirectionalAction unmatchV;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XmuCoreAlignImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BXCorePackage.Literals.XMU_CORE_ALIGN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pattern getSourcePattern()
  {
    return sourcePattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSourcePattern(Pattern newSourcePattern, NotificationChain msgs)
  {
    Pattern oldSourcePattern = sourcePattern;
    sourcePattern = newSourcePattern;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_ALIGN__SOURCE_PATTERN, oldSourcePattern, newSourcePattern);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSourcePattern(Pattern newSourcePattern)
  {
    if (newSourcePattern != sourcePattern)
    {
      NotificationChain msgs = null;
      if (sourcePattern != null)
        msgs = ((InternalEObject)sourcePattern).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_ALIGN__SOURCE_PATTERN, null, msgs);
      if (newSourcePattern != null)
        msgs = ((InternalEObject)newSourcePattern).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_ALIGN__SOURCE_PATTERN, null, msgs);
      msgs = basicSetSourcePattern(newSourcePattern, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_ALIGN__SOURCE_PATTERN, newSourcePattern, newSourcePattern));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pattern getViewPattern()
  {
    return viewPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetViewPattern(Pattern newViewPattern, NotificationChain msgs)
  {
    Pattern oldViewPattern = viewPattern;
    viewPattern = newViewPattern;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_ALIGN__VIEW_PATTERN, oldViewPattern, newViewPattern);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setViewPattern(Pattern newViewPattern)
  {
    if (newViewPattern != viewPattern)
    {
      NotificationChain msgs = null;
      if (viewPattern != null)
        msgs = ((InternalEObject)viewPattern).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_ALIGN__VIEW_PATTERN, null, msgs);
      if (newViewPattern != null)
        msgs = ((InternalEObject)newViewPattern).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_ALIGN__VIEW_PATTERN, null, msgs);
      msgs = basicSetViewPattern(newViewPattern, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_ALIGN__VIEW_PATTERN, newViewPattern, newViewPattern));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextAwareCondition getAlignment()
  {
    return alignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAlignment(ContextAwareCondition newAlignment, NotificationChain msgs)
  {
    ContextAwareCondition oldAlignment = alignment;
    alignment = newAlignment;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_ALIGN__ALIGNMENT, oldAlignment, newAlignment);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAlignment(ContextAwareCondition newAlignment)
  {
    if (newAlignment != alignment)
    {
      NotificationChain msgs = null;
      if (alignment != null)
        msgs = ((InternalEObject)alignment).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_ALIGN__ALIGNMENT, null, msgs);
      if (newAlignment != null)
        msgs = ((InternalEObject)newAlignment).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_ALIGN__ALIGNMENT, null, msgs);
      msgs = basicSetAlignment(newAlignment, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_ALIGN__ALIGNMENT, newAlignment, newAlignment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XmuCoreStatement getMatch()
  {
    return match;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMatch(XmuCoreStatement newMatch, NotificationChain msgs)
  {
    XmuCoreStatement oldMatch = match;
    match = newMatch;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_ALIGN__MATCH, oldMatch, newMatch);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMatch(XmuCoreStatement newMatch)
  {
    if (newMatch != match)
    {
      NotificationChain msgs = null;
      if (match != null)
        msgs = ((InternalEObject)match).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_ALIGN__MATCH, null, msgs);
      if (newMatch != null)
        msgs = ((InternalEObject)newMatch).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_ALIGN__MATCH, null, msgs);
      msgs = basicSetMatch(newMatch, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_ALIGN__MATCH, newMatch, newMatch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextAwareUnidirectionalAction getUnmatchS()
  {
    return unmatchS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnmatchS(ContextAwareUnidirectionalAction newUnmatchS, NotificationChain msgs)
  {
    ContextAwareUnidirectionalAction oldUnmatchS = unmatchS;
    unmatchS = newUnmatchS;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_ALIGN__UNMATCH_S, oldUnmatchS, newUnmatchS);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUnmatchS(ContextAwareUnidirectionalAction newUnmatchS)
  {
    if (newUnmatchS != unmatchS)
    {
      NotificationChain msgs = null;
      if (unmatchS != null)
        msgs = ((InternalEObject)unmatchS).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_ALIGN__UNMATCH_S, null, msgs);
      if (newUnmatchS != null)
        msgs = ((InternalEObject)newUnmatchS).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_ALIGN__UNMATCH_S, null, msgs);
      msgs = basicSetUnmatchS(newUnmatchS, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_ALIGN__UNMATCH_S, newUnmatchS, newUnmatchS));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextAwareUnidirectionalAction getUnmatchV()
  {
    return unmatchV;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnmatchV(ContextAwareUnidirectionalAction newUnmatchV, NotificationChain msgs)
  {
    ContextAwareUnidirectionalAction oldUnmatchV = unmatchV;
    unmatchV = newUnmatchV;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_ALIGN__UNMATCH_V, oldUnmatchV, newUnmatchV);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUnmatchV(ContextAwareUnidirectionalAction newUnmatchV)
  {
    if (newUnmatchV != unmatchV)
    {
      NotificationChain msgs = null;
      if (unmatchV != null)
        msgs = ((InternalEObject)unmatchV).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_ALIGN__UNMATCH_V, null, msgs);
      if (newUnmatchV != null)
        msgs = ((InternalEObject)newUnmatchV).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.XMU_CORE_ALIGN__UNMATCH_V, null, msgs);
      msgs = basicSetUnmatchV(newUnmatchV, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXCorePackage.XMU_CORE_ALIGN__UNMATCH_V, newUnmatchV, newUnmatchV));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BXCorePackage.XMU_CORE_ALIGN__SOURCE_PATTERN:
        return basicSetSourcePattern(null, msgs);
      case BXCorePackage.XMU_CORE_ALIGN__VIEW_PATTERN:
        return basicSetViewPattern(null, msgs);
      case BXCorePackage.XMU_CORE_ALIGN__ALIGNMENT:
        return basicSetAlignment(null, msgs);
      case BXCorePackage.XMU_CORE_ALIGN__MATCH:
        return basicSetMatch(null, msgs);
      case BXCorePackage.XMU_CORE_ALIGN__UNMATCH_S:
        return basicSetUnmatchS(null, msgs);
      case BXCorePackage.XMU_CORE_ALIGN__UNMATCH_V:
        return basicSetUnmatchV(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BXCorePackage.XMU_CORE_ALIGN__SOURCE_PATTERN:
        return getSourcePattern();
      case BXCorePackage.XMU_CORE_ALIGN__VIEW_PATTERN:
        return getViewPattern();
      case BXCorePackage.XMU_CORE_ALIGN__ALIGNMENT:
        return getAlignment();
      case BXCorePackage.XMU_CORE_ALIGN__MATCH:
        return getMatch();
      case BXCorePackage.XMU_CORE_ALIGN__UNMATCH_S:
        return getUnmatchS();
      case BXCorePackage.XMU_CORE_ALIGN__UNMATCH_V:
        return getUnmatchV();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BXCorePackage.XMU_CORE_ALIGN__SOURCE_PATTERN:
        setSourcePattern((Pattern)newValue);
        return;
      case BXCorePackage.XMU_CORE_ALIGN__VIEW_PATTERN:
        setViewPattern((Pattern)newValue);
        return;
      case BXCorePackage.XMU_CORE_ALIGN__ALIGNMENT:
        setAlignment((ContextAwareCondition)newValue);
        return;
      case BXCorePackage.XMU_CORE_ALIGN__MATCH:
        setMatch((XmuCoreStatement)newValue);
        return;
      case BXCorePackage.XMU_CORE_ALIGN__UNMATCH_S:
        setUnmatchS((ContextAwareUnidirectionalAction)newValue);
        return;
      case BXCorePackage.XMU_CORE_ALIGN__UNMATCH_V:
        setUnmatchV((ContextAwareUnidirectionalAction)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BXCorePackage.XMU_CORE_ALIGN__SOURCE_PATTERN:
        setSourcePattern((Pattern)null);
        return;
      case BXCorePackage.XMU_CORE_ALIGN__VIEW_PATTERN:
        setViewPattern((Pattern)null);
        return;
      case BXCorePackage.XMU_CORE_ALIGN__ALIGNMENT:
        setAlignment((ContextAwareCondition)null);
        return;
      case BXCorePackage.XMU_CORE_ALIGN__MATCH:
        setMatch((XmuCoreStatement)null);
        return;
      case BXCorePackage.XMU_CORE_ALIGN__UNMATCH_S:
        setUnmatchS((ContextAwareUnidirectionalAction)null);
        return;
      case BXCorePackage.XMU_CORE_ALIGN__UNMATCH_V:
        setUnmatchV((ContextAwareUnidirectionalAction)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BXCorePackage.XMU_CORE_ALIGN__SOURCE_PATTERN:
        return sourcePattern != null;
      case BXCorePackage.XMU_CORE_ALIGN__VIEW_PATTERN:
        return viewPattern != null;
      case BXCorePackage.XMU_CORE_ALIGN__ALIGNMENT:
        return alignment != null;
      case BXCorePackage.XMU_CORE_ALIGN__MATCH:
        return match != null;
      case BXCorePackage.XMU_CORE_ALIGN__UNMATCH_S:
        return unmatchS != null;
      case BXCorePackage.XMU_CORE_ALIGN__UNMATCH_V:
        return unmatchV != null;
    }
    return super.eIsSet(featureID);
  }

} //XmuCoreAlignImpl
