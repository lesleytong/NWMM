/**
 * generated by Xtext 2.18.0.M3
 */
package edu.ustb.sei.mde.bxcore.dsl.bXCore.impl;

import edu.ustb.sei.mde.bxcore.dsl.bXCore.BXCorePackage;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.BiGULStatement;
import edu.ustb.sei.mde.bxcore.dsl.bXCore.Conversion;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Conversion</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.ConversionImpl#getBigul <em>Bigul</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.ConversionImpl#getSource <em>Source</em>}</li>
 *   <li>{@link edu.ustb.sei.mde.bxcore.dsl.bXCore.impl.ConversionImpl#getView <em>View</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConversionImpl extends MinimalEObjectImpl.Container implements Conversion
{
  /**
   * The cached value of the '{@link #getBigul() <em>Bigul</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBigul()
   * @generated
   * @ordered
   */
  protected BiGULStatement bigul;

  /**
   * The cached value of the '{@link #getSource() <em>Source</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected EList<String> source;

  /**
   * The cached value of the '{@link #getView() <em>View</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getView()
   * @generated
   * @ordered
   */
  protected EList<String> view;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConversionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BXCorePackage.Literals.CONVERSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BiGULStatement getBigul()
  {
    return bigul;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBigul(BiGULStatement newBigul, NotificationChain msgs)
  {
    BiGULStatement oldBigul = bigul;
    bigul = newBigul;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BXCorePackage.CONVERSION__BIGUL, oldBigul, newBigul);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBigul(BiGULStatement newBigul)
  {
    if (newBigul != bigul)
    {
      NotificationChain msgs = null;
      if (bigul != null)
        msgs = ((InternalEObject)bigul).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.CONVERSION__BIGUL, null, msgs);
      if (newBigul != null)
        msgs = ((InternalEObject)newBigul).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BXCorePackage.CONVERSION__BIGUL, null, msgs);
      msgs = basicSetBigul(newBigul, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BXCorePackage.CONVERSION__BIGUL, newBigul, newBigul));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getSource()
  {
    if (source == null)
    {
      source = new EDataTypeEList<String>(String.class, this, BXCorePackage.CONVERSION__SOURCE);
    }
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getView()
  {
    if (view == null)
    {
      view = new EDataTypeEList<String>(String.class, this, BXCorePackage.CONVERSION__VIEW);
    }
    return view;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BXCorePackage.CONVERSION__BIGUL:
        return basicSetBigul(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BXCorePackage.CONVERSION__BIGUL:
        return getBigul();
      case BXCorePackage.CONVERSION__SOURCE:
        return getSource();
      case BXCorePackage.CONVERSION__VIEW:
        return getView();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BXCorePackage.CONVERSION__BIGUL:
        setBigul((BiGULStatement)newValue);
        return;
      case BXCorePackage.CONVERSION__SOURCE:
        getSource().clear();
        getSource().addAll((Collection<? extends String>)newValue);
        return;
      case BXCorePackage.CONVERSION__VIEW:
        getView().clear();
        getView().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BXCorePackage.CONVERSION__BIGUL:
        setBigul((BiGULStatement)null);
        return;
      case BXCorePackage.CONVERSION__SOURCE:
        getSource().clear();
        return;
      case BXCorePackage.CONVERSION__VIEW:
        getView().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BXCorePackage.CONVERSION__BIGUL:
        return bigul != null;
      case BXCorePackage.CONVERSION__SOURCE:
        return source != null && !source.isEmpty();
      case BXCorePackage.CONVERSION__VIEW:
        return view != null && !view.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (source: ");
    result.append(source);
    result.append(", view: ");
    result.append(view);
    result.append(')');
    return result.toString();
  }

} //ConversionImpl
